{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.6 (2024-07-08)\n *\n * Highcharts\n *\n * (c) 2010-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/data-tools', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Data/Modifiers/DataModifier.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - GÃ¸ran Slettemark\n         *\n         * */\n        var addEvent = U.addEvent, fireEvent = U.fireEvent, merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class to provide an interface for modifying a table.\n         *\n         */\n        var DataModifier = /** @class */ (function () {\n            function DataModifier() {\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Runs a timed execution of the modifier on the given datatable.\n             * Can be configured to run multiple times.\n             *\n             * @param {DataTable} dataTable\n             * The datatable to execute\n             *\n             * @param {DataModifier.BenchmarkOptions} options\n             * Options. Currently supports `iterations` for number of iterations.\n             *\n             * @return {Array<number>}\n             * An array of times in milliseconds\n             *\n             */\n            DataModifier.prototype.benchmark = function (dataTable, options) {\n                var results = [];\n                var modifier = this;\n                var execute = function () {\n                    modifier.modifyTable(dataTable);\n                    modifier.emit({\n                        type: 'afterBenchmarkIteration'\n                    });\n                };\n                var defaultOptions = {\n                    iterations: 1\n                };\n                var iterations = merge(defaultOptions, options).iterations;\n                modifier.on('afterBenchmarkIteration', function () {\n                    if (results.length === iterations) {\n                        modifier.emit({\n                            type: 'afterBenchmark',\n                            results: results\n                        });\n                        return;\n                    }\n                    // Run again\n                    execute();\n                });\n                var times = {\n                    startTime: 0,\n                    endTime: 0\n                };\n                // Add timers\n                modifier.on('modify', function () {\n                    times.startTime = window.performance.now();\n                });\n                modifier.on('afterModify', function () {\n                    times.endTime = window.performance.now();\n                    results.push(times.endTime - times.startTime);\n                });\n                // Initial run\n                execute();\n                return results;\n            };\n            /**\n             * Emits an event on the modifier to all registered callbacks of this event.\n             *\n             * @param {DataModifier.Event} [e]\n             * Event object containing additonal event information.\n             */\n            DataModifier.prototype.emit = function (e) {\n                fireEvent(this, e.type, e);\n            };\n            /**\n             * Returns a modified copy of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            DataModifier.prototype.modify = function (table, eventDetail) {\n                var modifier = this;\n                return new Promise(function (resolve, reject) {\n                    if (table.modified === table) {\n                        table.modified = table.clone(false, eventDetail);\n                    }\n                    try {\n                        resolve(modifier.modifyTable(table, eventDetail));\n                    }\n                    catch (e) {\n                        modifier.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table: table\n                        });\n                        reject(e);\n                    }\n                });\n            };\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            DataModifier.prototype.modifyCell = function (table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columnName, rowIndex, cellValue, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            };\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            DataModifier.prototype.modifyColumns = function (table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columns, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            };\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            DataModifier.prototype.modifyRows = function (table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            rows, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            };\n            /**\n             * Registers a callback for a specific modifier event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            DataModifier.prototype.on = function (type, callback) {\n                return addEvent(this, type, callback);\n            };\n            return DataModifier;\n        }());\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for modifier events and options.\n         */\n        (function (DataModifier) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with modifier names and their class\n             * constructor.\n             */\n            DataModifier.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a modifier class to the registry. The modifier class has to provide\n             * the `DataModifier.options` property and the `DataModifier.modifyTable`\n             * method to modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the modifier class.\n             *\n             * @param {DataModifierType} DataModifierClass\n             * Modifier class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a modifier registered with this key.\n             */\n            function registerType(key, DataModifierClass) {\n                return (!!key &&\n                    !DataModifier.types[key] &&\n                    !!(DataModifier.types[key] = DataModifierClass));\n            }\n            DataModifier.registerType = registerType;\n        })(DataModifier || (DataModifier = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataModifier;\n    });\n    _registerModule(_modules, 'Data/DataTable.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - GÃ¸ran Slettemark\n         *  - Jomar HÃ¸nsi\n         *\n         * */\n        var addEvent = U.addEvent, fireEvent = U.fireEvent, uniqueKey = U.uniqueKey;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        var DataTable = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataTable class.\n             *\n             * @param {Highcharts.DataTableOptions} [options]\n             * Options to initialize the new DataTable instance.\n             */\n            function DataTable(options) {\n                if (options === void 0) { options = {}; }\n                /**\n                 * Dictionary of all column aliases and their mapped column. If a column\n                 * for one of the get-methods matches an column alias, this column will\n                 * be replaced with the mapped column by the column alias.\n                 *\n                 * @name Highcharts.DataTable#aliases\n                 * @type {Highcharts.Dictionary<string>}\n                 */\n                this.aliases = (options.aliases ?\n                    JSON.parse(JSON.stringify(options.aliases)) :\n                    {});\n                /**\n                 * Whether the ID was automatic generated or given in the constructor.\n                 *\n                 * @name Highcharts.DataTable#autoId\n                 * @type {boolean}\n                 */\n                this.autoId = !options.id;\n                this.columns = {};\n                /**\n                 * ID of the table for identification purposes.\n                 *\n                 * @name Highcharts.DataTable#id\n                 * @type {string}\n                 */\n                this.id = (options.id || uniqueKey());\n                this.modified = this;\n                this.rowCount = 0;\n                this.versionTag = uniqueKey();\n                this.rowKeysId = options.rowKeysId;\n                var columns = options.columns || {}, columnNames = Object.keys(columns), thisColumns = this.columns;\n                var rowCount = 0;\n                for (var i = 0, iEnd = columnNames.length, column = void 0, columnName = void 0; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName].slice();\n                    thisColumns[columnName] = column;\n                    rowCount = Math.max(rowCount, column.length);\n                }\n                for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    thisColumns[columnNames[i]].length = rowCount;\n                }\n                this.rowCount = rowCount;\n                var aliases = options.aliases || {}, aliasKeys = Object.keys(aliases), thisAliases = this.aliases;\n                for (var i = 0, iEnd = aliasKeys.length, alias = void 0; i < iEnd; ++i) {\n                    alias = aliasKeys[i];\n                    thisAliases[alias] = aliases[alias];\n                }\n                this.setRowKeysColumn(rowCount);\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Tests whether a row contains only `null` values or is equal to\n             * DataTable.NULL. If all columns have `null` values, the function returns\n             * `true`. Otherwise, it returns `false` to indicate that the row contains\n             * at least one non-null value.\n             *\n             * @function Highcharts.DataTable.isNull\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Row to test.\n             *\n             * @return {boolean}\n             * Returns `true`, if the row contains only null, otherwise `false`.\n             *\n             * @example\n             * if (DataTable.isNull(row)) {\n             *   // handle null row\n             * }\n             */\n            DataTable.isNull = function (row) {\n                if (row === DataTable.NULL) {\n                    return true;\n                }\n                if (row instanceof Array) {\n                    if (!row.length) {\n                        return false;\n                    }\n                    for (var i = 0, iEnd = row.length; i < iEnd; ++i) {\n                        if (row[i] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    var columnNames = Object.keys(row);\n                    if (!columnNames.length) {\n                        return false;\n                    }\n                    for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (row[columnNames[i]] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns a clone of this table. The cloned table is completely independent\n             * of the original, and any changes made to the clone will not affect\n             * the original table.\n             *\n             * @function Highcharts.DataTable#clone\n             *\n             * @param {boolean} [skipColumns]\n             * Whether to clone columns or not.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Clone of this data table.\n             *\n             * @emits #cloneTable\n             * @emits #afterCloneTable\n             */\n            DataTable.prototype.clone = function (skipColumns, eventDetail) {\n                var table = this, tableOptions = {};\n                table.emit({ type: 'cloneTable', detail: eventDetail });\n                if (!skipColumns) {\n                    tableOptions.aliases = table.aliases;\n                    tableOptions.columns = table.columns;\n                }\n                if (!table.autoId) {\n                    tableOptions.id = table.id;\n                }\n                if (table.rowKeysId) {\n                    tableOptions.rowKeysId = table.rowKeysId;\n                }\n                var tableClone = new DataTable(tableOptions);\n                if (!skipColumns) {\n                    tableClone.versionTag = table.versionTag;\n                }\n                table.emit({\n                    type: 'afterCloneTable',\n                    detail: eventDetail,\n                    tableClone: tableClone\n                });\n                return tableClone;\n            };\n            /**\n             * Deletes a column alias and returns the original column name. If the alias\n             * is not found, the method returns `undefined`. Deleting an alias does not\n             * affect the data in the table, only the way columns are accessed.\n             *\n             * @function Highcharts.DataTable#deleteColumnAlias\n             *\n             * @param {string} alias\n             * The alias to delete.\n             *\n             * @return {string|undefined}\n             * Returns the original column name, if found.\n             */\n            DataTable.prototype.deleteColumnAlias = function (alias) {\n                var _a;\n                var table = this, aliases = table.aliases, deletedAlias = aliases[alias], modifier = table.modifier;\n                if (deletedAlias) {\n                    delete table.aliases[alias];\n                    if (modifier) {\n                        modifier.modifyColumns(table, (_a = {}, _a[deletedAlias] = new Array(table.rowCount), _a), 0);\n                    }\n                }\n                return deletedAlias;\n            };\n            /**\n             * Deletes columns from the table.\n             *\n             * @function Highcharts.DataTable#deleteColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Names (no alias) of columns to delete. If no array is provided, all\n             * columns will be deleted.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTableColumnCollection|undefined}\n             * Returns the deleted columns, if found.\n             *\n             * @emits #deleteColumns\n             * @emits #afterDeleteColumns\n             */\n            DataTable.prototype.deleteColumns = function (columnNames, eventDetail) {\n                var table = this, columns = table.columns, deletedColumns = {}, modifiedColumns = {}, modifier = table.modifier, rowCount = table.rowCount;\n                columnNames = (columnNames || Object.keys(columns));\n                if (columnNames.length) {\n                    table.emit({\n                        type: 'deleteColumns',\n                        columnNames: columnNames,\n                        detail: eventDetail\n                    });\n                    for (var i = 0, iEnd = columnNames.length, column = void 0, columnName = void 0; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        if (column) {\n                            deletedColumns[columnName] = column;\n                            modifiedColumns[columnName] = new Array(rowCount);\n                        }\n                        delete columns[columnName];\n                    }\n                    var nColumns = Object.keys(columns).length;\n                    if (table.rowKeysId && nColumns === 1) {\n                        // All columns deleted, remove row keys column\n                        delete columns[table.rowKeysId];\n                        nColumns = 0;\n                    }\n                    if (!nColumns) {\n                        table.rowCount = 0;\n                    }\n                    if (modifier) {\n                        modifier.modifyColumns(table, modifiedColumns, 0, eventDetail);\n                    }\n                    table.emit({\n                        type: 'afterDeleteColumns',\n                        columns: deletedColumns,\n                        columnNames: columnNames,\n                        detail: eventDetail\n                    });\n                    return deletedColumns;\n                }\n            };\n            /**\n             * Deletes rows in this table.\n             *\n             * @function Highcharts.DataTable#deleteRows\n             *\n             * @param {number} [rowIndex]\n             * Index to start delete of rows. If not specified, all rows will be\n             * deleted.\n             *\n             * @param {number} [rowCount=1]\n             * Number of rows to delete.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Array<Highcharts.DataTableRow>}\n             * Returns the deleted rows, if found.\n             *\n             * @emits #deleteRows\n             * @emits #afterDeleteRows\n             */\n            DataTable.prototype.deleteRows = function (rowIndex, rowCount, eventDetail) {\n                if (rowCount === void 0) { rowCount = 1; }\n                var table = this, deletedRows = [], modifiedRows = [], modifier = table.modifier;\n                table.emit({\n                    type: 'deleteRows',\n                    detail: eventDetail,\n                    rowCount: rowCount,\n                    rowIndex: (rowIndex || 0)\n                });\n                if (typeof rowIndex === 'undefined') {\n                    rowIndex = 0;\n                    rowCount = table.rowCount;\n                }\n                if (rowCount > 0 && rowIndex < table.rowCount) {\n                    var columns = table.columns, columnNames = Object.keys(columns);\n                    for (var i = 0, iEnd = columnNames.length, column = void 0, deletedCells = void 0; i < iEnd; ++i) {\n                        column = columns[columnNames[i]];\n                        deletedCells = column.splice(rowIndex, rowCount);\n                        if (!i) {\n                            table.rowCount = column.length;\n                        }\n                        for (var j = 0, jEnd = deletedCells.length; j < jEnd; ++j) {\n                            deletedRows[j] = (deletedRows[j] || []);\n                            deletedRows[j][i] = deletedCells[j];\n                        }\n                        modifiedRows.push(new Array(iEnd));\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, modifiedRows, (rowIndex || 0), eventDetail);\n                }\n                table.emit({\n                    type: 'afterDeleteRows',\n                    detail: eventDetail,\n                    rowCount: rowCount,\n                    rowIndex: (rowIndex || 0),\n                    rows: deletedRows\n                });\n                return deletedRows;\n            };\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            DataTable.prototype.emit = function (e) {\n                var table = this;\n                switch (e.type) {\n                    case 'afterDeleteColumns':\n                    case 'afterDeleteRows':\n                    case 'afterSetCell':\n                    case 'afterSetColumns':\n                    case 'afterSetRows':\n                        table.versionTag = uniqueKey();\n                        break;\n                    default:\n                }\n                fireEvent(table, e.type, e);\n            };\n            /**\n             * Fetches a single cell value.\n             *\n             * @function Highcharts.DataTable#getCell\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias of the cell to retrieve.\n             *\n             * @param {number} rowIndex\n             * Row index of the cell to retrieve.\n             *\n             * @return {Highcharts.DataTableCellType|undefined}\n             * Returns the cell value or `undefined`.\n             */\n            DataTable.prototype.getCell = function (columnNameOrAlias, rowIndex) {\n                var table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = table.columns[columnNameOrAlias];\n                if (column) {\n                    return column[rowIndex];\n                }\n            };\n            /**\n             * Fetches a cell value for the given row as a boolean.\n             *\n             * @function Highcharts.DataTable#getCellAsBoolean\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {boolean}\n             * Returns the cell value of the row as a boolean.\n             */\n            DataTable.prototype.getCellAsBoolean = function (columnNameOrAlias, rowIndex) {\n                var table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = table.columns[columnNameOrAlias];\n                return !!(column && column[rowIndex]);\n            };\n            /**\n             * Fetches a cell value for the given row as a number.\n             *\n             * @function Highcharts.DataTable#getCellAsNumber\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to return NaN instead of `null` and `undefined`.\n             *\n             * @return {number|null}\n             * Returns the cell value of the row as a number.\n             */\n            DataTable.prototype.getCellAsNumber = function (columnNameOrAlias, rowIndex, useNaN) {\n                var table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = table.columns[columnNameOrAlias];\n                var cellValue = (column && column[rowIndex]);\n                switch (typeof cellValue) {\n                    case 'boolean':\n                        return (cellValue ? 1 : 0);\n                    case 'number':\n                        return (isNaN(cellValue) && !useNaN ? null : cellValue);\n                }\n                cellValue = parseFloat(\"\".concat(cellValue !== null && cellValue !== void 0 ? cellValue : ''));\n                return (isNaN(cellValue) && !useNaN ? null : cellValue);\n            };\n            /**\n             * Fetches a cell value for the given row as a string.\n             *\n             * @function Highcharts.DataTable#getCellAsString\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {string}\n             * Returns the cell value of the row as a string.\n             */\n            DataTable.prototype.getCellAsString = function (columnNameOrAlias, rowIndex) {\n                var table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = table.columns[columnNameOrAlias];\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                return \"\".concat((column && column[rowIndex]));\n            };\n            /**\n             * Fetches the given column by the canonical column name or by an alias.\n             * This function is a simplified wrap of {@link getColumns}.\n             *\n             * @function Highcharts.DataTable#getColumn\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of the column to get, alias takes precedence.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return the column as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            DataTable.prototype.getColumn = function (columnNameOrAlias, asReference) {\n                return this.getColumns([columnNameOrAlias], asReference)[columnNameOrAlias];\n            };\n            /**\n             * Fetches the given column by the canonical column name or by an alias, and\n             * validates the type of the first few cells. If the first defined cell is\n             * of type number, it assumes for performance reasons, that all cells are of\n             * type number or `null`. Otherwise it will convert all cells to number\n             * type, except `null`.\n             *\n             * @function Highcharts.DataTable#getColumnAsNumbers\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of the column to get, alias takes precedence.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to use NaN instead of `null` and `undefined`.\n             *\n             * @return {Array<(number|null)>}\n             * A copy of the column, or an empty array if not found.\n             */\n            DataTable.prototype.getColumnAsNumbers = function (columnNameOrAlias, useNaN) {\n                var table = this, columns = table.columns;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = columns[columnNameOrAlias], columnAsNumber = [];\n                if (column) {\n                    var columnLength = column.length;\n                    if (useNaN) {\n                        for (var i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnNameOrAlias, i, true));\n                        }\n                    }\n                    else {\n                        for (var i = 0, cellValue = void 0; i < columnLength; ++i) {\n                            cellValue = column[i];\n                            if (typeof cellValue === 'number') {\n                                // Assume unmixed data for performance reasons\n                                return column.slice();\n                            }\n                            if (cellValue !== null &&\n                                typeof cellValue !== 'undefined') {\n                                break;\n                            }\n                        }\n                        for (var i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnNameOrAlias, i));\n                        }\n                    }\n                }\n                return columnAsNumber;\n            };\n            /**\n             * Fetches all column names.\n             *\n             * @function Highcharts.DataTable#getColumnNames\n             *\n             * @return {Array<string>}\n             * Returns all column names.\n             */\n            DataTable.prototype.getColumnNames = function () {\n                var table = this, columnNames = Object.keys(table.columns);\n                this.removeRowKeysColumn(columnNames);\n                return columnNames;\n            };\n            /**\n             * Retrieves all or the given columns.\n             *\n             * @function Highcharts.DataTable#getColumns\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases to retrieve. Aliases taking precedence.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return columns as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            DataTable.prototype.getColumns = function (columnNamesOrAliases, asReference) {\n                var table = this, tableAliasMap = table.aliases, tableColumns = table.columns, columns = {};\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(tableColumns));\n                this.removeRowKeysColumn(columnNamesOrAliases);\n                for (var i = 0, iEnd = columnNamesOrAliases.length, column = void 0, columnName = void 0; i < iEnd; ++i) {\n                    columnName = columnNamesOrAliases[i];\n                    column = tableColumns[(tableAliasMap[columnName] || columnName)];\n                    if (column) {\n                        columns[columnName] = (asReference ? column : column.slice());\n                    }\n                }\n                return columns;\n            };\n            /**\n             * Retrieves the modifier for the table.\n             * @private\n             *\n             * @return {Highcharts.DataModifier|undefined}\n             * Returns the modifier or `undefined`.\n             */\n            DataTable.prototype.getModifier = function () {\n                return this.modifier;\n            };\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRows}.\n             *\n             * @function Highcharts.DataTable#getRow\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases in order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns the row values, or `undefined` if not found.\n             */\n            DataTable.prototype.getRow = function (rowIndex, columnNamesOrAliases) {\n                return this.getRows(rowIndex, 1, columnNamesOrAliases)[0];\n            };\n            /**\n             * Returns the number of rows in this table.\n             *\n             * @function Highcharts.DataTable#getRowCount\n             *\n             * @return {number}\n             * Number of rows in this table.\n             */\n            DataTable.prototype.getRowCount = function () {\n                // @todo Implement via property getter `.length` browsers supported\n                return this.rowCount;\n            };\n            /**\n             * Retrieves the index of the first row matching a specific cell value.\n             *\n             * @function Highcharts.DataTable#getRowIndexBy\n             *\n             * @param {string} columnNameOrAlias\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @param {number} [rowIndexOffset]\n             * Index offset to start searching.\n             *\n             * @return {number|undefined}\n             * Index of the first row matching the cell value.\n             */\n            DataTable.prototype.getRowIndexBy = function (columnNameOrAlias, cellValue, rowIndexOffset) {\n                var table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = table.columns[columnNameOrAlias];\n                if (column) {\n                    var rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    if (rowIndex !== -1) {\n                        return rowIndex;\n                    }\n                }\n            };\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRowObjects}.\n             *\n             * @function Highcharts.DataTable#getRowObject\n             *\n             * @param {number} rowIndex\n             * Row index.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns the row values, or `undefined` if not found.\n             */\n            DataTable.prototype.getRowObject = function (rowIndex, columnNamesOrAliases) {\n                return this.getRowObjects(rowIndex, 1, columnNamesOrAliases)[0];\n            };\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRowObjects\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns retrieved rows.\n             */\n            DataTable.prototype.getRowObjects = function (rowIndex, rowCount, columnNamesOrAliases) {\n                if (rowIndex === void 0) { rowIndex = 0; }\n                if (rowCount === void 0) { rowCount = (this.rowCount - rowIndex); }\n                var table = this, aliases = table.aliases, columns = table.columns, rows = new Array(rowCount);\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(columns));\n                this.removeRowKeysColumn(columnNamesOrAliases);\n                for (var i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column = void 0, row = void 0; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = {};\n                    for (var _i = 0, columnNamesOrAliases_1 = columnNamesOrAliases; _i < columnNamesOrAliases_1.length; _i++) {\n                        var columnName = columnNamesOrAliases_1[_i];\n                        column = columns[(aliases[columnName] || columnName)];\n                        row[columnName] = (column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            };\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRows\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns retrieved rows.\n             */\n            DataTable.prototype.getRows = function (rowIndex, rowCount, columnNamesOrAliases) {\n                if (rowIndex === void 0) { rowIndex = 0; }\n                if (rowCount === void 0) { rowCount = (this.rowCount - rowIndex); }\n                var table = this, aliases = table.aliases, columns = table.columns, rows = new Array(rowCount);\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(columns));\n                for (var i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column = void 0, row = void 0; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = [];\n                    for (var _i = 0, columnNamesOrAliases_2 = columnNamesOrAliases; _i < columnNamesOrAliases_2.length; _i++) {\n                        var columnName = columnNamesOrAliases_2[_i];\n                        column = columns[(aliases[columnName] || columnName)];\n                        row.push(column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            };\n            /**\n             * Returns the unique version tag of the current state of the table.\n             *\n             * @function Highcharts.DataTable#getVersionTag\n             *\n             * @return {string}\n             * Unique version tag.\n             */\n            DataTable.prototype.getVersionTag = function () {\n                return this.versionTag;\n            };\n            /**\n             * Checks for given column names or aliases.\n             *\n             * @function Highcharts.DataTable#hasColumns\n             *\n             * @param {Array<string>} columnNamesOrAliases\n             * Column names of aliases to check.\n             *\n             * @return {boolean}\n             * Returns `true` if all columns have been found, otherwise `false`.\n             */\n            DataTable.prototype.hasColumns = function (columnNamesOrAliases) {\n                var table = this, aliases = table.aliases, columns = table.columns;\n                for (var i = 0, iEnd = columnNamesOrAliases.length, columnName = void 0; i < iEnd; ++i) {\n                    columnName = columnNamesOrAliases[i];\n                    if (!columns[columnName] && !aliases[columnName]) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            /**\n             * Searches for a specific cell value.\n             *\n             * @function Highcharts.DataTable#hasRowWith\n             *\n             * @param {string} columnNameOrAlias\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @return {boolean}\n             * True, if a row has been found, otherwise false.\n             */\n            DataTable.prototype.hasRowWith = function (columnNameOrAlias, cellValue) {\n                var table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = table.columns[columnNameOrAlias];\n                if (column) {\n                    return (column.indexOf(cellValue) !== -1);\n                }\n                return false;\n            };\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataTable#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataTable>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            DataTable.prototype.on = function (type, callback) {\n                return addEvent(this, type, callback);\n            };\n            /**\n             * Renames a column of cell values.\n             *\n             * @function Highcharts.DataTable#renameColumn\n             *\n             * @param {string} columnName\n             * Name of the column to be renamed.\n             *\n             * @param {string} newColumnName\n             * New name of the column. An existing column with the same name will be\n             * replaced.\n             *\n             * @return {boolean}\n             * Returns `true` if successful, `false` if the column was not found.\n             */\n            DataTable.prototype.renameColumn = function (columnName, newColumnName) {\n                var table = this, columns = table.columns;\n                if (columns[columnName]) {\n                    if (columnName !== newColumnName) {\n                        var aliases = table.aliases;\n                        if (aliases[newColumnName]) {\n                            delete aliases[newColumnName];\n                        }\n                        columns[newColumnName] = columns[columnName];\n                        delete columns[columnName];\n                        if (table.rowKeysId) {\n                            // Ensure that row keys column is last\n                            this.moveRowKeysColumnToLast(columns, table.rowKeysId);\n                        }\n                    }\n                    return true;\n                }\n                return false;\n            };\n            /**\n             * Sets a cell value based on the row index and column name or alias.  Will\n             * insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setCell\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to set.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index to set.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to set.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setCell\n             * @emits #afterSetCell\n             */\n            DataTable.prototype.setCell = function (columnNameOrAlias, rowIndex, cellValue, eventDetail) {\n                var table = this, columns = table.columns, modifier = table.modifier;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = columns[columnNameOrAlias];\n                if (column && column[rowIndex] === cellValue) {\n                    return;\n                }\n                table.emit({\n                    type: 'setCell',\n                    cellValue: cellValue,\n                    columnName: columnNameOrAlias,\n                    detail: eventDetail,\n                    rowIndex: rowIndex\n                });\n                if (!column) {\n                    column = columns[columnNameOrAlias] = new Array(table.rowCount);\n                }\n                if (rowIndex >= table.rowCount) {\n                    table.rowCount = (rowIndex + 1);\n                }\n                column[rowIndex] = cellValue;\n                if (modifier) {\n                    modifier.modifyCell(table, columnNameOrAlias, rowIndex, cellValue);\n                }\n                table.emit({\n                    type: 'afterSetCell',\n                    cellValue: cellValue,\n                    columnName: columnNameOrAlias,\n                    detail: eventDetail,\n                    rowIndex: rowIndex\n                });\n            };\n            /**\n             * Sets cell values for a column. Will insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setColumn\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to set.\n             *\n             * @param {Highcharts.DataTableColumn} [column]\n             * Values to set in the column.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first row to change. (Default: 0)\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            DataTable.prototype.setColumn = function (columnNameOrAlias, column, rowIndex, eventDetail) {\n                var _a;\n                if (column === void 0) { column = []; }\n                if (rowIndex === void 0) { rowIndex = 0; }\n                this.setColumns((_a = {}, _a[columnNameOrAlias] = column, _a), rowIndex, eventDetail);\n            };\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found.\n             *\n             * @function Highcharts.DataTable#setColumns\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names or aliases.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            DataTable.prototype.setColumns = function (columns, rowIndex, eventDetail) {\n                var table = this, tableColumns = table.columns, tableModifier = table.modifier, reset = (typeof rowIndex === 'undefined'), columnNames = Object.keys(columns);\n                table.emit({\n                    type: 'setColumns',\n                    columns: columns,\n                    columnNames: columnNames,\n                    detail: eventDetail,\n                    rowIndex: rowIndex\n                });\n                for (var i = 0, iEnd = columnNames.length, column = void 0, columnName = void 0; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    columnName = (table.aliases[columnName] ||\n                        columnName);\n                    if (reset) {\n                        tableColumns[columnName] = column.slice();\n                        table.rowCount = column.length;\n                    }\n                    else {\n                        var tableColumn = (tableColumns[columnName] ?\n                            tableColumns[columnName] :\n                            tableColumns[columnName] = new Array(table.rowCount));\n                        for (var i_1 = (rowIndex || 0), iEnd_1 = column.length; i_1 < iEnd_1; ++i_1) {\n                            tableColumn[i_1] = column[i_1];\n                        }\n                        table.rowCount = Math.max(table.rowCount, tableColumn.length);\n                    }\n                }\n                var tableColumnNames = Object.keys(tableColumns);\n                for (var i = 0, iEnd = tableColumnNames.length; i < iEnd; ++i) {\n                    tableColumns[tableColumnNames[i]].length = table.rowCount;\n                }\n                if (tableModifier) {\n                    tableModifier.modifyColumns(table, columns, (rowIndex || 0));\n                }\n                if (table.rowKeysId) {\n                    // Ensure that the row keys column is always last\n                    this.moveRowKeysColumnToLast(tableColumns, table.rowKeysId);\n                }\n                table.emit({\n                    type: 'afterSetColumns',\n                    columns: columns,\n                    columnNames: columnNames,\n                    detail: eventDetail,\n                    rowIndex: rowIndex\n                });\n            };\n            /**\n             * Sets the row key column. This column is invisible and the cells\n             * serve as identifiers to the rows they are contained in. Accessing\n             * rows by keys instead of indexes is necessary in cases where rows\n             * are rearranged by a DataModifier (e.g. SortModifier or RangeModifier).\n             *\n             * @function Highcharts.DataTable#setRowKeysColumn\n             *\n             * @param {number} nRows\n             * Number of rows to add to the column.\n             *\n             */\n            DataTable.prototype.setRowKeysColumn = function (nRows) {\n                var id = this.rowKeysId;\n                if (!id) {\n                    return;\n                }\n                this.columns[id] = [];\n                var keysArray = this.columns[id];\n                for (var i = 0; i < nRows; i++) {\n                    keysArray.push(id + '_' + i);\n                }\n            };\n            /**\n             * Get the row key column.\n             *\n             * @function Highcharts.DataTable#getRowKeysColumn\n             *     *\n             * @return {DataTable.Column|undefined}\n             * Returns row keys if rowKeysId is defined, else undefined.\n             */\n            DataTable.prototype.getRowKeysColumn = function () {\n                var id = this.rowKeysId;\n                if (id) {\n                    return this.columns[id];\n                }\n            };\n            /**\n             * Get the row index in the original (unmodified) data table.\n             *\n             * @function Highcharts.DataTable#getRowIndexOriginal\n             *\n             * @param {number} idx\n             * Row index in the modified data table.\n             *\n             * @return {string}\n             * Row index in the original data table.\n             */\n            DataTable.prototype.getRowIndexOriginal = function (idx) {\n                var id = this.rowKeysId;\n                if (id) {\n                    var rowKeyCol = this.columns[id];\n                    var idxOrig = '' + rowKeyCol[idx];\n                    return idxOrig.split('_')[1];\n                }\n                return String(idx);\n            };\n            /**\n             * Sets or unsets the modifier for the table.\n             *\n             * @param {Highcharts.DataModifier} [modifier]\n             * Modifier to set, or `undefined` to unset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Resolves to this table if successful, or rejects on failure.\n             *\n             * @emits #setModifier\n             * @emits #afterSetModifier\n             */\n            DataTable.prototype.setModifier = function (modifier, eventDetail) {\n                var table = this;\n                var promise;\n                table.emit({\n                    type: 'setModifier',\n                    detail: eventDetail,\n                    modifier: modifier,\n                    modified: table.modified\n                });\n                table.modified = table;\n                table.modifier = modifier;\n                if (modifier) {\n                    promise = modifier.modify(table);\n                }\n                else {\n                    promise = Promise.resolve(table);\n                }\n                return promise\n                    .then(function (table) {\n                    table.emit({\n                        type: 'afterSetModifier',\n                        detail: eventDetail,\n                        modifier: modifier,\n                        modified: table.modified\n                    });\n                    return table;\n                })['catch'](function (error) {\n                    table.emit({\n                        type: 'setModifierError',\n                        error: error,\n                        modifier: modifier,\n                        modified: table.modified\n                    });\n                    throw error;\n                });\n            };\n            /**\n             * Sets cell values of a row. Will insert a new row, if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             *\n             * Note: This function is just a simplified wrap of\n             * {@link Highcharts.DataTable#setRows}.\n             *\n             * @function Highcharts.DataTable#setRow\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            DataTable.prototype.setRow = function (row, rowIndex, eventDetail) {\n                this.setRows([row], rowIndex, eventDetail);\n            };\n            /**\n             * Sets cell values for multiple rows. Will insert new rows, if no index was\n             * was provided, or if the index is higher than the total number of table\n             * rows.\n             *\n             * @function Highcharts.DataTable#setRows\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Row values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to set. Leave `undefined` to add as new rows.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            DataTable.prototype.setRows = function (rows, rowIndex, eventDetail) {\n                if (rowIndex === void 0) { rowIndex = this.rowCount; }\n                var table = this, aliases = table.aliases, columns = table.columns, columnNames = Object.keys(columns), modifier = table.modifier, rowCount = rows.length;\n                table.emit({\n                    type: 'setRows',\n                    detail: eventDetail,\n                    rowCount: rowCount,\n                    rowIndex: rowIndex,\n                    rows: rows\n                });\n                for (var i = 0, i2 = rowIndex, row = void 0; i < rowCount; ++i, ++i2) {\n                    row = rows[i];\n                    if (row === DataTable.NULL) {\n                        for (var j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = null;\n                        }\n                    }\n                    else if (row instanceof Array) {\n                        for (var j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = row[j];\n                        }\n                    }\n                    else {\n                        var rowColumnNames = Object.keys(row);\n                        for (var j = 0, jEnd = rowColumnNames.length, rowColumnName = void 0; j < jEnd; ++j) {\n                            rowColumnName = rowColumnNames[j];\n                            rowColumnName = (aliases[rowColumnName] || rowColumnName);\n                            if (!columns[rowColumnName]) {\n                                columns[rowColumnName] = new Array(i2 + 1);\n                            }\n                            columns[rowColumnName][i2] = row[rowColumnName];\n                        }\n                    }\n                }\n                var indexRowCount = (rowIndex + rowCount);\n                if (indexRowCount > table.rowCount) {\n                    table.rowCount = indexRowCount;\n                    for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        columns[columnNames[i]].length = indexRowCount;\n                    }\n                }\n                if (this.rowKeysId && !columnNames.includes(this.rowKeysId)) {\n                    this.setRowKeysColumn(rowCount);\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, rows, rowIndex);\n                }\n                table.emit({\n                    type: 'afterSetRows',\n                    detail: eventDetail,\n                    rowCount: rowCount,\n                    rowIndex: rowIndex,\n                    rows: rows\n                });\n            };\n            // The row keys column must always be the last column\n            DataTable.prototype.moveRowKeysColumnToLast = function (columns, id) {\n                var rowKeyColumn = columns[id];\n                delete columns[id];\n                columns[id] = rowKeyColumn;\n            };\n            // The row keys column must be removed in some methods\n            // (API backwards compatibility)\n            DataTable.prototype.removeRowKeysColumn = function (columnNamesOrAliases) {\n                if (this.rowKeysId) {\n                    var pos = columnNamesOrAliases.indexOf(this.rowKeysId);\n                    if (pos !== -1) {\n                        // Always the last column\n                        columnNamesOrAliases.pop();\n                    }\n                }\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Null state for a row record. In some cases, a row in a table may not\n             * contain any data or may be invalid. In these cases, a null state can be\n             * used to indicate that the row record is empty or invalid.\n             *\n             * @name Highcharts.DataTable.NULL\n             * @type {Highcharts.DataTableRowObject}\n             *\n             * @see {@link Highcharts.DataTable.isNull} for a null test.\n             *\n             * @example\n             * table.setRows([DataTable.NULL, DataTable.NULL], 10);\n             */\n            DataTable.NULL = {};\n            /**\n             * Semantic version string of the DataTable class.\n             * @internal\n             */\n            DataTable.version = '1.0.0';\n            return DataTable;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataTable;\n    });\n    _registerModule(_modules, 'Data/Connectors/DataConnector.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *\n         * */\n        var addEvent = U.addEvent, fireEvent = U.fireEvent, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class providing an interface for managing a DataConnector.\n         *\n         * @private\n         */\n        var DataConnector = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor for the connector class.\n             *\n             * @param {DataConnector.UserOptions} [options]\n             * Options to use in the connector.\n             */\n            function DataConnector(options) {\n                if (options === void 0) { options = {}; }\n                this.table = new DataTable(options.dataTable);\n                this.metadata = options.metadata || { columns: {} };\n            }\n            Object.defineProperty(DataConnector.prototype, \"polling\", {\n                /**\n                 * Poll timer ID, if active.\n                 */\n                get: function () {\n                    return !!this.polling;\n                },\n                enumerable: false,\n                configurable: true\n            });\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for adding metadata for a single column.\n             *\n             * @param {string} name\n             * The name of the column to be described.\n             *\n             * @param {DataConnector.MetaColumn} columnMeta\n             * The metadata to apply to the column.\n             */\n            DataConnector.prototype.describeColumn = function (name, columnMeta) {\n                var connector = this, columns = connector.metadata.columns;\n                columns[name] = merge(columns[name] || {}, columnMeta);\n            };\n            /**\n             * Method for applying columns meta information to the whole DataConnector.\n             *\n             * @param {Highcharts.Dictionary<DataConnector.MetaColumn>} columns\n             * Pairs of column names and MetaColumn objects.\n             */\n            DataConnector.prototype.describeColumns = function (columns) {\n                var connector = this, columnNames = Object.keys(columns);\n                var columnName;\n                while (typeof (columnName = columnNames.pop()) === 'string') {\n                    connector.describeColumn(columnName, columns[columnName]);\n                }\n            };\n            /**\n             * Emits an event on the connector to all registered callbacks of this\n             * event.\n             *\n             * @param {DataConnector.Event} [e]\n             * Event object containing additional event information.\n             */\n            DataConnector.prototype.emit = function (e) {\n                fireEvent(this, e.type, e);\n            };\n            /**\n             * Returns the order of columns.\n             *\n             * @param {boolean} [usePresentationState]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Array<string>|undefined}\n             * Order of columns.\n             */\n            DataConnector.prototype.getColumnOrder = function (\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            usePresentationState) {\n                var connector = this, columns = connector.metadata.columns, names = Object.keys(columns || {});\n                if (names.length) {\n                    return names.sort(function (a, b) { return (pick(columns[a].index, 0) - pick(columns[b].index, 0)); });\n                }\n            };\n            /**\n             * Retrieves the columns of the dataTable,\n             * applies column order from meta.\n             *\n             * @param {boolean} [usePresentationOrder]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * An object with the properties `columnNames` and `columnValues`\n             */\n            DataConnector.prototype.getSortedColumns = function (usePresentationOrder) {\n                return this.table.getColumns(this.getColumnOrder(usePresentationOrder));\n            };\n            /**\n             * The default load method, which fires the `afterLoad` event\n             *\n             * @return {Promise<DataConnector>}\n             * The loaded connector.\n             *\n             * @emits DataConnector#afterLoad\n             */\n            DataConnector.prototype.load = function () {\n                fireEvent(this, 'afterLoad', { table: this.table });\n                return Promise.resolve(this);\n            };\n            /**\n             * Registers a callback for a specific connector event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for the connector callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the connector event.\n             */\n            DataConnector.prototype.on = function (type, callback) {\n                return addEvent(this, type, callback);\n            };\n            /**\n             * The default save method, which fires the `afterSave` event.\n             *\n             * @return {Promise<DataConnector>}\n             * The saved connector.\n             *\n             * @emits DataConnector#afterSave\n             * @emits DataConnector#saveError\n             */\n            DataConnector.prototype.save = function () {\n                fireEvent(this, 'saveError', { table: this.table });\n                return Promise.reject(new Error('Not implemented'));\n            };\n            /**\n             * Sets the index and order of columns.\n             *\n             * @param {Array<string>} columnNames\n             * Order of columns.\n             */\n            DataConnector.prototype.setColumnOrder = function (columnNames) {\n                var connector = this;\n                for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    connector.describeColumn(columnNames[i], { index: i });\n                }\n            };\n            DataConnector.prototype.setModifierOptions = function (modifierOptions) {\n                var _this = this;\n                var ModifierClass = (modifierOptions &&\n                    DataModifier.types[modifierOptions.type]);\n                return this.table\n                    .setModifier(ModifierClass ?\n                    new ModifierClass(modifierOptions) :\n                    void 0)\n                    .then(function () { return _this; });\n            };\n            /**\n             * Starts polling new data after the specific time span in milliseconds.\n             *\n             * @param {number} refreshTime\n             * Refresh time in milliseconds between polls.\n             */\n            DataConnector.prototype.startPolling = function (refreshTime) {\n                if (refreshTime === void 0) { refreshTime = 1000; }\n                var connector = this;\n                window.clearTimeout(connector._polling);\n                connector._polling = window.setTimeout(function () { return connector\n                    .load()['catch'](function (error) { return connector.emit({\n                    type: 'loadError',\n                    error: error,\n                    table: connector.table\n                }); })\n                    .then(function () {\n                    if (connector._polling) {\n                        connector.startPolling(refreshTime);\n                    }\n                }); }, refreshTime);\n            };\n            /**\n             * Stops polling data.\n             */\n            DataConnector.prototype.stopPolling = function () {\n                var connector = this;\n                window.clearTimeout(connector._polling);\n                delete connector._polling;\n            };\n            /**\n             * Retrieves metadata from a single column.\n             *\n             * @param {string} name\n             * The identifier for the column that should be described\n             *\n             * @return {DataConnector.MetaColumn|undefined}\n             * Returns a MetaColumn object if found.\n             */\n            DataConnector.prototype.whatIs = function (name) {\n                return this.metadata.columns[name];\n            };\n            return DataConnector;\n        }());\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (DataConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConnector.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a connector class to the registry. The connector has to provide the\n             * `DataConnector.options` property and the `DataConnector.load` method to\n             * modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the connector class.\n             *\n             * @param {DataConnectorType} DataConnectorClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a connector registered with this key.\n             */\n            function registerType(key, DataConnectorClass) {\n                return (!!key &&\n                    !DataConnector.types[key] &&\n                    !!(DataConnector.types[key] = DataConnectorClass));\n            }\n            DataConnector.registerType = registerType;\n        })(DataConnector || (DataConnector = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/DataConverter.js', [_modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Sebastian Bochan\n         *  - GÃ¸ran Slettemark\n         *  - Torstein HÃ¸nsi\n         *  - Wojciech Chmiel\n         *\n         * */\n        var addEvent = U.addEvent, fireEvent = U.fireEvent, isNumber = U.isNumber, merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Base class providing an interface and basic methods for a DataConverter\n         *\n         * @private\n         */\n        var DataConverter = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataConverter.\n             *\n             * @param {DataConverter.UserOptions} [options]\n             * Options for the DataConverter.\n             */\n            function DataConverter(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * A collection of available date formats.\n                 */\n                this.dateFormats = {\n                    'YYYY/mm/dd': {\n                        regex: /^(\\d{4})([\\-\\.\\/])(\\d{1,2})\\2(\\d{1,2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[1], match[3] - 1, +match[4]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[3] - 1, +match[1]) :\n                                NaN);\n                        },\n                        alternative: 'mm/dd/YYYY' // Different format with the same regex\n                    },\n                    'mm/dd/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            var d = new Date();\n                            if (!match) {\n                                return NaN;\n                            }\n                            var year = +match[4];\n                            if (year > (d.getFullYear() - 2000)) {\n                                year += 1900;\n                            }\n                            else {\n                                year += 2000;\n                            }\n                            return Date.UTC(year, match[3] - 1, +match[1]);\n                        },\n                        alternative: 'mm/dd/YY' // Different format with the same regex\n                    },\n                    'mm/dd/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4] + 2000, match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    }\n                };\n                var mergedOptions = merge(DataConverter.defaultOptions, options);\n                var regExpPoint = mergedOptions.decimalPoint;\n                if (regExpPoint === '.' || regExpPoint === ',') {\n                    regExpPoint = regExpPoint === '.' ? '\\\\.' : ',';\n                    this.decimalRegExp =\n                        new RegExp('^(-?[0-9]+)' + regExpPoint + '([0-9]+)$');\n                }\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts a value to a boolean.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {boolean}\n             * Converted value as a boolean.\n             */\n            DataConverter.prototype.asBoolean = function (value) {\n                if (typeof value === 'boolean') {\n                    return value;\n                }\n                if (typeof value === 'string') {\n                    return value !== '' && value !== '0' && value !== 'false';\n                }\n                return !!this.asNumber(value);\n            };\n            /**\n             * Converts a value to a Date.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {globalThis.Date}\n             * Converted value as a Date.\n             */\n            DataConverter.prototype.asDate = function (value) {\n                var timestamp;\n                if (typeof value === 'string') {\n                    timestamp = this.parseDate(value);\n                }\n                else if (typeof value === 'number') {\n                    timestamp = value;\n                }\n                else if (value instanceof Date) {\n                    return value;\n                }\n                else {\n                    timestamp = this.parseDate(this.asString(value));\n                }\n                return new Date(timestamp);\n            };\n            /**\n             * Casts a string value to it's guessed type\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {number|string|Date}\n             * The converted value.\n             */\n            DataConverter.prototype.asGuessedType = function (value) {\n                var converter = this, typeMap = {\n                    'number': converter.asNumber,\n                    'Date': converter.asDate,\n                    'string': converter.asString\n                };\n                return typeMap[converter.guessType(value)].call(converter, value);\n            };\n            /**\n             * Converts a value to a number.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {number}\n             * Converted value as a number.\n             */\n            DataConverter.prototype.asNumber = function (value) {\n                if (typeof value === 'number') {\n                    return value;\n                }\n                if (typeof value === 'boolean') {\n                    return value ? 1 : 0;\n                }\n                if (typeof value === 'string') {\n                    var decimalRegex = this.decimalRegExp;\n                    if (value.indexOf(' ') > -1) {\n                        value = value.replace(/\\s+/g, '');\n                    }\n                    if (decimalRegex) {\n                        if (!decimalRegex.test(value)) {\n                            return NaN;\n                        }\n                        value = value.replace(decimalRegex, '$1.$2');\n                    }\n                    return parseFloat(value);\n                }\n                if (value instanceof Date) {\n                    return value.getDate();\n                }\n                if (value) {\n                    return value.getRowCount();\n                }\n                return NaN;\n            };\n            /**\n             * Converts a value to a string.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {string}\n             * Converted value as a string.\n             */\n            DataConverter.prototype.asString = function (value) {\n                return '' + value;\n            };\n            /**\n             * Tries to guess the date format\n             *  - Check if either month candidate exceeds 12\n             *  - Check if year is missing (use current year)\n             *  - Check if a shortened year format is used (e.g. 1/1/99)\n             *  - If no guess can be made, the user must be prompted\n             * data is the data to deduce a format based on\n             * @private\n             *\n             * @param {Array<string>} data\n             * Data to check the format.\n             *\n             * @param {number} limit\n             * Max data to check the format.\n             *\n             * @param {boolean} save\n             * Whether to save the date format in the converter options.\n             */\n            DataConverter.prototype.deduceDateFormat = function (data, limit, save) {\n                var parser = this, stable = [], max = [];\n                var format = 'YYYY/mm/dd', thing, guessedFormat = [], i = 0, madeDeduction = false, \n                /// candidates = {},\n                elem, j;\n                if (!limit || limit > data.length) {\n                    limit = data.length;\n                }\n                for (; i < limit; i++) {\n                    if (typeof data[i] !== 'undefined' &&\n                        data[i] && data[i].length) {\n                        thing = data[i]\n                            .trim()\n                            .replace(/[\\-\\.\\/]/g, ' ')\n                            .split(' ');\n                        guessedFormat = [\n                            '',\n                            '',\n                            ''\n                        ];\n                        for (j = 0; j < thing.length; j++) {\n                            if (j < guessedFormat.length) {\n                                elem = parseInt(thing[j], 10);\n                                if (elem) {\n                                    max[j] = (!max[j] || max[j] < elem) ? elem : max[j];\n                                    if (typeof stable[j] !== 'undefined') {\n                                        if (stable[j] !== elem) {\n                                            stable[j] = false;\n                                        }\n                                    }\n                                    else {\n                                        stable[j] = elem;\n                                    }\n                                    if (elem > 31) {\n                                        if (elem < 100) {\n                                            guessedFormat[j] = 'YY';\n                                        }\n                                        else {\n                                            guessedFormat[j] = 'YYYY';\n                                        }\n                                        /// madeDeduction = true;\n                                    }\n                                    else if (elem > 12 &&\n                                        elem <= 31) {\n                                        guessedFormat[j] = 'dd';\n                                        madeDeduction = true;\n                                    }\n                                    else if (!guessedFormat[j].length) {\n                                        guessedFormat[j] = 'mm';\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (madeDeduction) {\n                    // This handles a few edge cases with hard to guess dates\n                    for (j = 0; j < stable.length; j++) {\n                        if (stable[j] !== false) {\n                            if (max[j] > 12 &&\n                                guessedFormat[j] !== 'YY' &&\n                                guessedFormat[j] !== 'YYYY') {\n                                guessedFormat[j] = 'YY';\n                            }\n                        }\n                        else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                            guessedFormat[j] = 'dd';\n                        }\n                    }\n                    // If the middle one is dd, and the last one is dd,\n                    // the last should likely be year.\n                    if (guessedFormat.length === 3 &&\n                        guessedFormat[1] === 'dd' &&\n                        guessedFormat[2] === 'dd') {\n                        guessedFormat[2] = 'YY';\n                    }\n                    format = guessedFormat.join('/');\n                    // If the caculated format is not valid, we need to present an\n                    // error.\n                }\n                // Save the deduced format in the converter options.\n                if (save) {\n                    parser.options.dateFormat = format;\n                }\n                return format;\n            };\n            /**\n             * Emits an event on the DataConverter instance.\n             *\n             * @param {DataConverter.Event} [e]\n             * Event object containing additional event data\n             */\n            DataConverter.prototype.emit = function (e) {\n                fireEvent(this, e.type, e);\n            };\n            /**\n             * Initiates the data exporting. Should emit `exportError` on failure.\n             *\n             * @param {DataConnector} connector\n             * Connector to export from.\n             *\n             * @param {DataConverter.Options} [options]\n             * Options for the export.\n             */\n            DataConverter.prototype.export = function (\n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            connector, options\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                this.emit({\n                    type: 'exportError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            };\n            /**\n             * Getter for the data table.\n             *\n             * @return {DataTable}\n             * Table of parsed data.\n             */\n            DataConverter.prototype.getTable = function () {\n                throw new Error('Not implemented');\n            };\n            /**\n             * Guesses the potential type of a string value for parsing CSV etc.\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {'number'|'string'|'Date'}\n             * Type string, either `string`, `Date`, or `number`.\n             */\n            DataConverter.prototype.guessType = function (value) {\n                var converter = this;\n                var result = 'string';\n                if (typeof value === 'string') {\n                    var trimedValue = converter.trim(\"\".concat(value)), decimalRegExp = converter.decimalRegExp;\n                    var innerTrimedValue = converter.trim(trimedValue, true);\n                    if (decimalRegExp) {\n                        innerTrimedValue = (decimalRegExp.test(innerTrimedValue) ?\n                            innerTrimedValue.replace(decimalRegExp, '$1.$2') :\n                            '');\n                    }\n                    var floatValue = parseFloat(innerTrimedValue);\n                    if (+innerTrimedValue === floatValue) {\n                        // String is numeric\n                        value = floatValue;\n                    }\n                    else {\n                        // Determine if a date string\n                        var dateValue = converter.parseDate(value);\n                        result = isNumber(dateValue) ? 'Date' : 'string';\n                    }\n                }\n                if (typeof value === 'number') {\n                    // Greater than milliseconds in a year assumed timestamp\n                    result = value > 365 * 24 * 3600 * 1000 ? 'Date' : 'number';\n                }\n                return result;\n            };\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            DataConverter.prototype.on = function (type, callback) {\n                return addEvent(this, type, callback);\n            };\n            /**\n             * Initiates the data parsing. Should emit `parseError` on failure.\n             *\n             * @param {DataConverter.UserOptions} options\n             * Options of the DataConverter.\n             */\n            DataConverter.prototype.parse = function (\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            options) {\n                this.emit({\n                    type: 'parseError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            };\n            /**\n             * Parse a date and return it as a number.\n             *\n             * @function Highcharts.Data#parseDate\n             *\n             * @param {string} value\n             * Value to parse.\n             *\n             * @param {string} dateFormatProp\n             * Which of the predefined date formats\n             * to use to parse date values.\n             */\n            DataConverter.prototype.parseDate = function (value, dateFormatProp) {\n                var converter = this, options = converter.options;\n                var dateFormat = dateFormatProp || options.dateFormat, result = NaN, key, format, match;\n                if (options.parseDate) {\n                    result = options.parseDate(value);\n                }\n                else {\n                    // Auto-detect the date format the first time\n                    if (!dateFormat) {\n                        for (key in converter.dateFormats) { // eslint-disable-line guard-for-in\n                            format = converter.dateFormats[key];\n                            match = value.match(format.regex);\n                            if (match) {\n                                // `converter.options.dateFormat` = dateFormat = key;\n                                dateFormat = key;\n                                // `converter.options.alternativeFormat` =\n                                // format.alternative || '';\n                                result = format.parser(match);\n                                break;\n                            }\n                        }\n                        // Next time, use the one previously found\n                    }\n                    else {\n                        format = converter.dateFormats[dateFormat];\n                        if (!format) {\n                            // The selected format is invalid\n                            format = converter.dateFormats['YYYY/mm/dd'];\n                        }\n                        match = value.match(format.regex);\n                        if (match) {\n                            result = format.parser(match);\n                        }\n                    }\n                    // Fall back to Date.parse\n                    if (!match) {\n                        match = Date.parse(value);\n                        // External tools like Date.js and MooTools extend Date object\n                        // and returns a date.\n                        if (typeof match === 'object' &&\n                            match !== null &&\n                            match.getTime) {\n                            result = (match.getTime() -\n                                match.getTimezoneOffset() *\n                                    60000);\n                            // Timestamp\n                        }\n                        else if (isNumber(match)) {\n                            result = match - (new Date(match)).getTimezoneOffset() * 60000;\n                            if ( // Reset dates without year in Chrome\n                            value.indexOf('2001') === -1 &&\n                                (new Date(result)).getFullYear() === 2001) {\n                                result = NaN;\n                            }\n                        }\n                    }\n                }\n                return result;\n            };\n            /**\n             * Trim a string from whitespaces.\n             *\n             * @param {string} str\n             * String to trim.\n             *\n             * @param {boolean} [inside=false]\n             * Remove all spaces between numbers.\n             *\n             * @return {string}\n             * Trimed string\n             */\n            DataConverter.prototype.trim = function (str, inside) {\n                if (typeof str === 'string') {\n                    str = str.replace(/^\\s+|\\s+$/g, '');\n                    // Clear white space insdie the string, like thousands separators\n                    if (inside && /^[\\d\\s]+$/.test(str)) {\n                        str = str.replace(/\\s/g, '');\n                    }\n                }\n                return str;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            DataConverter.defaultOptions = {\n                dateFormat: '',\n                alternativeFormat: '',\n                startColumn: 0,\n                endColumn: Number.MAX_VALUE,\n                startRow: 0,\n                endRow: Number.MAX_VALUE,\n                firstRowAsNames: true,\n                switchRowsAndColumns: false\n            };\n            return DataConverter;\n        }());\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for events and conversion.\n         */\n        (function (DataConverter) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts an array of columns to a table instance. Second dimension of the\n             * array are the row cells.\n             *\n             * @param {Array<DataTable.Column>} [columns]\n             * Array to convert.\n             *\n             * @param {Array<string>} [headers]\n             * Column names to use.\n             *\n             * @return {DataTable}\n             * Table instance from the arrays.\n             */\n            function getTableFromColumns(columns, headers) {\n                if (columns === void 0) { columns = []; }\n                if (headers === void 0) { headers = []; }\n                var table = new DataTable();\n                for (var i = 0, iEnd = Math.max(headers.length, columns.length); i < iEnd; ++i) {\n                    table.setColumn(headers[i] || \"\".concat(i), columns[i]);\n                }\n                return table;\n            }\n            DataConverter.getTableFromColumns = getTableFromColumns;\n        })(DataConverter || (DataConverter = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConverter;\n    });\n    _registerModule(_modules, 'Data/DataCursor.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * This class manages state cursors pointing on {@link Data.DataTable}. It\n         * creates a relation between states of the user interface and the table cells,\n         * columns, or rows.\n         *\n         * @class\n         * @name Data.DataCursor\n         */\n        var DataCursor = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function DataCursor(stateMap) {\n                if (stateMap === void 0) { stateMap = {}; }\n                this.emittingRegister = [];\n                this.listenerMap = {};\n                this.stateMap = stateMap;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * This function registers a listener for a specific state and table.\n             *\n             * @example\n             * ```TypeScript\n             * dataCursor.addListener(myTable.id, 'hover', (e: DataCursor.Event) => {\n             *     if (e.cursor.type === 'position') {\n             *         console.log(`Hover over row #${e.cursor.row}.`);\n             *     }\n             * });\n             * ```\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table to listen to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table to listen to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to register.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            DataCursor.prototype.addListener = function (tableId, state, listener) {\n                var listenerMap = this.listenerMap[tableId] = (this.listenerMap[tableId] ||\n                    {});\n                var listeners = listenerMap[state] = (listenerMap[state] ||\n                    []);\n                listeners.push(listener);\n                return this;\n            };\n            /**\n             * @private\n             */\n            DataCursor.prototype.buildEmittingTag = function (e) {\n                return (e.cursor.type === 'position' ?\n                    [\n                        e.table.id,\n                        e.cursor.column,\n                        e.cursor.row,\n                        e.cursor.state,\n                        e.cursor.type\n                    ] :\n                    [\n                        e.table.id,\n                        e.cursor.columns,\n                        e.cursor.firstRow,\n                        e.cursor.lastRow,\n                        e.cursor.state,\n                        e.cursor.type\n                    ]).join('\\0');\n            };\n            /**\n             * This function emits a state cursor related to a table. It will provide\n             * lasting state cursors of the table to listeners.\n             *\n             * @example\n             * ```ts\n             * dataCursor.emit(myTable, {\n             *     type: 'position',\n             *     column: 'city',\n             *     row: 4,\n             *     state: 'hover',\n             * });\n             * ```\n             *\n             * @param {Data.DataTable} table\n             * The related table of the cursor.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * The state cursor to emit.\n             *\n             * @param {Event} [event]\n             * Optional event information from a related source.\n             *\n             * @param {boolean} [lasting]\n             * Whether this state cursor should be kept until it is cleared with\n             * {@link DataCursor#remitCursor}.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            DataCursor.prototype.emitCursor = function (table, cursor, event, lasting) {\n                var _a;\n                var tableId = table.id, state = cursor.state, listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    var stateMap = this.stateMap[tableId] = ((_a = this.stateMap[tableId]) !== null && _a !== void 0 ? _a : {});\n                    var cursors = stateMap[cursor.state] || [];\n                    if (lasting) {\n                        if (!cursors.length) {\n                            stateMap[cursor.state] = cursors;\n                        }\n                        if (DataCursor.getIndex(cursor, cursors) === -1) {\n                            cursors.push(cursor);\n                        }\n                    }\n                    var e = {\n                        cursor: cursor,\n                        cursors: cursors,\n                        table: table\n                    };\n                    if (event) {\n                        e.event = event;\n                    }\n                    var emittingRegister = this.emittingRegister, emittingTag = this.buildEmittingTag(e);\n                    if (emittingRegister.indexOf(emittingTag) >= 0) {\n                        // Break call stack loops\n                        return this;\n                    }\n                    try {\n                        this.emittingRegister.push(emittingTag);\n                        for (var i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                            listeners[i].call(this, e);\n                        }\n                    }\n                    finally {\n                        var index = this.emittingRegister.indexOf(emittingTag);\n                        if (index >= 0) {\n                            this.emittingRegister.splice(index, 1);\n                        }\n                    }\n                }\n                return this;\n            };\n            /**\n             * Removes a lasting state cursor.\n             *\n             * @function #remitCursor\n             *\n             * @param {string} tableId\n             * ID of the related cursor table.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * Copy or reference of the cursor.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            DataCursor.prototype.remitCursor = function (tableId, cursor) {\n                var cursors = (this.stateMap[tableId] &&\n                    this.stateMap[tableId][cursor.state]);\n                if (cursors) {\n                    var index = DataCursor.getIndex(cursor, cursors);\n                    if (index >= 0) {\n                        cursors.splice(index, 1);\n                    }\n                }\n                return this;\n            };\n            /**\n             * This function removes a listener.\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table the listener is connected to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table the listener is listening to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to deregister.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            DataCursor.prototype.removeListener = function (tableId, state, listener) {\n                var listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    var index = listeners.indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                }\n                return this;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Semantic version string of the DataCursor class.\n             * @internal\n             */\n            DataCursor.version = '1.0.0';\n            return DataCursor;\n        }());\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * @class Data.DataCursor\n         */\n        (function (DataCursor) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Finds the index of an cursor in an array.\n             * @private\n             */\n            function getIndex(needle, cursors) {\n                if (needle.type === 'position') {\n                    for (var cursor = void 0, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'position' &&\n                            cursor.state === needle.state &&\n                            cursor.column === needle.column &&\n                            cursor.row === needle.row) {\n                            return i;\n                        }\n                    }\n                }\n                else {\n                    var columnNeedle = JSON.stringify(needle.columns);\n                    for (var cursor = void 0, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'range' &&\n                            cursor.state === needle.state &&\n                            cursor.firstRow === needle.firstRow &&\n                            cursor.lastRow === needle.lastRow &&\n                            JSON.stringify(cursor.columns) === columnNeedle) {\n                            return i;\n                        }\n                    }\n                }\n                return -1;\n            }\n            DataCursor.getIndex = getIndex;\n            /**\n             * Checks whether two cursor share the same properties.\n             * @private\n             */\n            function isEqual(cursorA, cursorB) {\n                if (cursorA.type === 'position' && cursorB.type === 'position') {\n                    return (cursorA.column === cursorB.column &&\n                        cursorA.row === cursorB.row &&\n                        cursorA.state === cursorB.state);\n                }\n                if (cursorA.type === 'range' && cursorB.type === 'range') {\n                    return (cursorA.firstRow === cursorB.firstRow &&\n                        cursorA.lastRow === cursorB.lastRow &&\n                        (JSON.stringify(cursorA.columns) ===\n                            JSON.stringify(cursorB.columns)));\n                }\n                return false;\n            }\n            DataCursor.isEqual = isEqual;\n            /**\n             * Checks whether a cursor is in a range.\n             * @private\n             */\n            function isInRange(needle, range) {\n                if (range.type === 'position') {\n                    range = toRange(range);\n                }\n                if (needle.type === 'position') {\n                    needle = toRange(needle, range);\n                }\n                var needleColumns = needle.columns;\n                var rangeColumns = range.columns;\n                return (needle.firstRow >= range.firstRow &&\n                    needle.lastRow <= range.lastRow &&\n                    (!needleColumns ||\n                        !rangeColumns ||\n                        needleColumns.every(function (column) { return rangeColumns.indexOf(column) >= 0; })));\n            }\n            DataCursor.isInRange = isInRange;\n            /**\n             * @private\n             */\n            function toPositions(cursor) {\n                if (cursor.type === 'position') {\n                    return [cursor];\n                }\n                var columns = (cursor.columns || []);\n                var positions = [];\n                var state = cursor.state;\n                for (var row = cursor.firstRow, rowEnd = cursor.lastRow; row < rowEnd; ++row) {\n                    if (!columns.length) {\n                        positions.push({\n                            type: 'position',\n                            row: row,\n                            state: state\n                        });\n                        continue;\n                    }\n                    for (var column = 0, columnEnd = columns.length; column < columnEnd; ++column) {\n                        positions.push({\n                            type: 'position',\n                            column: columns[column],\n                            row: row,\n                            state: state\n                        });\n                    }\n                }\n                return positions;\n            }\n            DataCursor.toPositions = toPositions;\n            /**\n             * @private\n             */\n            function toRange(cursor, defaultRange) {\n                var _a, _b, _c, _d;\n                if (cursor.type === 'range') {\n                    return cursor;\n                }\n                var range = {\n                    type: 'range',\n                    firstRow: ((_b = (_a = cursor.row) !== null && _a !== void 0 ? _a : (defaultRange && defaultRange.firstRow)) !== null && _b !== void 0 ? _b : 0),\n                    lastRow: ((_d = (_c = cursor.row) !== null && _c !== void 0 ? _c : (defaultRange && defaultRange.lastRow)) !== null && _d !== void 0 ? _d : Number.MAX_VALUE),\n                    state: cursor.state\n                };\n                if (typeof cursor.column !== 'undefined') {\n                    range.columns = [cursor.column];\n                }\n                return range;\n            }\n            DataCursor.toRange = toRange;\n        })(DataCursor || (DataCursor = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursor;\n    });\n    _registerModule(_modules, 'Data/DataPoolDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        var DataPoolDefaults = {\n            connectors: []\n        };\n        /* *\n         *\n         *  Export Defaults\n         *\n         * */\n\n        return DataPoolDefaults;\n    });\n    _registerModule(_modules, 'Data/DataPool.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/DataPoolDefaults.js'], _modules['Core/Utilities.js']], function (DataConnector, DataPoolDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Data pool to load connectors on-demand.\n         *\n         * @class\n         * @name Data.DataPool\n         *\n         * @param {Data.DataPoolOptions} options\n         * Pool options with all connectors.\n         */\n        var DataPool = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function DataPool(options) {\n                if (options === void 0) { options = DataPoolDefaults; }\n                options.connectors = (options.connectors || []);\n                this.connectors = {};\n                this.options = options;\n                this.waiting = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this data pool to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            DataPool.prototype.emit = function (e) {\n                U.fireEvent(this, e.type, e);\n            };\n            /**\n             * Loads the connector.\n             *\n             * @function Data.DataPool#getConnector\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            DataPool.prototype.getConnector = function (connectorId) {\n                var _this = this;\n                var connector = this.connectors[connectorId];\n                // Already loaded\n                if (connector) {\n                    return Promise.resolve(connector);\n                }\n                var waitingList = this.waiting[connectorId];\n                // Start loading\n                if (!waitingList) {\n                    waitingList = this.waiting[connectorId] = [];\n                    var connectorOptions = this.getConnectorOptions(connectorId);\n                    if (!connectorOptions) {\n                        throw new Error(\"Connector '\".concat(connectorId, \"' not found.\"));\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this\n                        .loadConnector(connectorOptions)\n                        .then(function (connector) {\n                        delete _this.waiting[connectorId];\n                        for (var i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][0](connector);\n                        }\n                    })['catch'](function (error) {\n                        delete _this.waiting[connectorId];\n                        for (var i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][1](error);\n                        }\n                    });\n                }\n                // Add request to waiting list\n                return new Promise(function (resolve, reject) {\n                    waitingList.push([resolve, reject]);\n                });\n            };\n            /**\n             * Returns the IDs of all connectors.\n             *\n             * @private\n             *\n             * @return {Array<string>}\n             * Names of all connectors.\n             */\n            DataPool.prototype.getConnectorIds = function () {\n                var connectors = this.options.connectors, connectorIds = [];\n                for (var i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    connectorIds.push(connectors[i].id);\n                }\n                return connectorIds;\n            };\n            /**\n             * Loads the options of the connector.\n             *\n             * @private\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {DataPoolConnectorOptions|undefined}\n             * Returns the options of the connector, or `undefined` if not found.\n             */\n            DataPool.prototype.getConnectorOptions = function (connectorId) {\n                var connectors = this.options.connectors;\n                for (var i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === connectorId) {\n                        return connectors[i];\n                    }\n                }\n            };\n            /**\n             * Loads the connector table.\n             *\n             * @function Data.DataPool#getConnectorTable\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataTable>}\n             * Returns the connector table.\n             */\n            DataPool.prototype.getConnectorTable = function (connectorId) {\n                return this\n                    .getConnector(connectorId)\n                    .then(function (connector) { return connector.table; });\n            };\n            /**\n             * Tests whether the connector has never been requested.\n             *\n             * @param {string} connectorId\n             * Name of the connector.\n             *\n             * @return {boolean}\n             * Returns `true`, if the connector has never been requested, otherwise\n             * `false`.\n             */\n            DataPool.prototype.isNewConnector = function (connectorId) {\n                return !this.connectors[connectorId];\n            };\n            /**\n             * Creates and loads the connector.\n             *\n             * @private\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Options of connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            DataPool.prototype.loadConnector = function (options) {\n                var _this = this;\n                return new Promise(function (resolve, reject) {\n                    _this.emit({\n                        type: 'load',\n                        options: options\n                    });\n                    var ConnectorClass = DataConnector.types[options.type];\n                    if (!ConnectorClass) {\n                        throw new Error(\"Connector type not found. (\".concat(options.type, \")\"));\n                    }\n                    var connector = new ConnectorClass(options.options);\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    connector\n                        .load()\n                        .then(function (connector) {\n                        _this.connectors[options.id] = connector;\n                        _this.emit({\n                            type: 'afterLoad',\n                            options: options\n                        });\n                        resolve(connector);\n                    })['catch'](reject);\n                });\n            };\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataPool#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataPool>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            DataPool.prototype.on = function (type, callback) {\n                return U.addEvent(this, type, callback);\n            };\n            /**\n             * Sets connector options under the specified `options.id`.\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Connector options to set.\n             */\n            DataPool.prototype.setConnectorOptions = function (options) {\n                var connectors = this.options.connectors, instances = this.connectors;\n                this.emit({\n                    type: 'setConnectorOptions',\n                    options: options\n                });\n                for (var i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === options.id) {\n                        connectors.splice(i, 1);\n                        break;\n                    }\n                }\n                if (instances[options.id]) {\n                    instances[options.id].stopPolling();\n                    delete instances[options.id];\n                }\n                connectors.push(options);\n                this.emit({\n                    type: 'afterSetConnectorOptions',\n                    options: options\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Semantic version string of the DataPool class.\n             * @internal\n             */\n            DataPool.version = '1.0.0';\n            return DataPool;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataPool;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaParser.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * @private\n         */\n        var booleanRegExp = /^(?:FALSE|TRUE)/;\n        /**\n         * `.`-separated decimal.\n         * @private\n         */\n        var decimal1RegExp = /^[+\\-]?\\d+(?:\\.\\d+)?(?:e[+\\-]\\d+)?/;\n        /**\n         * `,`-separated decimal.\n         * @private\n         */\n        var decimal2RegExp = /^[+\\-]?\\d+(?:,\\d+)?(?:e[+\\-]\\d+)?/;\n        /**\n         * - Group 1: Function name\n         * @private\n         */\n        var functionRegExp = /^([A-Z][A-Z\\d\\.]*)\\(/;\n        /**\n         * @private\n         */\n        var operatorRegExp = /^(?:[+\\-*\\/^<=>]|<=|=>)/;\n        /**\n         * - Group 1: Start column\n         * - Group 2: Start row\n         * - Group 3: End column\n         * - Group 4: End row\n         * @private\n         */\n        var rangeA1RegExp = /^(\\$?[A-Z]+)(\\$?\\d+)\\:(\\$?[A-Z]+)(\\$?\\d+)/;\n        /**\n         * - Group 1: Start row\n         * - Group 2: Start column\n         * - Group 3: End row\n         * - Group 4: End column\n         * @private\n         */\n        var rangeR1C1RegExp = /^R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])\\:R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])/;\n        /**\n         * - Group 1: Column\n         * - Group 2: Row\n         * @private\n         */\n        var referenceA1RegExp = /^(\\$?[A-Z]+)(\\$?\\d+)(?![\\:C])/;\n        /**\n         * - Group 1: Row\n         * - Group 2: Column\n         * @private\n         */\n        var referenceR1C1RegExp = /^R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])(?!\\:)/;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Extracts the inner string of the most outer parantheses.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Text string to extract from.\n         *\n         * @return {string}\n         * Extracted parantheses. If not found an exception will be thrown.\n         */\n        function extractParantheses(text) {\n            var parantheseLevel = 0;\n            for (var i = 0, iEnd = text.length, char = void 0, parantheseStart = 1; i < iEnd; ++i) {\n                char = text[i];\n                if (char === '(') {\n                    if (!parantheseLevel) {\n                        parantheseStart = i + 1;\n                    }\n                    ++parantheseLevel;\n                    continue;\n                }\n                if (char === ')') {\n                    --parantheseLevel;\n                    if (!parantheseLevel) {\n                        return text.substring(parantheseStart, i);\n                    }\n                }\n            }\n            if (parantheseLevel > 0) {\n                var error = new Error('Incomplete parantheses.');\n                error.name = 'FormulaParseError';\n                throw error;\n            }\n            return '';\n        }\n        /**\n         * Extracts the inner string value.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Text string to extract from.\n         *\n         * @return {string}\n         * Extracted string. If not found an exception will be thrown.\n         */\n        function extractString(text) {\n            var start = -1;\n            for (var i = 0, iEnd = text.length, char = void 0, escaping = false; i < iEnd; ++i) {\n                char = text[i];\n                if (char === '\\\\') {\n                    escaping = !escaping;\n                    continue;\n                }\n                if (escaping) {\n                    escaping = false;\n                    continue;\n                }\n                if (char === '\"') {\n                    if (start < 0) {\n                        start = i;\n                    }\n                    else {\n                        return text.substring(start + 1, i); // `Ã¬` is excluding\n                    }\n                }\n            }\n            var error = new Error('Incomplete string.');\n            error.name = 'FormulaParseError';\n            throw error;\n        }\n        /**\n         * Parses an argument string. Formula arrays with a single term will be\n         * simplified to the term.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Argument string to parse.\n         *\n         * @param {boolean} alternativeSeparators\n         * Whether to expect `;` as argument separator and `,` as decimal separator.\n         *\n         * @return {Formula|Function|Range|Reference|Value}\n         * The recognized term structure.\n         */\n        function parseArgument(text, alternativeSeparators) {\n            var match;\n            // Check for a R1C1:R1C1 range notation\n            match = text.match(rangeR1C1RegExp);\n            if (match) {\n                var beginColumnRelative = (match[2] === '' || match[2][0] === '[');\n                var beginRowRelative = (match[1] === '' || match[1][0] === '[');\n                var endColumnRelative = (match[4] === '' || match[4][0] === '[');\n                var endRowRelative = (match[3] === '' || match[3][0] === '[');\n                var range = {\n                    type: 'range',\n                    beginColumn: (beginColumnRelative ?\n                        parseInt(match[2].substring(1, -1) || '0', 10) :\n                        parseInt(match[2], 10) - 1),\n                    beginRow: (beginRowRelative ?\n                        parseInt(match[1].substring(1, -1) || '0', 10) :\n                        parseInt(match[1], 10) - 1),\n                    endColumn: (endColumnRelative ?\n                        parseInt(match[4].substring(1, -1) || '0', 10) :\n                        parseInt(match[4], 10) - 1),\n                    endRow: (endRowRelative ?\n                        parseInt(match[3].substring(1, -1) || '0', 10) :\n                        parseInt(match[3], 10) - 1)\n                };\n                if (beginColumnRelative) {\n                    range.beginColumnRelative = true;\n                }\n                if (beginRowRelative) {\n                    range.beginRowRelative = true;\n                }\n                if (endColumnRelative) {\n                    range.endColumnRelative = true;\n                }\n                if (endRowRelative) {\n                    range.endRowRelative = true;\n                }\n                return range;\n            }\n            // Check for a A1:A1 range notation\n            match = text.match(rangeA1RegExp);\n            if (match) {\n                var beginColumnRelative = match[1][0] !== '$';\n                var beginRowRelative = match[2][0] !== '$';\n                var endColumnRelative = match[3][0] !== '$';\n                var endRowRelative = match[4][0] !== '$';\n                var range = {\n                    type: 'range',\n                    beginColumn: parseReferenceColumn(beginColumnRelative ?\n                        match[1] :\n                        match[1].substring(1)) - 1,\n                    beginRow: parseInt(beginRowRelative ?\n                        match[2] :\n                        match[2].substring(1), 10) - 1,\n                    endColumn: parseReferenceColumn(endColumnRelative ?\n                        match[3] :\n                        match[3].substring(1)) - 1,\n                    endRow: parseInt(endRowRelative ?\n                        match[4] :\n                        match[4].substring(1), 10) - 1\n                };\n                if (beginColumnRelative) {\n                    range.beginColumnRelative = true;\n                }\n                if (beginRowRelative) {\n                    range.beginRowRelative = true;\n                }\n                if (endColumnRelative) {\n                    range.endColumnRelative = true;\n                }\n                if (endRowRelative) {\n                    range.endRowRelative = true;\n                }\n                return range;\n            }\n            // Fallback to formula processing for other pattern types\n            var formula = parseFormula(text, alternativeSeparators);\n            return (formula.length === 1 && typeof formula[0] !== 'string' ?\n                formula[0] :\n                formula);\n        }\n        /**\n         * Parse arguments string inside function parantheses.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Parantheses string of the function.\n         *\n         * @param {boolean} alternativeSeparators\n         * Whether to expect `;` as argument separator and `,` as decimal separator.\n         *\n         * @return {Highcharts.FormulaArguments}\n         * Parsed arguments array.\n         */\n        function parseArguments(text, alternativeSeparators) {\n            var args = [], argumentsSeparator = (alternativeSeparators ? ';' : ',');\n            var parantheseLevel = 0, term = '';\n            for (var i = 0, iEnd = text.length, char = void 0; i < iEnd; ++i) {\n                char = text[i];\n                // Check for separator\n                if (char === argumentsSeparator &&\n                    !parantheseLevel &&\n                    term) {\n                    args.push(parseArgument(term, alternativeSeparators));\n                    term = '';\n                    // Check for a quoted string before skip logic\n                }\n                else if (char === '\"' &&\n                    !parantheseLevel &&\n                    !term) {\n                    var string = extractString(text.substring(i));\n                    args.push(string);\n                    i += string.length + 1; // Only +1 to cover ++i in for-loop\n                    // Skip space and check paranthesis nesting\n                }\n                else if (char !== ' ') {\n                    term += char;\n                    if (char === '(') {\n                        ++parantheseLevel;\n                    }\n                    else if (char === ')') {\n                        --parantheseLevel;\n                    }\n                }\n            }\n            // Look for left-overs from last argument\n            if (!parantheseLevel && term) {\n                args.push(parseArgument(term, alternativeSeparators));\n            }\n            return args;\n        }\n        /**\n         * Converts a spreadsheet formula string into a formula array. Throws a\n         * `FormulaParserError` when the string can not be parsed.\n         *\n         * @private\n         * @function Formula.parseFormula\n         *\n         * @param {string} text\n         * Spreadsheet formula string, without the leading `=`.\n         *\n         * @param {boolean} alternativeSeparators\n         * * `false` to expect `,` between arguments and `.` in decimals.\n         * * `true` to expect `;` between arguments and `,` in decimals.\n         *\n         * @return {Formula.Formula}\n         * Formula array representing the string.\n         */\n        function parseFormula(text, alternativeSeparators) {\n            var decimalRegExp = (alternativeSeparators ?\n                decimal2RegExp :\n                decimal1RegExp), formula = [];\n            var match, next = (text[0] === '=' ? text.substring(1) : text).trim();\n            while (next) {\n                // Check for an R1C1 reference notation\n                match = next.match(referenceR1C1RegExp);\n                if (match) {\n                    var columnRelative = (match[2] === '' || match[2][0] === '[');\n                    var rowRelative = (match[1] === '' || match[1][0] === '[');\n                    var reference = {\n                        type: 'reference',\n                        column: (columnRelative ?\n                            parseInt(match[2].substring(1, -1) || '0', 10) :\n                            parseInt(match[2], 10) - 1),\n                        row: (rowRelative ?\n                            parseInt(match[1].substring(1, -1) || '0', 10) :\n                            parseInt(match[1], 10) - 1)\n                    };\n                    if (columnRelative) {\n                        reference.columnRelative = true;\n                    }\n                    if (rowRelative) {\n                        reference.rowRelative = true;\n                    }\n                    formula.push(reference);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for an A1 reference notation\n                match = next.match(referenceA1RegExp);\n                if (match) {\n                    var columnRelative = match[1][0] !== '$';\n                    var rowRelative = match[2][0] !== '$';\n                    var reference = {\n                        type: 'reference',\n                        column: parseReferenceColumn(columnRelative ?\n                            match[1] :\n                            match[1].substring(1)) - 1,\n                        row: parseInt(rowRelative ?\n                            match[2] :\n                            match[2].substring(1), 10) - 1\n                    };\n                    if (columnRelative) {\n                        reference.columnRelative = true;\n                    }\n                    if (rowRelative) {\n                        reference.rowRelative = true;\n                    }\n                    formula.push(reference);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a formula operator\n                match = next.match(operatorRegExp);\n                if (match) {\n                    formula.push(match[0]);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a boolean value\n                match = next.match(booleanRegExp);\n                if (match) {\n                    formula.push(match[0] === 'TRUE');\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a number value\n                match = next.match(decimalRegExp);\n                if (match) {\n                    formula.push(parseFloat(match[0]));\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a quoted string\n                if (next[0] === '\"') {\n                    var string = extractString(next);\n                    formula.push(string.substring(1, -1));\n                    next = next.substring(string.length + 2).trim();\n                    continue;\n                }\n                // Check for a function\n                match = next.match(functionRegExp);\n                if (match) {\n                    next = next.substring(match[1].length).trim();\n                    var parantheses = extractParantheses(next);\n                    formula.push({\n                        type: 'function',\n                        name: match[1],\n                        args: parseArguments(parantheses, alternativeSeparators)\n                    });\n                    next = next.substring(parantheses.length + 2).trim();\n                    continue;\n                }\n                // Check for a formula in parantheses\n                if (next[0] === '(') {\n                    var paranteses = extractParantheses(next);\n                    if (paranteses) {\n                        formula\n                            .push(parseFormula(paranteses, alternativeSeparators));\n                        next = next.substring(paranteses.length + 2).trim();\n                        continue;\n                    }\n                }\n                // Something is not right\n                var position = text.length - next.length, error = new Error('Unexpected character `' +\n                    text.substring(position, position + 1) +\n                    '` at position ' + (position + 1) +\n                    '. (`...' + text.substring(position - 5, position + 6) + '...`)');\n                error.name = 'FormulaParseError';\n                throw error;\n            }\n            return formula;\n        }\n        /**\n         * Converts a reference column `A` of `A1` into a number. Supports endless sizes\n         * `ZZZ...`, just limited by integer precision.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Column string to convert.\n         *\n         * @return {number}\n         * Converted column index.\n         */\n        function parseReferenceColumn(text) {\n            var column = 0;\n            for (var i = 0, iEnd = text.length, code = void 0, factor = text.length - 1; i < iEnd; ++i) {\n                code = text.charCodeAt(i);\n                if (code >= 65 && code <= 90) {\n                    column += (code - 64) * Math.pow(26, factor);\n                }\n                --factor;\n            }\n            return column;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var FormulaParser = {\n            parseFormula: parseFormula\n        };\n\n        return FormulaParser;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaTypes.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Array of all possible operators.\n         * @private\n         */\n        var operators = ['+', '-', '*', '/', '^', '=', '<', '<=', '>', '>='];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests an item for a Formula array.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a formula (or argument) array.\n         */\n        function isFormula(item) {\n            return item instanceof Array;\n        }\n        /**\n         * Tests an item for a Function structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a formula function.\n         */\n        function isFunction(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'function');\n        }\n        /**\n         * Tests an item for an Operator string.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is an operator string.\n         */\n        function isOperator(item) {\n            return (typeof item === 'string' &&\n                operators.indexOf(item) >= 0);\n        }\n        /**\n         * Tests an item for a Range structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a range.\n         */\n        function isRange(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'range');\n        }\n        /**\n         * Tests an item for a Reference structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a reference.\n         */\n        function isReference(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'reference');\n        }\n        /**\n         * Tests an item for a Value structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem|null|undefined} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a value.\n         */\n        function isValue(item) {\n            return (typeof item === 'boolean' ||\n                typeof item === 'number' ||\n                typeof item === 'string');\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var MathFormula = {\n            isFormula: isFormula,\n            isFunction: isFunction,\n            isOperator: isOperator,\n            isRange: isRange,\n            isReference: isReference,\n            isValue: isValue\n        };\n\n        return MathFormula;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaProcessor.js', [_modules['Data/Formula/FormulaTypes.js']], function (FormulaTypes) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var isFormula = FormulaTypes.isFormula, isFunction = FormulaTypes.isFunction, isOperator = FormulaTypes.isOperator, isRange = FormulaTypes.isRange, isReference = FormulaTypes.isReference, isValue = FormulaTypes.isValue;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var asLogicalStringRegExp = / */;\n        var MAX_FALSE = Number.MAX_VALUE / 1.000000000001;\n        var MAX_STRING = Number.MAX_VALUE / 1.000000000002;\n        var MAX_TRUE = Number.MAX_VALUE;\n        var operatorPriority = {\n            '^': 3,\n            '*': 2,\n            '/': 2,\n            '+': 1,\n            '-': 1,\n            '=': 0,\n            '<': 0,\n            '<=': 0,\n            '>': 0,\n            '>=': 0\n        };\n        var processorFunctions = {};\n        var processorFunctionNameRegExp = /^[A-Z][A-Z\\.]*$/;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Converts non-number types to logical numbers.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {number}\n         * Logical number value. `NaN` if not convertable.\n         */\n        function asLogicalNumber(value) {\n            switch (typeof value) {\n                case 'boolean':\n                    return value ? MAX_TRUE : MAX_FALSE;\n                case 'string':\n                    return MAX_STRING;\n                case 'number':\n                    return value;\n                default:\n                    return NaN;\n            }\n        }\n        /**\n         * Converts strings to logical strings, while other types get passed through. In\n         * logical strings the space character is the lowest value and letters are case\n         * insensitive.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Logical string value or passed through value.\n         */\n        function asLogicalString(value) {\n            if (typeof value === 'string') {\n                return value.toLowerCase().replace(asLogicalStringRegExp, '\\0');\n            }\n            return value;\n        }\n        /**\n         * Converts non-number types to a logic number.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {number}\n         * Number value. `NaN` if not convertable.\n         */\n        function asNumber(value) {\n            switch (typeof value) {\n                case 'boolean':\n                    return value ? 1 : 0;\n                case 'string':\n                    return parseFloat(value.replace(',', '.'));\n                case 'number':\n                    return value;\n                default:\n                    return NaN;\n            }\n        }\n        /**\n         * Process a basic operation of two given values.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaOperator} operator\n         * Operator between values.\n         *\n         * @param {Highcharts.FormulaValue} x\n         * First value for operation.\n         *\n         * @param {Highcharts.FormulaValue} y\n         * Second value for operation.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Operation result. `NaN` if operation is not support.\n         */\n        function basicOperation(operator, x, y) {\n            switch (operator) {\n                case '=':\n                    return asLogicalString(x) === asLogicalString(y);\n                case '<':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) < asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) < asLogicalNumber(y);\n                case '<=':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) <= asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) <= asLogicalNumber(y);\n                case '>':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) > asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) > asLogicalNumber(y);\n                case '>=':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) >= asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) >= asLogicalNumber(y);\n            }\n            x = asNumber(x);\n            y = asNumber(y);\n            var result;\n            switch (operator) {\n                case '+':\n                    result = x + y;\n                    break;\n                case '-':\n                    result = x - y;\n                    break;\n                case '*':\n                    result = x * y;\n                    break;\n                case '/':\n                    result = x / y;\n                    break;\n                case '^':\n                    result = Math.pow(x, y);\n                    break;\n                default:\n                    return NaN;\n            }\n            // Limit decimal to 9 digits\n            return (result % 1 ?\n                Math.round(result * 1000000000) / 1000000000 :\n                result);\n        }\n        /**\n         * Converts an argument to Value and in case of a range to an array of Values.\n         *\n         * @function Highcharts.Formula.getArgumentValue\n         *\n         * @param {Highcharts.FormulaRange|Highcharts.FormulaTerm} arg\n         * Formula range or term to convert.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Converted value.\n         */\n        function getArgumentValue(arg, table) {\n            // Add value\n            if (isValue(arg)) {\n                return arg;\n            }\n            // Add values of a range\n            if (isRange(arg)) {\n                return (table && getRangeValues(arg, table) || []);\n            }\n            // Add values of a function\n            if (isFunction(arg)) {\n                return processFunction(arg, table);\n            }\n            // Process functions, operations, references with formula processor\n            return processFormula((isFormula(arg) ? arg : [arg]), table);\n        }\n        /**\n         * Converts all arguments to Values and in case of ranges to arrays of Values.\n         *\n         * @function Highcharts.Formula.getArgumentsValues\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Formula arguments to convert.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Array<(Highcharts.FormulaValue|Array<Highcharts.FormulaValue>)>}\n         * Converted values.\n         */\n        function getArgumentsValues(args, table) {\n            var values = [];\n            for (var i = 0, iEnd = args.length; i < iEnd; ++i) {\n                values.push(getArgumentValue(args[i], table));\n            }\n            return values;\n        }\n        /**\n         * Extracts cell values from a table for a given range.\n         *\n         * @function Highcharts.Formula.getRangeValues\n         *\n         * @param {Highcharts.FormulaRange} range\n         * Formula range to use.\n         *\n         * @param {Highcharts.DataTable} table\n         * Table to extract from.\n         *\n         * @return {Array<Highcharts.FormulaValue>}\n         * Extracted values.\n         */\n        function getRangeValues(range, table) {\n            var columnNames = table\n                .getColumnNames()\n                .slice(range.beginColumn, range.endColumn + 1), values = [];\n            for (var i = 0, iEnd = columnNames.length, cell = void 0; i < iEnd; ++i) {\n                var cells = table.getColumn(columnNames[i], true) || [];\n                for (var j = range.beginRow, jEnd = range.endRow + 1; j < jEnd; ++j) {\n                    cell = cells[j];\n                    if (typeof cell === 'string' &&\n                        cell[0] === '=' &&\n                        table !== table.modified) {\n                        // Look in the modified table for formula result\n                        cell = table.modified.getCell(columnNames[i], j);\n                    }\n                    values.push(isValue(cell) ? cell : NaN);\n                }\n            }\n            return values;\n        }\n        /**\n         * Extracts the cell value from a table for a given reference.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaReference} reference\n         * Formula reference to use.\n         *\n         * @param {Highcharts.DataTable} table\n         * Table to extract from.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Extracted value. 'undefined' might also indicate that the cell was not found.\n         */\n        function getReferenceValue(reference, table) {\n            var columnName = table.getColumnNames()[reference.column];\n            if (columnName) {\n                var cell = table.getCell(columnName, reference.row);\n                if (typeof cell === 'string' &&\n                    cell[0] === '=' &&\n                    table !== table.modified) {\n                    // Look in the modified table for formula result\n                    var result = table.modified.getCell(columnName, reference.row);\n                    return isValue(result) ? result : NaN;\n                }\n                return isValue(cell) ? cell : NaN;\n            }\n            return NaN;\n        }\n        /**\n         * Processes a formula array on the given table. If the formula does not contain\n         * references or ranges, then no table has to be provided.\n         *\n         * @private\n         * @function Highcharts.processFormula\n         *\n         * @param {Highcharts.Formula} formula\n         * Formula array to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Result value of the process. `NaN` indicates an error.\n         */\n        function processFormula(formula, table) {\n            var x;\n            for (var i = 0, iEnd = formula.length, item = void 0, operator = void 0, result = void 0, y = void 0; i < iEnd; ++i) {\n                item = formula[i];\n                // Remember operator for operation on next item\n                if (isOperator(item)) {\n                    operator = item;\n                    continue;\n                }\n                // Next item is a value\n                if (isValue(item)) {\n                    y = item;\n                    // Next item is a formula and needs to get processed first\n                }\n                else if (isFormula(item)) {\n                    y = processFormula(formula, table);\n                    // Next item is a function call and needs to get processed first\n                }\n                else if (isFunction(item)) {\n                    result = processFunction(item, table);\n                    y = (isValue(result) ? result : NaN); // Arrays are not allowed here\n                    // Next item is a reference and needs to get resolved\n                }\n                else if (isReference(item)) {\n                    y = (table && getReferenceValue(item, table));\n                }\n                // If we have a next value, lets do the operation\n                if (typeof y !== 'undefined') {\n                    // Next value is our first value\n                    if (typeof x === 'undefined') {\n                        if (operator) {\n                            x = basicOperation(operator, 0, y);\n                        }\n                        else {\n                            x = y;\n                        }\n                        // Fail fast if no operator available\n                    }\n                    else if (!operator) {\n                        return NaN;\n                        // Regular next value\n                    }\n                    else {\n                        var operator2 = formula[i + 1];\n                        if (isOperator(operator2) &&\n                            operatorPriority[operator2] > operatorPriority[operator]) {\n                            y = basicOperation(operator2, y, processFormula(formula.slice(i + 2)));\n                            i = iEnd;\n                        }\n                        x = basicOperation(operator, x, y);\n                    }\n                    operator = void 0;\n                    y = void 0;\n                }\n            }\n            return isValue(x) ? x : NaN;\n        }\n        /**\n         * Process a function on the given table. If the arguments do not contain\n         * references or ranges, then no table has to be provided.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaFunction} formulaFunction\n         * Formula function to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @param {Highcharts.FormulaReference} [reference]\n         * Table cell reference to use for relative references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Result value (or values) of the process. `NaN` indicates an error.\n         */\n        function processFunction(formulaFunction, table, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        reference // @todo\n        ) {\n            var processor = processorFunctions[formulaFunction.name];\n            if (processor) {\n                try {\n                    return processor(formulaFunction.args, table);\n                }\n                catch (_a) {\n                    return NaN;\n                }\n            }\n            var error = new Error(\"Function \\\"\".concat(formulaFunction.name, \"\\\" not found.\"));\n            error.name = 'FormulaProcessError';\n            throw error;\n        }\n        /**\n         * Registers a function for the FormulaProcessor.\n         *\n         * @param {string} name\n         * Name of the function in spreadsheets notation with upper case.\n         *\n         * @param {Highcharts.FormulaFunction} processorFunction\n         * ProcessorFunction for the FormulaProcessor. This is an object so that it\n         * can take additional parameter for future validation routines.\n         *\n         * @return {boolean}\n         * Return true, if the ProcessorFunction has been registered.\n         */\n        function registerProcessorFunction(name, processorFunction) {\n            return (processorFunctionNameRegExp.test(name) &&\n                !processorFunctions[name] &&\n                !!(processorFunctions[name] = processorFunction));\n        }\n        /**\n         * Translates relative references and ranges in-place.\n         *\n         * @param {Highcharts.Formula} formula\n         * Formula to translate references and ranges in.\n         *\n         * @param {number} [columnDelta=0]\n         * Column delta to translate to. Negative translate back.\n         *\n         * @param {number} [rowDelta=0]\n         * Row delta to translate to. Negative numbers translate back.\n         *\n         * @return {Highcharts.Formula}\n         * Formula with translated reference and ranges. This formula is equal to the\n         * first argument.\n         */\n        function translateReferences(formula, columnDelta, rowDelta) {\n            if (columnDelta === void 0) { columnDelta = 0; }\n            if (rowDelta === void 0) { rowDelta = 0; }\n            for (var i = 0, iEnd = formula.length, item = void 0; i < iEnd; ++i) {\n                item = formula[i];\n                if (item instanceof Array) {\n                    translateReferences(item, columnDelta, rowDelta);\n                }\n                else if (isFunction(item)) {\n                    translateReferences(item.args, columnDelta, rowDelta);\n                }\n                else if (isRange(item)) {\n                    if (item.beginColumnRelative) {\n                        item.beginColumn += columnDelta;\n                    }\n                    if (item.beginRowRelative) {\n                        item.beginRow += rowDelta;\n                    }\n                    if (item.endColumnRelative) {\n                        item.endColumn += columnDelta;\n                    }\n                    if (item.endRowRelative) {\n                        item.endRow += rowDelta;\n                    }\n                }\n                else if (isReference(item)) {\n                    if (item.columnRelative) {\n                        item.column += columnDelta;\n                    }\n                    if (item.rowRelative) {\n                        item.row += rowDelta;\n                    }\n                }\n            }\n            return formula;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var FormulaProcessor = {\n            asNumber: asNumber,\n            getArgumentValue: getArgumentValue,\n            getArgumentsValues: getArgumentsValues,\n            getRangeValues: getRangeValues,\n            getReferenceValue: getReferenceValue,\n            processFormula: processFormula,\n            processorFunctions: processorFunctions,\n            registerProcessorFunction: registerProcessorFunction,\n            translateReferences: translateReferences\n        };\n\n        return FormulaProcessor;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/ABS.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `ABS(value)` implementation. Returns positive numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Array<number>}\n         * Result value of the process.\n         */\n        function ABS(args, table) {\n            var value = getArgumentValue(args[0], table);\n            switch (typeof value) {\n                case 'number':\n                    return Math.abs(value);\n                case 'object': {\n                    var values = [];\n                    for (var i = 0, iEnd = value.length, value2 = void 0; i < iEnd; ++i) {\n                        value2 = value[i];\n                        if (typeof value2 !== 'number') {\n                            return NaN;\n                        }\n                        values.push(Math.abs(value2));\n                    }\n                    return values;\n                }\n                default:\n                    return NaN;\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('ABS', ABS);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ABS;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AND.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AND(...tests)` implementation. Returns `TRUE`, if all test\n         * results are not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function AND(args, table) {\n            for (var i = 0, iEnd = args.length, value = void 0; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                if (!value ||\n                    (typeof value === 'object' &&\n                        !AND(value, table))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AND', AND);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AND;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AVERAGE.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentsValues = FormulaProcessor.getArgumentsValues;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AVERAGE(...values)` implementation. Calculates the average\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.AVERAGE\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function AVERAGE(args, table) {\n            var values = getArgumentsValues(args, table);\n            var count = 0, result = 0;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                            result += value;\n                        }\n                        break;\n                    case 'object':\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                ++count;\n                                result += value2;\n                            }\n                        }\n                        break;\n                }\n            }\n            return (count ? (result / count) : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AVERAGE', AVERAGE);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AVERAGE;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AVERAGEA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AVERAGEA(...values)` implementation. Calculates the\n         * average of the given values. Strings and FALSE are calculated as 0.\n         *\n         * @private\n         * @function Formula.processorFunctions.AVERAGEA\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function AVERAGEA(args, table) {\n            var count = 0, result = 0;\n            for (var i = 0, iEnd = args.length, value = void 0; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                switch (typeof value) {\n                    case 'boolean':\n                        ++count;\n                        result += (value ? 1 : 0);\n                        continue;\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                            result += value;\n                        }\n                        continue;\n                    case 'string':\n                        ++count;\n                        continue;\n                    default:\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            switch (typeof value2) {\n                                case 'boolean':\n                                    ++count;\n                                    result += (value2 ? 1 : 0);\n                                    continue;\n                                case 'number':\n                                    if (!isNaN(value2)) {\n                                        ++count;\n                                        result += value2;\n                                    }\n                                    continue;\n                                case 'string':\n                                    ++count;\n                                    continue;\n                            }\n                        }\n                        continue;\n                }\n            }\n            return (count ? (result / count) : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AVERAGEA', AVERAGEA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AVERAGEA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/COUNT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `COUNT(...values)` implementation. Returns the count of\n         * given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.COUNT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function COUNT(args, table) {\n            var values = FormulaProcessor.getArgumentsValues(args, table);\n            var count = 0;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                        }\n                        break;\n                    case 'object':\n                        count += COUNT(value, table);\n                        break;\n                }\n            }\n            return count;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('COUNT', COUNT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return COUNT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/COUNTA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `COUNTA(...values)` implementation. Returns the count of\n         * given values that are not empty.\n         *\n         * @private\n         * @function Formula.processorFunctions.COUNT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function COUNTA(args, table) {\n            var values = FormulaProcessor.getArgumentsValues(args, table);\n            var count = 0;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (isNaN(value)) {\n                            continue;\n                        }\n                        break;\n                    case 'object':\n                        count += COUNTA(value, table);\n                        continue;\n                    case 'string':\n                        if (!value) {\n                            continue;\n                        }\n                        break;\n                }\n                ++count;\n            }\n            return count;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('COUNTA', COUNTA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return COUNTA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/IF.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `IF(test, value1, value2)` implementation. Returns one of\n         * the values based on the test result. `value1` will be returned, if the test\n         * result is not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.IF\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Result value of the process.\n         */\n        function IF(args, table) {\n            return (getArgumentValue(args[0], table) ?\n                getArgumentValue(args[1], table) :\n                getArgumentValue(args[2], table));\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('IF', IF);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return IF;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/ISNA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `ISNA(value)` implementation. Returns TRUE if value is not\n         * a number.\n         *\n         * @private\n         * @function Formula.processorFunctions.ISNA\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function ISNA(args, table) {\n            var value = getArgumentValue(args[0], table);\n            return (typeof value !== 'number' || isNaN(value));\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('ISNA', ISNA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ISNA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MAX.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentsValues = FormulaProcessor.getArgumentsValues;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MAX(...values)` implementation. Calculates the largest\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.MAX\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MAX(args, table) {\n            var values = getArgumentsValues(args, table);\n            var result = Number.NEGATIVE_INFINITY;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (value > result) {\n                            result = value;\n                        }\n                        break;\n                    case 'object':\n                        value = MAX(value);\n                        if (value > result) {\n                            result = value;\n                        }\n                        break;\n                }\n            }\n            return isFinite(result) ? result : 0;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MAX', MAX);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MAX;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MEDIAN.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MEDIAN(...values)` implementation. Calculates the median\n         * average of the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MEDIAN\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MEDIAN(args, table) {\n            var median = [], values = FormulaProcessor.getArgumentsValues(args, table);\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            median.push(value);\n                        }\n                        break;\n                    case 'object':\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                median.push(value2);\n                            }\n                        }\n                        break;\n                }\n            }\n            var count = median.length;\n            if (!count) {\n                return NaN;\n            }\n            var half = Math.floor(count / 2); // Floor because index starts at 0\n            return (count % 2 ?\n                median[half] : // Odd\n                (median[half - 1] + median[half]) / 2 // Even\n            );\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MEDIAN', MEDIAN);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MEDIAN;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MIN.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentsValues = FormulaProcessor.getArgumentsValues;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MIN(...values)` implementation. Calculates the lowest\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.MIN\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MIN(args, table) {\n            var values = getArgumentsValues(args, table);\n            var result = Number.POSITIVE_INFINITY;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (value < result) {\n                            result = value;\n                        }\n                        break;\n                    case 'object':\n                        value = MIN(value);\n                        if (value < result) {\n                            result = value;\n                        }\n                        break;\n                }\n            }\n            return isFinite(result) ? result : 0;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MIN', MIN);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MIN;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MOD.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MOD(value1, value2)` implementation. Calculates the rest\n         * of the division with the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MOD\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MOD(args, table) {\n            var value1 = getArgumentValue(args[0], table), value2 = getArgumentValue(args[1], table);\n            if (typeof value1 === 'object') {\n                value1 = value1[0];\n            }\n            if (typeof value2 === 'object') {\n                value2 = value2[0];\n            }\n            if (typeof value1 !== 'number' ||\n                typeof value2 !== 'number' ||\n                value2 === 0) {\n                return NaN;\n            }\n            return value1 % value2;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MOD', MOD);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MOD;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MODE.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates the mode map of the given arguments.\n         *\n         * @private\n         * @function Formula.processorFunctions.MULT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function getModeMap(args, table) {\n            var modeMap = {}, values = FormulaProcessor.getArgumentsValues(args, table);\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            modeMap[value] = (modeMap[value] || 0) + 1;\n                        }\n                        break;\n                    case 'object':\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                modeMap[value2] = (modeMap[value2] || 0) + 1;\n                            }\n                        }\n                        break;\n                }\n            }\n            return modeMap;\n        }\n        /**\n         * Processor for the `MODE.MULT(...values)` implementation. Calculates the most\n         * frequent values of the give values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MULT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number|Array<number>}\n         * Result value of the process.\n         */\n        function MULT(args, table) {\n            var modeMap = getModeMap(args, table), keys = Object.keys(modeMap);\n            if (!keys.length) {\n                return NaN;\n            }\n            var modeKeys = [parseFloat(keys[0])], modeCount = modeMap[keys[0]];\n            for (var i = 1, iEnd = keys.length, key = void 0, count = void 0; i < iEnd; ++i) {\n                key = keys[i];\n                count = modeMap[key];\n                if (modeCount < count) {\n                    modeKeys = [parseFloat(key)];\n                    modeCount = count;\n                }\n                else if (modeCount === count) {\n                    modeKeys.push(parseFloat(key));\n                }\n            }\n            return modeCount > 1 ? modeKeys : NaN;\n        }\n        /**\n         * Processor for the `MODE.SNGL(...values)` implementation. Calculates the\n         * lowest most frequent value of the give values.\n         *\n         * @private\n         * @function Formula.processorFunctions['MODE.SNGL']\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function SNGL(args, table) {\n            var modeMap = getModeMap(args, table), keys = Object.keys(modeMap);\n            if (!keys.length) {\n                return NaN;\n            }\n            var modeKey = parseFloat(keys[0]), modeCount = modeMap[keys[0]];\n            for (var i = 1, iEnd = keys.length, key = void 0, keyValue = void 0, count = void 0; i < iEnd; ++i) {\n                key = keys[i];\n                count = modeMap[key];\n                if (modeCount < count) {\n                    modeKey = parseFloat(key);\n                    modeCount = count;\n                }\n                else if (modeCount === count) {\n                    keyValue = parseFloat(key);\n                    if (modeKey > keyValue) {\n                        modeKey = keyValue;\n                        modeCount = count;\n                    }\n                }\n            }\n            return modeCount > 1 ? modeKey : NaN;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MODE', SNGL);\n        FormulaProcessor.registerProcessorFunction('MODE.MULT', MULT);\n        FormulaProcessor.registerProcessorFunction('MODE.SNGL', SNGL);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var MODE = {\n            MULT: MULT,\n            SNGL: SNGL\n        };\n\n        return MODE;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/NOT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `NOT(value)` implementation. Returns the opposite test\n         * result.\n         *\n         * @private\n         * @function Formula.processorFunctions.NOT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean|number}\n         * Result value of the process.\n         */\n        function NOT(args, table) {\n            var value = getArgumentValue(args[0], table);\n            if (typeof value === 'object') {\n                value = value[0];\n            }\n            switch (typeof value) {\n                case 'boolean':\n                case 'number':\n                    return !value;\n            }\n            return NaN;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('NOT', NOT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NOT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/OR.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `OR(...tests)` implementation. Returns `TRUE`, if one test\n         * result is not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function OR(args, table) {\n            for (var i = 0, iEnd = args.length, value = void 0; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                if (typeof value === 'object') {\n                    if (OR(value, table)) {\n                        return true;\n                    }\n                }\n                else if (value) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('OR', OR);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OR;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/PRODUCT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentsValues = FormulaProcessor.getArgumentsValues;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `PRODUCT(...values)` implementation. Calculates the product\n         * of the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.PRODUCT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function PRODUCT(args, table) {\n            var values = getArgumentsValues(args, table);\n            var result = 1, calculated = false;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            calculated = true;\n                            result *= value;\n                        }\n                        break;\n                    case 'object':\n                        calculated = true;\n                        result *= PRODUCT(value, table);\n                        break;\n                }\n            }\n            return (calculated ? result : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('PRODUCT', PRODUCT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PRODUCT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/SUM.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `SUM(...values)` implementation. Calculates the sum of the\n         * given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.SUM\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function SUM(args, table) {\n            var values = FormulaProcessor.getArgumentsValues(args, table);\n            var result = 0;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            result += value;\n                        }\n                        break;\n                    case 'object':\n                        result += SUM(value, table);\n                        break;\n                }\n            }\n            return result;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('SUM', SUM); // ð\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SUM;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/XOR.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `XOR(...tests)` implementation. Returns `TRUE`, if at least\n         * one of the given tests differs in result of other tests.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean|number}\n         * Result value of the process.\n         */\n        function XOR(args, table) {\n            for (var i = 0, iEnd = args.length, lastValue = void 0, value = void 0; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                switch (typeof value) {\n                    case 'boolean':\n                    case 'number':\n                        if (typeof lastValue === 'undefined') {\n                            lastValue = !!value;\n                        }\n                        else if (!!value !== lastValue) {\n                            return true;\n                        }\n                        break;\n                    case 'object':\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            switch (typeof value2) {\n                                case 'boolean':\n                                case 'number':\n                                    if (typeof lastValue === 'undefined') {\n                                        lastValue = !!value2;\n                                    }\n                                    else if (!!value2 !== lastValue) {\n                                        return true;\n                                    }\n                                    break;\n                            }\n                        }\n                        break;\n                }\n            }\n            return false;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('XOR', XOR);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return XOR;\n    });\n    _registerModule(_modules, 'Data/Formula/Formula.js', [_modules['Data/Formula/FormulaParser.js'], _modules['Data/Formula/FormulaProcessor.js'], _modules['Data/Formula/FormulaTypes.js']], function (FormulaParser, FormulaProcessor, FormulaType) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * Formula engine to make use of spreadsheet formula strings.\n         * @internal\n         */\n        var Formula = __assign(__assign(__assign({}, FormulaParser), FormulaProcessor), FormulaType);\n\n        return Formula;\n    });\n    _registerModule(_modules, 'Data/Converters/CSVConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - Christer Vasseng\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming CSV to a table.\n         *\n         * @private\n         */\n        var CSVConverter = /** @class */ (function (_super) {\n            __extends(CSVConverter, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CSV parser.\n             *\n             * @param {CSVConverter.UserOptions} [options]\n             * Options for the CSV parser.\n             */\n            function CSVConverter(options) {\n                var _this = this;\n                var mergedOptions = merge(CSVConverter.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.columns = [];\n                _this.headers = [];\n                _this.dataTypes = [];\n                _this.options = mergedOptions;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a CSV string from the datatable on the connector instance.\n             *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {CSVConverter.Options} [options]\n             * Options used for the export.\n             *\n             * @return {string}\n             * CSV string from the connector table.\n             */\n            CSVConverter.prototype.export = function (connector, options) {\n                if (options === void 0) { options = this.options; }\n                var useLocalDecimalPoint = options.useLocalDecimalPoint, lineDelimiter = options.lineDelimiter, exportNames = (this.options.firstRowAsNames !== false);\n                var decimalPoint = options.decimalPoint, itemDelimiter = options.itemDelimiter;\n                if (!decimalPoint) {\n                    decimalPoint = (itemDelimiter !== ',' && useLocalDecimalPoint ?\n                        (1.1).toLocaleString()[1] :\n                        '.');\n                }\n                if (!itemDelimiter) {\n                    itemDelimiter = (decimalPoint === ',' ? ';' : ',');\n                }\n                var columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), csvRows = [], columnsCount = columnNames.length;\n                var rowArray = [];\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    csvRows.push(columnNames.map(function (columnName) { return \"\\\"\".concat(columnName, \"\\\"\"); }).join(itemDelimiter));\n                }\n                for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    var columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    var columnMeta = connector.whatIs(columnName);\n                    var columnDataType = void 0;\n                    if (columnMeta) {\n                        columnDataType = columnMeta.dataType;\n                    }\n                    for (var rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        var cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Prefer datatype from metadata\n                        if (columnDataType === 'string') {\n                            cellValue = '\"' + cellValue + '\"';\n                        }\n                        else if (typeof cellValue === 'number') {\n                            cellValue = String(cellValue).replace('.', decimalPoint);\n                        }\n                        else if (typeof cellValue === 'string') {\n                            cellValue = \"\\\"\".concat(cellValue, \"\\\"\");\n                        }\n                        rowArray[rowIndex][columnIndex] = cellValue;\n                        // On the final column, push the row to the CSV\n                        if (columnIndex === columnsCount - 1) {\n                            // Trim repeated undefined values starting at the end\n                            // Currently, we export the first \"comma\" even if the\n                            // second value is undefined\n                            var i = columnIndex;\n                            while (rowArray[rowIndex].length > 2) {\n                                var cellVal = rowArray[rowIndex][i];\n                                if (cellVal !== void 0) {\n                                    break;\n                                }\n                                rowArray[rowIndex].pop();\n                                i--;\n                            }\n                            csvRows.push(rowArray[rowIndex].join(itemDelimiter));\n                        }\n                    }\n                }\n                return csvRows.join(lineDelimiter);\n            };\n            /**\n             * Initiates parsing of CSV\n             *\n             * @param {CSVConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             */\n            CSVConverter.prototype.parse = function (options, eventDetail) {\n                var converter = this, dataTypes = converter.dataTypes, parserOptions = merge(this.options, options), beforeParse = parserOptions.beforeParse, lineDelimiter = parserOptions.lineDelimiter, firstRowAsNames = parserOptions.firstRowAsNames, itemDelimiter = parserOptions.itemDelimiter;\n                var lines, rowIt = 0, csv = parserOptions.csv, startRow = parserOptions.startRow, endRow = parserOptions.endRow, column;\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (csv && beforeParse) {\n                    csv = beforeParse(csv);\n                }\n                if (csv) {\n                    lines = csv\n                        .replace(/\\r\\n|\\r/g, '\\n') // Windows | Mac\n                        .split(lineDelimiter || '\\n');\n                    if (!startRow || startRow < 0) {\n                        startRow = 0;\n                    }\n                    if (!endRow || endRow >= lines.length) {\n                        endRow = lines.length - 1;\n                    }\n                    if (!itemDelimiter) {\n                        converter.guessedItemDelimiter =\n                            converter.guessDelimiter(lines);\n                    }\n                    // If the first row contain names, add them to the\n                    // headers array and skip the row.\n                    if (firstRowAsNames) {\n                        var headers = lines[0].split(itemDelimiter || converter.guessedItemDelimiter || ',');\n                        // Remove \"\"s from the headers\n                        for (var i = 0; i < headers.length; i++) {\n                            headers[i] = headers[i].trim().replace(/^[\"']|[\"']$/g, '');\n                        }\n                        converter.headers = headers;\n                        startRow++;\n                    }\n                    var offset = 0;\n                    for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                        if (lines[rowIt][0] === '#') {\n                            offset++;\n                        }\n                        else {\n                            converter\n                                .parseCSVRow(lines[rowIt], rowIt - startRow - offset);\n                        }\n                    }\n                    if (dataTypes.length &&\n                        dataTypes[0].length &&\n                        dataTypes[0][1] === 'date' && // Format is a string date\n                        !converter.options.dateFormat) {\n                        converter.deduceDateFormat(converter.columns[0], null, true);\n                    }\n                    // Guess types.\n                    for (var i = 0, iEnd = converter.columns.length; i < iEnd; ++i) {\n                        column = converter.columns[i];\n                        for (var j = 0, jEnd = column.length; j < jEnd; ++j) {\n                            if (column[j] && typeof column[j] === 'string') {\n                                var cellValue = converter.asGuessedType(column[j]);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                converter.columns[i][j] = cellValue;\n                            }\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            };\n            /**\n             * Internal method that parses a single CSV row\n             */\n            CSVConverter.prototype.parseCSVRow = function (columnStr, rowNumber) {\n                var converter = this, columns = converter.columns || [], dataTypes = converter.dataTypes, _a = converter.options, startColumn = _a.startColumn, endColumn = _a.endColumn, itemDelimiter = (converter.options.itemDelimiter ||\n                    converter.guessedItemDelimiter);\n                var decimalPoint = converter.options.decimalPoint;\n                if (!decimalPoint || decimalPoint === itemDelimiter) {\n                    decimalPoint = converter.guessedDecimalPoint || '.';\n                }\n                var i = 0, c = '', token = '', actualColumn = 0, column = 0;\n                var read = function (j) {\n                    c = columnStr[j];\n                };\n                var pushType = function (type) {\n                    if (dataTypes.length < column + 1) {\n                        dataTypes.push([type]);\n                    }\n                    if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                        dataTypes[column].push(type);\n                    }\n                };\n                var push = function () {\n                    if (startColumn > actualColumn || actualColumn > endColumn) {\n                        // Skip this column, but increment the column count (#7272)\n                        ++actualColumn;\n                        token = '';\n                        return;\n                    }\n                    // Save the type of the token.\n                    if (typeof token === 'string') {\n                        if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                            token = parseFloat(token);\n                            pushType('number');\n                        }\n                        else if (!isNaN(Date.parse(token))) {\n                            token = token.replace(/\\//g, '-');\n                            pushType('date');\n                        }\n                        else {\n                            pushType('string');\n                        }\n                    }\n                    else {\n                        pushType('number');\n                    }\n                    if (columns.length < column + 1) {\n                        columns.push([]);\n                    }\n                    // Try to apply the decimal point, and check if the token then is a\n                    // number. If not, reapply the initial value\n                    if (typeof token !== 'number' &&\n                        converter.guessType(token) !== 'number' &&\n                        decimalPoint) {\n                        var initialValue = token;\n                        token = token.replace(decimalPoint, '.');\n                        if (converter.guessType(token) !== 'number') {\n                            token = initialValue;\n                        }\n                    }\n                    columns[column][rowNumber] = token;\n                    token = '';\n                    ++column;\n                    ++actualColumn;\n                };\n                if (!columnStr.trim().length) {\n                    return;\n                }\n                if (columnStr.trim()[0] === '#') {\n                    return;\n                }\n                for (; i < columnStr.length; i++) {\n                    read(i);\n                    if (c === '#') {\n                        // If there are hexvalues remaining (#13283)\n                        if (!/^#[A-F\\d]{3,3}|[A-F\\d]{6,6}/i.test(columnStr.substring(i))) {\n                            // The rest of the row is a comment\n                            push();\n                            return;\n                        }\n                    }\n                    // Quoted string\n                    if (c === '\"') {\n                        read(++i);\n                        while (i < columnStr.length) {\n                            if (c === '\"') {\n                                break;\n                            }\n                            token += c;\n                            read(++i);\n                        }\n                    }\n                    else if (c === itemDelimiter) {\n                        push();\n                        // Actual column data\n                    }\n                    else {\n                        token += c;\n                    }\n                }\n                push();\n            };\n            /**\n             * Internal method that guesses the delimiter from the first\n             * 13 lines of the CSV\n             * @param {Array<string>} lines\n             * The CSV, split into lines\n             */\n            CSVConverter.prototype.guessDelimiter = function (lines) {\n                var points = 0, commas = 0, guessed;\n                var potDelimiters = {\n                    ',': 0,\n                    ';': 0,\n                    '\\t': 0\n                }, linesCount = lines.length;\n                for (var i = 0; i < linesCount; i++) {\n                    var inStr = false, c = void 0, cn = void 0, cl = void 0, token = '';\n                    // We should be able to detect dateformats within 13 rows\n                    if (i > 13) {\n                        break;\n                    }\n                    var columnStr = lines[i];\n                    for (var j = 0; j < columnStr.length; j++) {\n                        c = columnStr[j];\n                        cn = columnStr[j + 1];\n                        cl = columnStr[j - 1];\n                        if (c === '#') {\n                            // Skip the rest of the line - it's a comment\n                            break;\n                        }\n                        if (c === '\"') {\n                            if (inStr) {\n                                if (cl !== '\"' && cn !== '\"') {\n                                    while (cn === ' ' && j < columnStr.length) {\n                                        cn = columnStr[++j];\n                                    }\n                                    // After parsing a string, the next non-blank\n                                    // should be a delimiter if the CSV is properly\n                                    // formed.\n                                    if (typeof potDelimiters[cn] !== 'undefined') {\n                                        potDelimiters[cn]++;\n                                    }\n                                    inStr = false;\n                                }\n                            }\n                            else {\n                                inStr = true;\n                            }\n                        }\n                        else if (typeof potDelimiters[c] !== 'undefined') {\n                            token = token.trim();\n                            if (!isNaN(Date.parse(token))) {\n                                potDelimiters[c]++;\n                            }\n                            else if (isNaN(Number(token)) ||\n                                !isFinite(Number(token))) {\n                                potDelimiters[c]++;\n                            }\n                            token = '';\n                        }\n                        else {\n                            token += c;\n                        }\n                        if (c === ',') {\n                            commas++;\n                        }\n                        if (c === '.') {\n                            points++;\n                        }\n                    }\n                }\n                // Count the potential delimiters.\n                // This could be improved by checking if the number of delimiters\n                // equals the number of columns - 1\n                if (potDelimiters[';'] > potDelimiters[',']) {\n                    guessed = ';';\n                }\n                else if (potDelimiters[','] > potDelimiters[';']) {\n                    guessed = ',';\n                }\n                else {\n                    // No good guess could be made..\n                    guessed = ',';\n                }\n                // Try to deduce the decimal point if it's not explicitly set.\n                // If both commas or points is > 0 there is likely an issue\n                if (points > commas) {\n                    this.guessedDecimalPoint = '.';\n                }\n                else {\n                    this.guessedDecimalPoint = ',';\n                }\n                return guessed;\n            };\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            CSVConverter.prototype.getTable = function () {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            CSVConverter.defaultOptions = __assign(__assign({}, DataConverter.defaultOptions), { lineDelimiter: '\\n' });\n            return CSVConverter;\n        }(DataConverter));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/CSVConnector.js', [_modules['Data/Converters/CSVConverter.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js']], function (CSVConverter, DataConnector, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - Christer Vasseng\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from CSV\n         *\n         * @private\n         */\n        var CSVConnector = /** @class */ (function (_super) {\n            __extends(CSVConnector, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of CSVConnector.\n             *\n             * @param {CSVConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            function CSVConnector(options) {\n                var _this = this;\n                var mergedOptions = merge(CSVConnector.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.converter = new CSVConverter(mergedOptions);\n                _this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    _this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the CSV source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVConnector#load\n             * @emits CSVConnector#afterLoad\n             */\n            CSVConnector.prototype.load = function (eventDetail) {\n                var connector = this, converter = connector.converter, table = connector.table, _a = connector.options, csv = _a.csv, csvURL = _a.csvURL, dataModifier = _a.dataModifier;\n                connector.emit({\n                    type: 'load',\n                    csv: csv,\n                    detail: eventDetail,\n                    table: table\n                });\n                return Promise\n                    .resolve(csvURL ?\n                    fetch(csvURL).then(function (response) { return response.text(); }) :\n                    csv || '')\n                    .then(function (csv) {\n                    if (csv) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ csv: csv });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector\n                        .setModifierOptions(dataModifier)\n                        .then(function () { return csv; });\n                })\n                    .then(function (csv) {\n                    connector.emit({\n                        type: 'afterLoad',\n                        csv: csv,\n                        detail: eventDetail,\n                        table: table\n                    });\n                    return connector;\n                })['catch'](function (error) {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error: error,\n                        table: table\n                    });\n                    throw error;\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            CSVConnector.defaultOptions = {\n                csv: '',\n                csvURL: '',\n                enablePolling: false,\n                dataRefreshRate: 1,\n                firstRowAsNames: true\n            };\n            return CSVConnector;\n        }(DataConnector));\n        DataConnector.registerType('CSV', CSVConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/JSONConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataConverter, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var error = U.error, isArray = U.isArray, merge = U.merge, objectEach = U.objectEach;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming JSON to a table.\n         *\n         * @private\n         */\n        var JSONConverter = /** @class */ (function (_super) {\n            __extends(JSONConverter, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the JSON parser.\n             *\n             * @param {JSONConverter.UserOptions} [options]\n             * Options for the JSON parser.\n             */\n            function JSONConverter(options) {\n                var _this = this;\n                var mergedOptions = merge(JSONConverter.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.columns = [];\n                _this.headers = [];\n                _this.options = mergedOptions;\n                _this.table = new DataTable();\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates parsing of JSON structure.\n             *\n             * @param {JSONConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConverter#parse\n             * @emits JSONConverter#afterParse\n             */\n            JSONConverter.prototype.parse = function (options, eventDetail) {\n                var converter = this;\n                options = merge(converter.options, options);\n                var beforeParse = options.beforeParse, orientation = options.orientation, firstRowAsNames = options.firstRowAsNames, columnNames = options.columnNames;\n                var data = options.data;\n                if (!data) {\n                    return;\n                }\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (beforeParse) {\n                    data = beforeParse(data);\n                }\n                data = data.slice();\n                if (orientation === 'columns') {\n                    for (var i = 0, iEnd = data.length; i < iEnd; i++) {\n                        var item = data[i];\n                        if (!(item instanceof Array)) {\n                            return;\n                        }\n                        if (converter.headers instanceof Array) {\n                            if (firstRowAsNames) {\n                                converter.headers.push(\"\".concat(item.shift()));\n                            }\n                            else if (columnNames && columnNames instanceof Array) {\n                                converter.headers.push(columnNames[i]);\n                            }\n                            converter.table.setColumn(converter.headers[i] || i.toString(), item);\n                        }\n                        else {\n                            error('JSONConverter: Invalid `columnNames` option.', false);\n                        }\n                    }\n                }\n                else if (orientation === 'rows') {\n                    if (firstRowAsNames) {\n                        converter.headers = data.shift();\n                    }\n                    else if (columnNames) {\n                        converter.headers = columnNames;\n                    }\n                    var _loop_1 = function (rowIndex, iEnd) {\n                        var row = data[rowIndex];\n                        if (isArray(row)) {\n                            for (var columnIndex = 0, jEnd = row.length; columnIndex < jEnd; columnIndex++) {\n                                if (converter.columns.length < columnIndex + 1) {\n                                    converter.columns.push([]);\n                                }\n                                converter.columns[columnIndex].push(row[columnIndex]);\n                                if (converter.headers instanceof Array) {\n                                    this_1.table.setColumn(converter.headers[columnIndex] ||\n                                        columnIndex.toString(), converter.columns[columnIndex]);\n                                }\n                                else {\n                                    error('JSONConverter: Invalid `columnNames` option.', false);\n                                }\n                            }\n                        }\n                        else {\n                            var columnNames_1 = converter.headers;\n                            if (columnNames_1 && !(columnNames_1 instanceof Array)) {\n                                var newRow_1 = {};\n                                objectEach(columnNames_1, function (arrayWithPath, name) {\n                                    newRow_1[name] = arrayWithPath.reduce(function (acc, key) {\n                                        return acc[key];\n                                    }, row);\n                                });\n                                row = newRow_1;\n                            }\n                            this_1.table.setRows([row], rowIndex);\n                        }\n                    };\n                    var this_1 = this;\n                    for (var rowIndex = 0, iEnd = data.length; rowIndex < iEnd; rowIndex++) {\n                        _loop_1(rowIndex, iEnd);\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            };\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            JSONConverter.prototype.getTable = function () {\n                return this.table;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            JSONConverter.defaultOptions = __assign(__assign({}, DataConverter.defaultOptions), { data: [], orientation: 'rows' });\n            return JSONConverter;\n        }(DataConverter));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/JSONConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js'], _modules['Data/Converters/JSONConverter.js']], function (DataConnector, U, JSONConverter) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from JSON structure\n         *\n         * @private\n         */\n        var JSONConnector = /** @class */ (function (_super) {\n            __extends(JSONConnector, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of JSONConnector.\n             *\n             * @param {JSONConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            function JSONConnector(options) {\n                var _this = this;\n                var mergedOptions = merge(JSONConnector.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.converter = new JSONConverter(mergedOptions);\n                _this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    _this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the JSON source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConnector#load\n             * @emits JSONConnector#afterLoad\n             */\n            JSONConnector.prototype.load = function (eventDetail) {\n                var connector = this, converter = connector.converter, table = connector.table, _a = connector.options, data = _a.data, dataUrl = _a.dataUrl, dataModifier = _a.dataModifier;\n                connector.emit({\n                    type: 'load',\n                    data: data,\n                    detail: eventDetail,\n                    table: table\n                });\n                return Promise\n                    .resolve(dataUrl ?\n                    fetch(dataUrl).then(function (json) { return json.json(); }) :\n                    data || [])\n                    .then(function (data) {\n                    if (data) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ data: data });\n                        table.setColumns(converter.getTable().getColumns());\n                        table.setRowKeysColumn(data.length);\n                    }\n                    return connector.setModifierOptions(dataModifier).then(function () { return data; });\n                })\n                    .then(function (data) {\n                    connector.emit({\n                        type: 'afterLoad',\n                        data: data,\n                        detail: eventDetail,\n                        table: table\n                    });\n                    return connector;\n                })['catch'](function (error) {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error: error,\n                        table: table\n                    });\n                    throw error;\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            JSONConnector.defaultOptions = {\n                data: [],\n                enablePolling: false,\n                dataRefreshRate: 0,\n                firstRowAsNames: true,\n                orientation: 'rows'\n            };\n            return JSONConnector;\n        }(DataConnector));\n        DataConnector.registerType('JSON', JSONConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/GoogleSheetsConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var merge = U.merge, uniqueKey = U.uniqueKey;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an Google Sheets to a table.\n         *\n         * @private\n         */\n        var GoogleSheetsConverter = /** @class */ (function (_super) {\n            __extends(GoogleSheetsConverter, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the GoogleSheetsConverter.\n             *\n             * @param {GoogleSheetsConverter.UserOptions} [options]\n             * Options for the GoogleSheetsConverter.\n             */\n            function GoogleSheetsConverter(options) {\n                var _this = this;\n                var mergedOptions = merge(GoogleSheetsConverter.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.columns = [];\n                _this.header = [];\n                _this.options = mergedOptions;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the parsing of the Google Sheet\n             *\n             * @param {GoogleSheetsConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits GoogleSheetsParser#parse\n             * @emits GoogleSheetsParser#afterParse\n             */\n            GoogleSheetsConverter.prototype.parse = function (options, eventDetail) {\n                var _a;\n                var converter = this, parseOptions = merge(converter.options, options);\n                var columns = (((_a = parseOptions.json) === null || _a === void 0 ? void 0 : _a.values) || []).map(function (column) { return column.slice(); });\n                if (columns.length === 0) {\n                    return false;\n                }\n                converter.header = [];\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n                // If beforeParse is defined, use it to modify the data\n                var beforeParse = parseOptions.beforeParse, json = parseOptions.json;\n                if (beforeParse && json) {\n                    columns = beforeParse(json.values);\n                }\n                var column;\n                converter.columns = columns;\n                for (var i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    column = columns[i];\n                    converter.header[i] = (parseOptions.firstRowAsNames ?\n                        \"\".concat(column.shift()) :\n                        uniqueKey());\n                    for (var j = 0, jEnd = column.length; j < jEnd; ++j) {\n                        if (column[j] && typeof column[j] === 'string') {\n                            var cellValue = converter.asGuessedType(column[j]);\n                            if (cellValue instanceof Date) {\n                                cellValue = cellValue.getTime();\n                            }\n                            converter.columns[i][j] = cellValue;\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n            };\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed Google Sheet\n             */\n            GoogleSheetsConverter.prototype.getTable = function () {\n                return DataConverter.getTableFromColumns(this.columns, this.header);\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            GoogleSheetsConverter.defaultOptions = __assign({}, DataConverter.defaultOptions);\n            return GoogleSheetsConverter;\n        }(DataConverter));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/GoogleSheetsConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/GoogleSheetsConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, GoogleSheetsConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests Google's response for error.\n         * @private\n         */\n        function isGoogleError(json) {\n            return (typeof json === 'object' && json &&\n                typeof json.error === 'object' && json.error &&\n                typeof json.error.code === 'number' &&\n                typeof json.error.message === 'string' &&\n                typeof json.error.status === 'string');\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @todo implement save, requires oauth2\n         */\n        var GoogleSheetsConnector = /** @class */ (function (_super) {\n            __extends(GoogleSheetsConnector, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of GoogleSheetsConnector\n             *\n             * @param {GoogleSheetsConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            function GoogleSheetsConnector(options) {\n                var _this = this;\n                var mergedOptions = merge(GoogleSheetsConnector.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.converter = new GoogleSheetsConverter(mergedOptions);\n                _this.options = mergedOptions;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Loads data from a Google Spreadsheet.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<this>}\n             * Same connector instance with modified table.\n             */\n            GoogleSheetsConnector.prototype.load = function (eventDetail) {\n                var connector = this, converter = connector.converter, table = connector.table, _a = connector.options, dataModifier = _a.dataModifier, dataRefreshRate = _a.dataRefreshRate, enablePolling = _a.enablePolling, firstRowAsNames = _a.firstRowAsNames, googleAPIKey = _a.googleAPIKey, googleSpreadsheetKey = _a.googleSpreadsheetKey, url = GoogleSheetsConnector.buildFetchURL(googleAPIKey, googleSpreadsheetKey, connector.options);\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table: table,\n                    url: url\n                });\n                return fetch(url)\n                    .then(function (response) { return (response.json()); })\n                    .then(function (json) {\n                    if (isGoogleError(json)) {\n                        throw new Error(json.error.message);\n                    }\n                    converter.parse({\n                        firstRowAsNames: firstRowAsNames,\n                        json: json\n                    });\n                    // If already loaded, clear the current table\n                    table.deleteColumns();\n                    table.setColumns(converter.getTable().getColumns());\n                    return connector.setModifierOptions(dataModifier);\n                })\n                    .then(function () {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table: table,\n                        url: url\n                    });\n                    // Polling\n                    if (enablePolling) {\n                        setTimeout(function () { return connector.load(); }, Math.max(dataRefreshRate || 0, 1) * 1000);\n                    }\n                    return connector;\n                })['catch'](function (error) {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error: error,\n                        table: table\n                    });\n                    throw error;\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            GoogleSheetsConnector.defaultOptions = {\n                googleAPIKey: '',\n                googleSpreadsheetKey: '',\n                worksheet: 1,\n                enablePolling: false,\n                dataRefreshRate: 2,\n                firstRowAsNames: true\n            };\n            return GoogleSheetsConnector;\n        }(DataConnector));\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GoogleSheetsConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates GoogleSheets API v4 URL.\n             * @private\n             */\n            function buildFetchURL(apiKey, sheetKey, options) {\n                if (options === void 0) { options = {}; }\n                return (\"https://sheets.googleapis.com/v4/spreadsheets/\".concat(sheetKey, \"/values/\") +\n                    (options.onlyColumnNames ?\n                        'A1:Z1' :\n                        buildQueryRange(options)) +\n                    '?alt=json' +\n                    (options.onlyColumnNames ?\n                        '' :\n                        '&dateTimeRenderOption=FORMATTED_STRING' +\n                            '&majorDimension=COLUMNS' +\n                            '&valueRenderOption=UNFORMATTED_VALUE') +\n                    '&prettyPrint=false' +\n                    \"&key=\".concat(apiKey));\n            }\n            GoogleSheetsConnector.buildFetchURL = buildFetchURL;\n            /**\n             * Creates sheets range.\n             * @private\n             */\n            function buildQueryRange(options) {\n                if (options === void 0) { options = {}; }\n                var endColumn = options.endColumn, endRow = options.endRow, googleSpreadsheetRange = options.googleSpreadsheetRange, startColumn = options.startColumn, startRow = options.startRow;\n                return googleSpreadsheetRange || ((alphabet[startColumn || 0] || 'A') +\n                    (Math.max((startRow || 0), 0) + 1) +\n                    ':' +\n                    (alphabet[pick(endColumn, 25)] || 'Z') +\n                    (endRow ?\n                        Math.max(endRow, 0) :\n                        'Z'));\n            }\n            GoogleSheetsConnector.buildQueryRange = buildQueryRange;\n        })(GoogleSheetsConnector || (GoogleSheetsConnector = {}));\n        DataConnector.registerType('GoogleSheets', GoogleSheetsConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/HTMLTableConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var merge = U.merge;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Row equal\n         */\n        function isRowEqual(row1, row2) {\n            var i = row1.length;\n            if (row2.length === i) {\n                while (--i) {\n                    if (row1[i] !== row2[i]) {\n                        return false;\n                    }\n                }\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an HTML table to a table.\n         *\n         * @private\n         */\n        var HTMLTableConverter = /** @class */ (function (_super) {\n            __extends(HTMLTableConverter, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the HTMLTableConverter.\n             *\n             * @param {HTMLTableConverter.UserOptions} [options]\n             * Options for the HTMLTableConverter.\n             */\n            function HTMLTableConverter(options) {\n                var _this = this;\n                var mergedOptions = merge(HTMLTableConverter.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.columns = [];\n                _this.headers = [];\n                _this.options = mergedOptions;\n                if (mergedOptions.tableElement) {\n                    _this.tableElement = mergedOptions.tableElement;\n                    _this.tableElementID = mergedOptions.tableElement.id;\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Exports the dataconnector as an HTML string, using the options\n             * provided on      *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {HTMLTableConnector.ExportOptions} [options]\n             * Options that override default or existing export options.\n             *\n             * @return {string}\n             * HTML from the current dataTable.\n             */\n            HTMLTableConverter.prototype.export = function (connector, options) {\n                if (options === void 0) { options = this.options; }\n                var exportNames = (options.firstRowAsNames !== false), useMultiLevelHeaders = options.useMultiLevelHeaders;\n                var columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), htmlRows = [], columnsCount = columnNames.length;\n                var rowArray = [];\n                var tableHead = '';\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    var subcategories = [];\n                    // If using multilevel headers, the first value\n                    // of each column is a subcategory\n                    if (useMultiLevelHeaders) {\n                        for (var _i = 0, columnNames_1 = columnNames; _i < columnNames_1.length; _i++) {\n                            var name_1 = columnNames_1[_i];\n                            var subhead = (columns[name_1].shift() || '').toString();\n                            subcategories.push(subhead);\n                        }\n                        tableHead = this.getTableHeaderHTML(columnNames, subcategories, options);\n                    }\n                    else {\n                        tableHead = this.getTableHeaderHTML(void 0, columnNames, options);\n                    }\n                }\n                for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    var columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    for (var rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        var cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Alternative: Datatype from HTML attribute with\n                        // connector.whatIs(columnName)\n                        if (!(typeof cellValue === 'string' ||\n                            typeof cellValue === 'number' ||\n                            typeof cellValue === 'undefined')) {\n                            cellValue = (cellValue || '').toString();\n                        }\n                        rowArray[rowIndex][columnIndex] = this.getCellHTMLFromValue(columnIndex ? 'td' : 'th', null, columnIndex ? '' : 'scope=\"row\"', cellValue);\n                        // On the final column, push the row to the array\n                        if (columnIndex === columnsCount - 1) {\n                            htmlRows.push('<tr>' +\n                                rowArray[rowIndex].join('') +\n                                '</tr>');\n                        }\n                    }\n                }\n                var caption = '';\n                // Add table caption\n                // Current exportdata falls back to chart title\n                // but that should probably be handled elsewhere?\n                if (options.tableCaption) {\n                    caption = '<caption class=\"highcharts-table-caption\">' +\n                        options.tableCaption +\n                        '</caption>';\n                }\n                return ('<table>' +\n                    caption +\n                    tableHead +\n                    '<tbody>' +\n                    htmlRows.join('') +\n                    '</tbody>' +\n                    '</table>');\n            };\n            /**\n             * Get table cell markup from row data.\n             */\n            HTMLTableConverter.prototype.getCellHTMLFromValue = function (tag, classes, attrs, value, decimalPoint) {\n                var val = value, className = 'text' + (classes ? ' ' + classes : '');\n                // Convert to string if number\n                if (typeof val === 'number') {\n                    val = val.toString();\n                    if (decimalPoint === ',') {\n                        val = val.replace('.', decimalPoint);\n                    }\n                    className = 'number';\n                }\n                else if (!value) {\n                    val = '';\n                    className = 'empty';\n                }\n                return '<' + tag + (attrs ? ' ' + attrs : '') +\n                    ' class=\"' + className + '\">' +\n                    val + '</' + tag + '>';\n            };\n            /**\n             * Get table header markup from row data.\n             */\n            HTMLTableConverter.prototype.getTableHeaderHTML = function (topheaders, subheaders, options) {\n                if (topheaders === void 0) { topheaders = []; }\n                if (subheaders === void 0) { subheaders = []; }\n                if (options === void 0) { options = this.options; }\n                var useMultiLevelHeaders = options.useMultiLevelHeaders, useRowspanHeaders = options.useRowspanHeaders;\n                var html = '<thead>', i = 0, len = subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n                // Clean up multiple table headers. Chart.getDataRows() returns two\n                // levels of headers when using multilevel, not merged. We need to\n                // merge identical headers, remove redundant headers, and keep it\n                // all marked up nicely.\n                if (useMultiLevelHeaders &&\n                    topheaders &&\n                    subheaders &&\n                    !isRowEqual(topheaders, subheaders)) {\n                    html += '<tr>';\n                    for (; i < len; ++i) {\n                        cur = topheaders[i];\n                        next = topheaders[i + 1];\n                        if (cur === next) {\n                            ++curColspan;\n                        }\n                        else if (curColspan) {\n                            // Ended colspan\n                            // Add cur to HTML with colspan.\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\" ' +\n                                'colspan=\"' + (curColspan + 1) + '\"', cur);\n                            curColspan = 0;\n                        }\n                        else {\n                            // Cur is standalone. If it is same as sublevel,\n                            // remove sublevel and add just toplevel.\n                            if (cur === subheaders[i]) {\n                                if (useRowspanHeaders) {\n                                    rowspan = 2;\n                                    delete subheaders[i];\n                                }\n                                else {\n                                    rowspan = 1;\n                                    subheaders[i] = '';\n                                }\n                            }\n                            else {\n                                rowspan = 1;\n                            }\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\"' +\n                                (rowspan > 1 ?\n                                    ' valign=\"top\" rowspan=\"' + rowspan + '\"' :\n                                    ''), cur);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                // Add the subheaders (the only headers if not using multilevels)\n                if (subheaders) {\n                    html += '<tr>';\n                    for (i = 0, len = subheaders.length; i < len; ++i) {\n                        if (typeof subheaders[i] !== 'undefined') {\n                            html += this.getCellHTMLFromValue('th', null, 'scope=\"col\"', subheaders[i]);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</thead>';\n                return html;\n            };\n            /**\n             * Initiates the parsing of the HTML table\n             *\n             * @param {HTMLTableConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             * @emits HTMLTableParser#parseError\n             */\n            HTMLTableConverter.prototype.parse = function (options, eventDetail) {\n                var converter = this, columns = [], headers = [], parseOptions = merge(converter.options, options), endRow = parseOptions.endRow, startColumn = parseOptions.startColumn, endColumn = parseOptions.endColumn, firstRowAsNames = parseOptions.firstRowAsNames, tableHTML = parseOptions.tableElement || this.tableElement;\n                if (!(tableHTML instanceof HTMLElement)) {\n                    converter.emit({\n                        type: 'parseError',\n                        columns: columns,\n                        detail: eventDetail,\n                        headers: headers,\n                        error: 'Not a valid HTML Table'\n                    });\n                    return;\n                }\n                converter.tableElement = tableHTML;\n                converter.tableElementID = tableHTML.id;\n                this.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                var rows = tableHTML.getElementsByTagName('tr'), rowsCount = rows.length;\n                var rowIndex = 0, item, startRow = parseOptions.startRow;\n                // Insert headers from the first row\n                if (firstRowAsNames && rowsCount) {\n                    var items = rows[0].children, itemsLength = items.length;\n                    for (var i = startColumn; i < itemsLength; i++) {\n                        if (i > endColumn) {\n                            break;\n                        }\n                        item = items[i];\n                        if (item.tagName === 'TD' ||\n                            item.tagName === 'TH') {\n                            headers.push(item.innerHTML);\n                        }\n                    }\n                    startRow++;\n                }\n                while (rowIndex < rowsCount) {\n                    if (rowIndex >= startRow && rowIndex <= endRow) {\n                        var columnsInRow = rows[rowIndex].children, columnsInRowLength = columnsInRow.length;\n                        var columnIndex = 0;\n                        while (columnIndex < columnsInRowLength) {\n                            var relativeColumnIndex = columnIndex - startColumn, row = columns[relativeColumnIndex];\n                            item = columnsInRow[columnIndex];\n                            if ((item.tagName === 'TD' ||\n                                item.tagName === 'TH') &&\n                                (columnIndex >= startColumn &&\n                                    columnIndex <= endColumn)) {\n                                if (!columns[relativeColumnIndex]) {\n                                    columns[relativeColumnIndex] = [];\n                                }\n                                var cellValue = converter.asGuessedType(item.innerHTML);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                columns[relativeColumnIndex][rowIndex - startRow] = cellValue;\n                                // Loop over all previous indices and make sure\n                                // they are nulls, not undefined.\n                                var i = 1;\n                                while (rowIndex - startRow >= i &&\n                                    row[rowIndex - startRow - i] === void 0) {\n                                    row[rowIndex - startRow - i] = null;\n                                    i++;\n                                }\n                            }\n                            columnIndex++;\n                        }\n                    }\n                    rowIndex++;\n                }\n                this.columns = columns;\n                this.headers = headers;\n                this.emit({\n                    type: 'afterParse',\n                    columns: columns,\n                    detail: eventDetail,\n                    headers: headers\n                });\n            };\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed HTML table\n             */\n            HTMLTableConverter.prototype.getTable = function () {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            HTMLTableConverter.defaultOptions = __assign(__assign({}, DataConverter.defaultOptions), { useRowspanHeaders: true, useMultiLevelHeaders: true });\n            return HTMLTableConverter;\n        }(DataConverter));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/HTMLTableConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Globals.js'], _modules['Data/Converters/HTMLTableConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, H, HTMLTableConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var win = H.win;\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a data connector from an HTML table.\n         *\n         * @private\n         */\n        var HTMLTableConnector = /** @class */ (function (_super) {\n            __extends(HTMLTableConnector, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of HTMLTableConnector.\n             *\n             * @param {HTMLTableConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            function HTMLTableConnector(options) {\n                var _this = this;\n                var mergedOptions = merge(HTMLTableConnector.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.converter = new HTMLTableConverter(mergedOptions);\n                _this.options = mergedOptions;\n                return _this;\n            }\n            /**\n             * Initiates creating the dataconnector from the HTML table\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits HTMLTableConnector#load\n             * @emits HTMLTableConnector#afterLoad\n             * @emits HTMLTableConnector#loadError\n             */\n            HTMLTableConnector.prototype.load = function (eventDetail) {\n                var connector = this, converter = connector.converter, table = connector.table, _a = connector.options, dataModifier = _a.dataModifier, tableHTML = _a.table;\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table: table,\n                    tableElement: connector.tableElement\n                });\n                var tableElement;\n                if (typeof tableHTML === 'string') {\n                    connector.tableID = tableHTML;\n                    tableElement = win.document.getElementById(tableHTML);\n                }\n                else {\n                    tableElement = tableHTML;\n                    connector.tableID = tableElement.id;\n                }\n                connector.tableElement = tableElement || void 0;\n                if (!connector.tableElement) {\n                    var error = 'HTML table not provided, or element with ID not found';\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error: error,\n                        table: table\n                    });\n                    return Promise.reject(new Error(error));\n                }\n                converter.parse(merge({ tableElement: connector.tableElement }, connector.options), eventDetail);\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                table.setColumns(converter.getTable().getColumns());\n                return connector\n                    .setModifierOptions(dataModifier)\n                    .then(function () {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table: table,\n                        tableElement: connector.tableElement\n                    });\n                    return connector;\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            HTMLTableConnector.defaultOptions = {\n                table: ''\n            };\n            return HTMLTableConnector;\n        }(DataConnector));\n        DataConnector.registerType('HTMLTable', HTMLTableConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConnector;\n    });\n    _registerModule(_modules, 'Data/Modifiers/ChainModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Modifies a table with the help of modifiers in an ordered chain.\n         *\n         */\n        var ChainModifier = /** @class */ (function (_super) {\n            __extends(ChainModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the modifier chain.\n             *\n             * @param {Partial<ChainModifier.Options>} [options]\n             * Options to configure the modifier chain.\n             *\n             * @param {...DataModifier} [chain]\n             * Ordered chain of modifiers.\n             */\n            function ChainModifier(options) {\n                var chain = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    chain[_i - 1] = arguments[_i];\n                }\n                var _this = _super.call(this) || this;\n                _this.chain = chain;\n                _this.options = merge(ChainModifier.defaultOptions, options);\n                var optionsChain = _this.options.chain || [];\n                for (var i = 0, iEnd = optionsChain.length, modifierOptions = void 0, ModifierClass = void 0; i < iEnd; ++i) {\n                    modifierOptions = optionsChain[i];\n                    if (!modifierOptions.type) {\n                        continue;\n                    }\n                    ModifierClass = DataModifier.types[modifierOptions.type];\n                    if (ModifierClass) {\n                        chain.push(new ModifierClass(modifierOptions));\n                    }\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a configured modifier to the end of the modifier chain. Please note,\n             * that the modifier can be added multiple times.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to add.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            ChainModifier.prototype.add = function (modifier, eventDetail) {\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier: modifier\n                });\n                this.chain.push(modifier);\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier: modifier\n                });\n            };\n            /**\n             * Clears all modifiers from the chain.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            ChainModifier.prototype.clear = function (eventDetail) {\n                this.emit({\n                    type: 'clearChain',\n                    detail: eventDetail\n                });\n                this.chain.length = 0;\n                this.emit({\n                    type: 'afterClearChain',\n                    detail: eventDetail\n                });\n            };\n            /**\n             * Applies several modifications to the table and returns a modified copy of\n             * the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            ChainModifier.prototype.modify = function (table, eventDetail) {\n                var _this = this;\n                var modifiers = (this.options.reverse ?\n                    this.chain.slice().reverse() :\n                    this.chain.slice());\n                if (table.modified === table) {\n                    table.modified = table.clone(false, eventDetail);\n                }\n                var promiseChain = Promise.resolve(table);\n                var _loop_1 = function (i, iEnd) {\n                    var modifier = modifiers[i];\n                    promiseChain = promiseChain.then(function (chainTable) {\n                        return modifier.modify(chainTable.modified, eventDetail);\n                    });\n                };\n                for (var i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                    _loop_1(i, iEnd);\n                }\n                promiseChain = promiseChain.then(function (chainTable) {\n                    table.modified.deleteColumns();\n                    table.modified.setColumns(chainTable.modified.getColumns());\n                    return table;\n                });\n                promiseChain = promiseChain['catch'](function (error) {\n                    _this.emit({\n                        type: 'error',\n                        detail: eventDetail,\n                        table: table\n                    });\n                    throw error;\n                });\n                return promiseChain;\n            };\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            ChainModifier.prototype.modifyCell = function (table, columnName, rowIndex, cellValue, eventDetail) {\n                var modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain);\n                if (modifiers.length) {\n                    var clone = table.clone();\n                    for (var i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyCell(clone, columnName, rowIndex, cellValue, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            ChainModifier.prototype.modifyColumns = function (table, columns, rowIndex, eventDetail) {\n                var modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    var clone = table.clone();\n                    for (var i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyColumns(clone, columns, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            ChainModifier.prototype.modifyRows = function (table, rows, rowIndex, eventDetail) {\n                var modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    var clone = table.clone();\n                    for (var i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyRows(clone, rows, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            };\n            /**\n             * Applies several modifications to the table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table as a reference.\n             *\n             * @emits ChainDataModifier#execute\n             * @emits ChainDataModifier#afterExecute\n             */\n            ChainModifier.prototype.modifyTable = function (table, eventDetail) {\n                var chain = this;\n                chain.emit({\n                    type: 'modify',\n                    detail: eventDetail,\n                    table: table\n                });\n                var modifiers = (chain.options.reverse ?\n                    chain.chain.reverse() :\n                    chain.chain.slice());\n                var modified = table.modified;\n                for (var i = 0, iEnd = modifiers.length, modifier = void 0; i < iEnd; ++i) {\n                    modifier = modifiers[i];\n                    modified = modifier.modifyTable(modified, eventDetail).modified;\n                }\n                table.modified = modified;\n                chain.emit({\n                    type: 'afterModify',\n                    detail: eventDetail,\n                    table: table\n                });\n                return table;\n            };\n            /**\n             * Removes a configured modifier from all positions in the modifier chain.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to remove.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            ChainModifier.prototype.remove = function (modifier, eventDetail) {\n                var modifiers = this.chain;\n                this.emit({\n                    type: 'removeModifier',\n                    detail: eventDetail,\n                    modifier: modifier\n                });\n                modifiers.splice(modifiers.indexOf(modifier), 1);\n                this.emit({\n                    type: 'afterRemoveModifier',\n                    detail: eventDetail,\n                    modifier: modifier\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default option for the ordered modifier chain.\n             */\n            ChainModifier.defaultOptions = {\n                type: 'Chain'\n            };\n            return ChainModifier;\n        }(DataModifier));\n        DataModifier.registerType('Chain', ChainModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChainModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/InvertModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Inverts columns and rows in a table.\n         *\n         * @private\n         */\n        var InvertModifier = /** @class */ (function (_super) {\n            __extends(InvertModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the invert modifier.\n             *\n             * @param {Partial<InvertModifier.Options>} [options]\n             * Options to configure the invert modifier.\n             */\n            function InvertModifier(options) {\n                var _this = _super.call(this) || this;\n                _this.options = merge(InvertModifier.defaultOptions, options);\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            InvertModifier.prototype.modifyCell = function (table, columnName, rowIndex, cellValue, eventDetail) {\n                var modified = table.modified, modifiedRowIndex = modified.getRowIndexBy('columnNames', columnName);\n                if (typeof modifiedRowIndex === 'undefined') {\n                    modified.setColumns(this.modifyTable(table.clone()).getColumns(), void 0, eventDetail);\n                }\n                else {\n                    modified.setCell(\"\".concat(rowIndex), modifiedRowIndex, cellValue, eventDetail);\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            InvertModifier.prototype.modifyColumns = function (table, columns, rowIndex, eventDetail) {\n                var modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                var columnNames = table.getColumnNames(), reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                columnNames = Object.keys(columns);\n                for (var i = 0, iEnd = columnNames.length, column = void 0, columnName = void 0, modifiedRowIndex = void 0; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    modifiedRowIndex = (modified.getRowIndexBy('columnNames', columnName) ||\n                        modified.getRowCount());\n                    for (var j = 0, j2 = rowIndex, jEnd = column.length; j < jEnd; ++j, ++j2) {\n                        modified.setCell(\"\".concat(j2), modifiedRowIndex, column[j], eventDetail);\n                    }\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            InvertModifier.prototype.modifyRows = function (table, rows, rowIndex, eventDetail) {\n                var columnNames = table.getColumnNames(), modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                var reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                for (var i = 0, i2 = rowIndex, iEnd = rows.length, row = void 0; i < iEnd; ++i, ++i2) {\n                    row = rows[i];\n                    if (row instanceof Array) {\n                        modified.setColumn(\"\".concat(i2), row);\n                    }\n                    else {\n                        for (var j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            modified.setCell(\"\".concat(i2), j, row[columnNames[j]], eventDetail);\n                        }\n                    }\n                }\n                return table;\n            };\n            /**\n             * Inverts rows and columns in the table.\n             *\n             * @param {DataTable} table\n             * Table to invert.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with inverted `modified` property as a reference.\n             */\n            InvertModifier.prototype.modifyTable = function (table, eventDetail) {\n                var modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table: table });\n                var modified = table.modified;\n                if (table.hasColumns(['columnNames'])) { // Inverted table\n                    var columnNames = ((table.deleteColumns(['columnNames']) || {})\n                        .columnNames || []).map(function (column) { return \"\".concat(column); }), columns = {};\n                    for (var i = 0, iEnd = table.getRowCount(), row = void 0; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[columnNames[i]] = row;\n                        }\n                    }\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                else { // Regular table\n                    var columns = {};\n                    for (var i = 0, iEnd = table.getRowCount(), row = void 0; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[\"\".concat(i)] = row;\n                        }\n                    }\n                    columns.columnNames = table.getColumnNames();\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table: table });\n                return table;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options for the invert modifier.\n             */\n            InvertModifier.defaultOptions = {\n                type: 'Invert'\n            };\n            return InvertModifier;\n        }(DataModifier));\n        DataModifier.registerType('Invert', InvertModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return InvertModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/MathModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/Formula/FormulaParser.js'], _modules['Data/Formula/FormulaProcessor.js']], function (DataModifier, FormulaParser, FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Replaces formula strings in a table with calculated values.\n         *\n         * @class\n         * @name Highcharts.DataModifier.types.MathModifier\n         * @augments Highcharts.DataModifier\n         */\n        var MathModifier = /** @class */ (function (_super) {\n            __extends(MathModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function MathModifier(options) {\n                var _this = _super.call(this) || this;\n                _this.options = __assign(__assign({}, MathModifier.defaultOptions), options);\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            MathModifier.prototype.modifyTable = function (table, eventDetail) {\n                var modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table: table });\n                var alternativeSeparators = modifier.options.alternativeSeparators, formulaColumns = (modifier.options.formulaColumns ||\n                    table.getColumnNames()), modified = table.modified;\n                for (var i = 0, iEnd = formulaColumns.length, columnName = void 0; i < iEnd; ++i) {\n                    columnName = formulaColumns[i];\n                    if (formulaColumns.indexOf(columnName) >= 0) {\n                        modified.setColumn(columnName, modifier.processColumn(table, columnName));\n                    }\n                }\n                var columnFormulas = (modifier.options.columnFormulas || []);\n                for (var i = 0, iEnd = columnFormulas.length, columnFormula = void 0, formula = void 0; i < iEnd; ++i) {\n                    columnFormula = columnFormulas[i];\n                    formula = FormulaParser.parseFormula(columnFormula.formula, alternativeSeparators);\n                    modified.setColumn(columnFormula.column, modifier.processColumnFormula(formula, table, columnFormula.rowStart, columnFormula.rowEnd));\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table: table });\n                return table;\n            };\n            /**\n             * Process a column by replacing formula strings with calculated values.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to extract column from and use as reference.\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of column to process.\n             *\n             * @param {number} rowIndex\n             * Row index to start the replacing process from.\n             *\n             * @return {Highcharts.DataTableColumn}\n             * Returns the processed table column.\n             */\n            MathModifier.prototype.processColumn = function (table, columnNameOrAlias, rowIndex) {\n                if (rowIndex === void 0) { rowIndex = 0; }\n                var alternativeSeparators = this.options.alternativeSeparators, column = (table.getColumn(columnNameOrAlias, true) || [])\n                    .slice(rowIndex > 0 ? rowIndex : 0);\n                for (var i = 0, iEnd = column.length, cacheFormula = [], cacheString = '', cell = void 0; i < iEnd; ++i) {\n                    cell = column[i];\n                    if (typeof cell === 'string' &&\n                        cell[0] === '=') {\n                        try {\n                            // Use cache while formula string is repetitive\n                            cacheFormula = (cacheString === cell ?\n                                cacheFormula :\n                                FormulaParser.parseFormula(cell.substring(1), alternativeSeparators));\n                            // Process parsed formula string\n                            column[i] =\n                                FormulaProcessor.processFormula(cacheFormula, table);\n                        }\n                        catch (_a) {\n                            column[i] = NaN;\n                        }\n                    }\n                }\n                return column;\n            };\n            /**\n             * Process a column by replacing cell values with calculated values from a\n             * given formula.\n             *\n             * @private\n             *\n             * @param {Highcharts.Formula} formula\n             * Formula to use for processing.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to extract column from and use as reference.\n             *\n             * @param {number} rowStart\n             * Row index to start the replacing process from.\n             *\n             * @param {number} rowEnd\n             * Row index to end the replacing process.\n             *\n             * @return {Highcharts.DataTableColumn}\n             * Returns the processed table column.\n             */\n            MathModifier.prototype.processColumnFormula = function (formula, table, rowStart, rowEnd) {\n                if (rowStart === void 0) { rowStart = 0; }\n                if (rowEnd === void 0) { rowEnd = table.getRowCount(); }\n                rowStart = rowStart >= 0 ? rowStart : 0;\n                rowEnd = rowEnd >= 0 ? rowEnd : table.getRowCount() + rowEnd;\n                var column = [], modified = table.modified;\n                for (var i = 0, iEnd = (rowEnd - rowStart); i < iEnd; ++i) {\n                    try {\n                        column[i] = FormulaProcessor.processFormula(formula, modified);\n                    }\n                    catch (_a) {\n                        column[i] = NaN;\n                    }\n                    finally {\n                        formula = FormulaProcessor.translateReferences(formula, 0, 1);\n                    }\n                }\n                return column;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options of MathModifier.\n             * @private\n             */\n            MathModifier.defaultOptions = {\n                type: 'Math',\n                alternativeSeparators: false\n            };\n            return MathModifier;\n        }(DataModifier));\n        DataModifier.registerType('Math', MathModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MathModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/RangeModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Filters out table rows with a specific value range.\n         *\n         */\n        var RangeModifier = /** @class */ (function (_super) {\n            __extends(RangeModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            function RangeModifier(options) {\n                var _this = _super.call(this) || this;\n                _this.options = merge(RangeModifier.defaultOptions, options);\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Replaces table rows with filtered rows.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            RangeModifier.prototype.modifyTable = function (table, eventDetail) {\n                var modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table: table });\n                var _a = modifier.options, additive = _a.additive, ranges = _a.ranges, strict = _a.strict;\n                if (ranges.length) {\n                    var modified = table.modified;\n                    var columns = table.getColumns(), rows = [];\n                    for (var i = 0, iEnd = ranges.length, range = void 0, rangeColumn = void 0; i < iEnd; ++i) {\n                        range = ranges[i];\n                        if (strict &&\n                            typeof range.minValue !== typeof range.maxValue) {\n                            continue;\n                        }\n                        if (i > 0 && !additive) {\n                            modified.deleteRows();\n                            modified.setRows(rows);\n                            columns = modified.getColumns();\n                            rows = [];\n                        }\n                        rangeColumn = (columns[range.column] || []);\n                        for (var j = 0, jEnd = rangeColumn.length, cell = void 0, row = void 0; j < jEnd; ++j) {\n                            cell = rangeColumn[j];\n                            switch (typeof cell) {\n                                default:\n                                    continue;\n                                case 'boolean':\n                                case 'number':\n                                case 'string':\n                                    break;\n                            }\n                            if (strict &&\n                                typeof cell !== typeof range.minValue) {\n                                continue;\n                            }\n                            if (cell >= range.minValue &&\n                                cell <= range.maxValue) {\n                                row = (additive ?\n                                    table.getRow(j) :\n                                    modified.getRow(j));\n                                if (row) {\n                                    rows.push(row);\n                                }\n                            }\n                        }\n                    }\n                    modified.deleteRows();\n                    modified.setRows(rows);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table: table });\n                return table;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options for the range modifier.\n             */\n            RangeModifier.defaultOptions = {\n                type: 'Range',\n                ranges: []\n            };\n            return RangeModifier;\n        }(DataModifier));\n        DataModifier.registerType('Range', RangeModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RangeModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/SortModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Sort table rows according to values of a column.\n         *\n         */\n        var SortModifier = /** @class */ (function (_super) {\n            __extends(SortModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeDataModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            function SortModifier(options) {\n                var _this = _super.call(this) || this;\n                _this.options = merge(SortModifier.defaultOptions, options);\n                return _this;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            SortModifier.ascending = function (a, b) {\n                return ((a || 0) < (b || 0) ? -1 :\n                    (a || 0) > (b || 0) ? 1 :\n                        0);\n            };\n            SortModifier.descending = function (a, b) {\n                return ((b || 0) < (a || 0) ? -1 :\n                    (b || 0) > (a || 0) ? 1 :\n                        0);\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns index and row for sort reference.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table with rows to reference.\n             *\n             * @return {Array<SortModifier.RowReference>}\n             * Array of row references.\n             */\n            SortModifier.prototype.getRowReferences = function (table) {\n                var rows = table.getRows(), rowReferences = [];\n                for (var i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rowReferences.push({\n                        index: i,\n                        row: rows[i]\n                    });\n                }\n                return rowReferences;\n            };\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            SortModifier.prototype.modifyCell = function (table, columnName, rowIndex, cellValue, eventDetail) {\n                var modifier = this, _a = modifier.options, orderByColumn = _a.orderByColumn, orderInColumn = _a.orderInColumn;\n                if (columnName === orderByColumn) {\n                    if (orderInColumn) {\n                        table.modified.setCell(columnName, rowIndex, cellValue);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            SortModifier.prototype.modifyColumns = function (table, columns, rowIndex, eventDetail) {\n                var modifier = this, _a = modifier.options, orderByColumn = _a.orderByColumn, orderInColumn = _a.orderInColumn, columnNames = Object.keys(columns);\n                if (columnNames.indexOf(orderByColumn) > -1) {\n                    if (orderInColumn &&\n                        columns[columnNames[0]].length) {\n                        table.modified.setColumns(columns, rowIndex);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            SortModifier.prototype.modifyRows = function (table, rows, rowIndex, eventDetail) {\n                var modifier = this, _a = modifier.options, orderByColumn = _a.orderByColumn, orderInColumn = _a.orderInColumn;\n                if (orderInColumn &&\n                    rows.length) {\n                    table.modified.setRows(rows, rowIndex);\n                    table.modified.setColumn(orderInColumn, modifier\n                        .modifyTable(new DataTable({\n                        columns: table\n                            .getColumns([orderByColumn, orderInColumn])\n                    }))\n                        .modified\n                        .getColumn(orderInColumn));\n                }\n                else {\n                    modifier.modifyTable(table, eventDetail);\n                }\n                return table;\n            };\n            /**\n             * Sorts rows in the table.\n             *\n             * @param {DataTable} table\n             * Table to sort in.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            SortModifier.prototype.modifyTable = function (table, eventDetail) {\n                var _a;\n                var modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table: table });\n                var columnNames = table.getColumnNames(), rowCount = table.getRowCount(), rowReferences = this.getRowReferences(table), _b = modifier.options, direction = _b.direction, orderByColumn = _b.orderByColumn, orderInColumn = _b.orderInColumn, compare = (direction === 'asc' ?\n                    SortModifier.ascending :\n                    SortModifier.descending), orderByColumnIndex = columnNames.indexOf(orderByColumn), modified = table.modified;\n                if (orderByColumnIndex !== -1) {\n                    rowReferences.sort(function (a, b) { return compare(a.row[orderByColumnIndex], b.row[orderByColumnIndex]); });\n                }\n                if (orderInColumn) {\n                    var column = [];\n                    for (var i = 0; i < rowCount; ++i) {\n                        column[rowReferences[i].index] = i;\n                    }\n                    modified.setColumns((_a = {}, _a[orderInColumn] = column, _a));\n                }\n                else {\n                    var rows = [];\n                    for (var i = 0; i < rowCount; ++i) {\n                        rows.push(rowReferences[i].row);\n                    }\n                    modified.setRows(rows, 0);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table: table });\n                return table;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options to group table rows.\n             */\n            SortModifier.defaultOptions = {\n                type: 'Sort',\n                direction: 'desc',\n                orderByColumn: 'y'\n            };\n            return SortModifier;\n        }(DataModifier));\n        DataModifier.registerType('Sort', SortModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortModifier;\n    });\n    _registerModule(_modules, 'masters/modules/data-tools.src.js', [_modules['Core/Globals.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/DataCursor.js'], _modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataPool.js'], _modules['Data/DataTable.js'], _modules['Data/Formula/Formula.js']], function (Highcharts, DataConnector, DataConverter, DataCursor, DataModifier, DataPool, DataTable, Formula) {\n\n        var G = Highcharts;\n        G.DataConnector = G.DataConnector || DataConnector;\n        G.DataConverter = G.DataConverter || DataConverter;\n        G.DataCursor = G.DataCursor || DataCursor;\n        G.DataModifier = G.DataModifier || DataModifier;\n        G.DataPool = G.DataPool || DataPool;\n        G.DataTable = G.DataTable || DataTable;\n        G.Formula = G.Formula || Formula;\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","U","DataModifier","addEvent","fireEvent","merge","prototype","benchmark","dataTable","options","results","modifier","execute","modifyTable","emit","type","iterations","on","length","times","startTime","endTime","window","performance","now","push","e","modify","table","eventDetail","Promise","resolve","reject","modified","clone","modifyCell","columnName","rowIndex","cellValue","modifyColumns","columns","modifyRows","rows","callback","types","registerType","key","DataModifierClass","uniqueKey","DataTable","aliases","JSON","parse","stringify","autoId","id","rowCount","versionTag","rowKeysId","columnNames","Object","keys","thisColumns","i","iEnd","column","slice","Math","max","aliasKeys","thisAliases","alias","setRowKeysColumn","isNull","row","NULL","Array","skipColumns","tableOptions","tableClone","deleteColumnAlias","_a","deletedAlias","deleteColumns","deletedColumns","modifiedColumns","nColumns","deleteRows","deletedRows","modifiedRows","deletedCells","splice","j","jEnd","getCell","columnNameOrAlias","getCellAsBoolean","getCellAsNumber","useNaN","isNaN","parseFloat","concat","getCellAsString","getColumn","asReference","getColumns","getColumnAsNumbers","columnAsNumber","columnLength","getColumnNames","removeRowKeysColumn","columnNamesOrAliases","tableAliasMap","tableColumns","getModifier","getRow","getRows","getRowCount","getRowIndexBy","rowIndexOffset","indexOf","getRowObject","getRowObjects","i2","min","_i","columnNamesOrAliases_1","columnNamesOrAliases_2","getVersionTag","hasColumns","hasRowWith","renameColumn","newColumnName","moveRowKeysColumnToLast","setCell","setColumn","setColumns","tableModifier","reset","tableColumn","i_1","iEnd_1","tableColumnNames","nRows","keysArray","getRowKeysColumn","getRowIndexOriginal","idx","idxOrig","rowKeyCol","split","String","setModifier","promise","then","error","setRow","setRows","rowColumnNames","rowColumnName","indexRowCount","includes","rowKeyColumn","pos","pop","version","DataConnector","pick","metadata","defineProperty","get","polling","enumerable","configurable","describeColumn","name","columnMeta","connector","describeColumns","getColumnOrder","usePresentationState","names","sort","a","b","index","getSortedColumns","usePresentationOrder","load","save","Error","setColumnOrder","setModifierOptions","modifierOptions","_this","ModifierClass","startPolling","refreshTime","clearTimeout","_polling","setTimeout","stopPolling","whatIs","DataConnectorClass","isNumber","DataConverter","dateFormats","regex","parser","match","Date","UTC","NaN","alternative","d","year","getFullYear","mergedOptions","defaultOptions","regExpPoint","decimalPoint","decimalRegExp","RegExp","asBoolean","value","asNumber","asDate","timestamp","parseDate","asString","asGuessedType","typeMap","converter","guessType","call","decimalRegex","replace","test","getDate","deduceDateFormat","data","limit","thing","elem","stable","format","guessedFormat","madeDeduction","trim","parseInt","join","dateFormat","export","headers","getTable","result","trimedValue","innerTrimedValue","floatValue","dateFormatProp","getTime","getTimezoneOffset","str","inside","alternativeFormat","startColumn","endColumn","Number","MAX_VALUE","startRow","endRow","firstRowAsNames","switchRowsAndColumns","getTableFromColumns","DataCursor","stateMap","emittingRegister","listenerMap","addListener","tableId","state","listener","listeners","buildEmittingTag","cursor","firstRow","lastRow","emitCursor","event","lasting","cursors","getIndex","emittingTag","remitCursor","removeListener","toRange","defaultRange","_b","_c","_d","range","needle","columnNeedle","isEqual","cursorA","cursorB","isInRange","needleColumns","rangeColumns","every","toPositions","positions","rowEnd","columnEnd","connectors","DataPoolDefaults","DataPool","waiting","getConnector","connectorId","waitingList","connectorOptions","getConnectorOptions","loadConnector","getConnectorIds","connectorIds","getConnectorTable","isNewConnector","ConnectorClass","setConnectorOptions","instances","booleanRegExp","decimal1RegExp","decimal2RegExp","functionRegExp","operatorRegExp","rangeA1RegExp","rangeR1C1RegExp","referenceA1RegExp","referenceR1C1RegExp","extractParantheses","text","parantheseLevel","char","parantheseStart","substring","extractString","start","escaping","parseArgument","alternativeSeparators","beginColumnRelative","beginRowRelative","endColumnRelative","endRowRelative","beginColumn","beginRow","parseReferenceColumn","formula","parseFormula","next","columnRelative","rowRelative","reference","string","parantheses","parseArguments","argumentsSeparator","term","paranteses","position","code","factor","charCodeAt","pow","operators","isFormula","item","isFunction","isOperator","isRange","isReference","isValue","FormulaTypes","asLogicalStringRegExp","MAX_FALSE","MAX_STRING","MAX_TRUE","operatorPriority","processorFunctions","processorFunctionNameRegExp","asLogicalNumber","asLogicalString","toLowerCase","basicOperation","operator","x","y","round","getArgumentValue","arg","getRangeValues","processFunction","processFormula","values","cell","cells","getReferenceValue","operator2","formulaFunction","processor","getArgumentsValues","registerProcessorFunction","processorFunction","translateReferences","columnDelta","rowDelta","FormulaProcessor","ABS","abs","value2","AND","AVERAGE","count","AVERAGEA","COUNT","COUNTA","IF","ISNA","MAX","NEGATIVE_INFINITY","isFinite","MEDIAN","median","half","floor","MIN","POSITIVE_INFINITY","MOD","value1","getModeMap","modeMap","MULT","modeKeys","modeCount","SNGL","modeKey","keyValue","NOT","OR","PRODUCT","calculated","SUM","XOR","lastValue","FormulaParser","FormulaType","__assign","assign","t","s","n","arguments","p","extendStatics","__extends","setPrototypeOf","__proto__","TypeError","__","constructor","create","_super","CSVConverter","dataTypes","useLocalDecimalPoint","lineDelimiter","exportNames","itemDelimiter","toLocaleString","csvRows","columnsCount","rowArray","map","columnIndex","columnDataType","dataType","cellVal","lines","parserOptions","beforeParse","rowIt","csv","guessedItemDelimiter","guessDelimiter","offset","parseCSVRow","columnStr","rowNumber","guessedDecimalPoint","c","token","actualColumn","read","pushType","initialValue","guessed","points","commas","potDelimiters","linesCount","inStr","cn","cl","CSVConnector","enablePolling","dataRefreshRate","csvURL","dataModifier","fetch","response","isArray","objectEach","JSONConverter","orientation","shift","toString","this_1","_loop_1","columnNames_1","newRow_1","arrayWithPath","reduce","acc","JSONConnector","dataUrl","json","GoogleSheetsConverter","header","parseOptions","GoogleSheetsConnector","googleAPIKey","googleSpreadsheetKey","url","buildFetchURL","message","status","worksheet","alphabet","buildQueryRange","googleSpreadsheetRange","apiKey","sheetKey","onlyColumnNames","HTMLTableConverter","tableElement","tableElementID","useMultiLevelHeaders","htmlRows","tableHead","subcategories","subhead","getTableHeaderHTML","getCellHTMLFromValue","caption","tableCaption","tag","classes","attrs","val","className","topheaders","subheaders","cur","rowspan","useRowspanHeaders","html","len","curColspan","isRowEqual","row1","row2","tableHTML","HTMLElement","getElementsByTagName","rowsCount","items","children","itemsLength","tagName","innerHTML","columnsInRow","columnsInRowLength","relativeColumnIndex","H","HTMLTableConnector","tableID","document","getElementById","ChainModifier","chain","optionsChain","add","clear","modifiers","reverse","promiseChain","chainTable","remove","InvertModifier","modifiedRowIndex","modifiedColumnNames","j2","MathModifier","formulaColumns","processColumn","columnFormulas","columnFormula","processColumnFormula","rowStart","cacheFormula","cacheString","RangeModifier","additive","ranges","strict","rangeColumn","minValue","maxValue","SortModifier","ascending","descending","getRowReferences","rowReferences","orderByColumn","orderInColumn","direction","compare","orderByColumnIndex","Formula","G"],"rangeMappings":";;;;;;;;","mappings":"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"}