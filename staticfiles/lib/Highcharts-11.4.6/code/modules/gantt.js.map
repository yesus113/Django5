{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Gantt JS v11.4.6 (2024-07-08)\n *\n * Gantt series\n *\n * (c) 2016-2024 Lars A. V. Cabrera\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/gantt', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/ArrowSymbols.js', [], function () {\n        /* *\n         *\n         *  (c) 2017 Highsoft AS\n         *  Authors: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates an arrow symbol. Like a triangle, except not filled.\n         * ```\n         *                   o\n         *             o\n         *       o\n         * o\n         *       o\n         *             o\n         *                   o\n         * ```\n         *\n         * @private\n         * @function\n         *\n         * @param {number} x\n         *        x position of the arrow\n         *\n         * @param {number} y\n         *        y position of the arrow\n         *\n         * @param {number} w\n         *        width of the arrow\n         *\n         * @param {number} h\n         *        height of the arrow\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         Path array\n         */\n        function arrow(x, y, w, h) {\n            return [\n                ['M', x, y + h / 2],\n                ['L', x + w, y],\n                ['L', x, y + h / 2],\n                ['L', x + w, y + h]\n            ];\n        }\n        /**\n         * Creates a half-width arrow symbol. Like a triangle, except not filled.\n         * ```\n         *       o\n         *    o\n         * o\n         *    o\n         *       o\n         * ```\n         *\n         * @private\n         * @function\n         *\n         * @param {number} x\n         *        x position of the arrow\n         *\n         * @param {number} y\n         *        y position of the arrow\n         *\n         * @param {number} w\n         *        width of the arrow\n         *\n         * @param {number} h\n         *        height of the arrow\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         Path array\n         */\n        function arrowHalf(x, y, w, h) {\n            return arrow(x, y, w / 2, h);\n        }\n        /**\n         * @private\n         */\n        function compose(SVGRendererClass) {\n            const symbols = SVGRendererClass.prototype.symbols;\n            symbols.arrow = arrow;\n            symbols['arrow-filled'] = triangleLeft;\n            symbols['arrow-filled-half'] = triangleLeftHalf;\n            symbols['arrow-half'] = arrowHalf;\n            symbols['triangle-left'] = triangleLeft;\n            symbols['triangle-left-half'] = triangleLeftHalf;\n        }\n        /**\n         * Creates a left-oriented triangle.\n         * ```\n         *             o\n         *       ooooooo\n         * ooooooooooooo\n         *       ooooooo\n         *             o\n         * ```\n         *\n         * @private\n         * @function\n         *\n         * @param {number} x\n         *        x position of the triangle\n         *\n         * @param {number} y\n         *        y position of the triangle\n         *\n         * @param {number} w\n         *        width of the triangle\n         *\n         * @param {number} h\n         *        height of the triangle\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         Path array\n         */\n        function triangleLeft(x, y, w, h) {\n            return [\n                ['M', x + w, y],\n                ['L', x, y + h / 2],\n                ['L', x + w, y + h],\n                ['Z']\n            ];\n        }\n        /**\n         * Creates a half-width, left-oriented triangle.\n         * ```\n         *       o\n         *    oooo\n         * ooooooo\n         *    oooo\n         *       o\n         * ```\n         *\n         * @private\n         * @function\n         *\n         * @param {number} x\n         *        x position of the triangle\n         *\n         * @param {number} y\n         *        y position of the triangle\n         *\n         * @param {number} w\n         *        width of the triangle\n         *\n         * @param {number} h\n         *        height of the triangle\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         Path array\n         */\n        function triangleLeftHalf(x, y, w, h) {\n            return triangleLeft(x, y, w / 2, h);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ArrowSymbols = {\n            compose\n        };\n\n        return ArrowSymbols;\n    });\n    _registerModule(_modules, 'Gantt/Connection.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Ã˜ystein Moseng, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined, error, merge, objectEach } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const deg2rad = H.deg2rad, max = Math.max, min = Math.min;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Connection class. Used internally to represent a connection between two\n         * points.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Connection\n         *\n         * @param {Highcharts.Point} from\n         *        Connection runs from this Point.\n         *\n         * @param {Highcharts.Point} to\n         *        Connection runs to this Point.\n         *\n         * @param {Highcharts.ConnectorsOptions} [options]\n         *        Connection options.\n         */\n        class Connection {\n            constructor(from, to, options) {\n                this.init(from, to, options);\n            }\n            /**\n             * Initialize the Connection object. Used as constructor only.\n             *\n             * @function Highcharts.Connection#init\n             *\n             * @param {Highcharts.Point} from\n             *        Connection runs from this Point.\n             *\n             * @param {Highcharts.Point} to\n             *        Connection runs to this Point.\n             *\n             * @param {Highcharts.ConnectorsOptions} [options]\n             *        Connection options.\n             */\n            init(from, to, options) {\n                this.fromPoint = from;\n                this.toPoint = to;\n                this.options = options;\n                this.chart = from.series.chart;\n                this.pathfinder = this.chart.pathfinder;\n            }\n            /**\n             * Add (or update) this connection's path on chart. Stores reference to the\n             * created element on this.graphics.path.\n             *\n             * @function Highcharts.Connection#renderPath\n             *\n             * @param {Highcharts.SVGPathArray} path\n             *        Path to render, in array format. E.g. ['M', 0, 0, 'L', 10, 10]\n             *\n             * @param {Highcharts.SVGAttributes} [attribs]\n             *        SVG attributes for the path.\n             *\n             * @param {Partial<Highcharts.AnimationOptionsObject>} [animation]\n             *        Animation options for the rendering.\n             */\n            renderPath(path, attribs) {\n                const connection = this, chart = this.chart, styledMode = chart.styledMode, pathfinder = this.pathfinder, anim = {};\n                let pathGraphic = connection.graphics && connection.graphics.path;\n                // Add the SVG element of the pathfinder group if it doesn't exist\n                if (!pathfinder.group) {\n                    pathfinder.group = chart.renderer.g()\n                        .addClass('highcharts-pathfinder-group')\n                        .attr({ zIndex: -1 })\n                        .add(chart.seriesGroup);\n                }\n                // Shift the group to compensate for plot area.\n                // Note: Do this always (even when redrawing a path) to avoid issues\n                // when updating chart in a way that changes plot metrics.\n                pathfinder.group.translate(chart.plotLeft, chart.plotTop);\n                // Create path if does not exist\n                if (!(pathGraphic && pathGraphic.renderer)) {\n                    pathGraphic = chart.renderer.path()\n                        .add(pathfinder.group);\n                    if (!styledMode) {\n                        pathGraphic.attr({\n                            opacity: 0\n                        });\n                    }\n                }\n                // Set path attribs and animate to the new path\n                pathGraphic.attr(attribs);\n                anim.d = path;\n                if (!styledMode) {\n                    anim.opacity = 1;\n                }\n                pathGraphic.animate(anim);\n                // Store reference on connection\n                this.graphics = this.graphics || {};\n                this.graphics.path = pathGraphic;\n            }\n            /**\n             * Calculate and add marker graphics for connection to the chart. The\n             * created/updated elements are stored on this.graphics.start and\n             * this.graphics.end.\n             *\n             * @function Highcharts.Connection#addMarker\n             *\n             * @param {string} type\n             *        Marker type, either 'start' or 'end'.\n             *\n             * @param {Highcharts.ConnectorsMarkerOptions} options\n             *        All options for this marker. Not calculated or merged with other\n             *        options.\n             *\n             * @param {Highcharts.SVGPathArray} path\n             *        Connection path in array format. This is used to calculate the\n             *        rotation angle of the markers.\n             */\n            addMarker(type, options, path) {\n                const connection = this, chart = connection.fromPoint.series.chart, pathfinder = chart.pathfinder, renderer = chart.renderer, point = (type === 'start' ?\n                    connection.fromPoint :\n                    connection.toPoint), anchor = point.getPathfinderAnchorPoint(options);\n                let markerVector, radians, rotation, box, width, height, pathVector, segment;\n                if (!options.enabled) {\n                    return;\n                }\n                // Last vector before start/end of path, used to get angle\n                if (type === 'start') {\n                    segment = path[1];\n                }\n                else { // 'end'\n                    segment = path[path.length - 2];\n                }\n                if (segment && segment[0] === 'M' || segment[0] === 'L') {\n                    pathVector = {\n                        x: segment[1],\n                        y: segment[2]\n                    };\n                    // Get angle between pathVector and anchor point and use it to\n                    // create marker position.\n                    radians = point.getRadiansToVector(pathVector, anchor);\n                    markerVector = point.getMarkerVector(radians, options.radius, anchor);\n                    // Rotation of marker is calculated from angle between pathVector\n                    // and markerVector.\n                    // (Note:\n                    //  Used to recalculate radians between markerVector and pathVector,\n                    //  but this should be the same as between pathVector and anchor.)\n                    rotation = -radians / deg2rad;\n                    if (options.width && options.height) {\n                        width = options.width;\n                        height = options.height;\n                    }\n                    else {\n                        width = height = options.radius * 2;\n                    }\n                    // Add graphics object if it does not exist\n                    connection.graphics = connection.graphics || {};\n                    box = {\n                        x: markerVector.x - (width / 2),\n                        y: markerVector.y - (height / 2),\n                        width: width,\n                        height: height,\n                        rotation: rotation,\n                        rotationOriginX: markerVector.x,\n                        rotationOriginY: markerVector.y\n                    };\n                    if (!connection.graphics[type]) {\n                        // Create new marker element\n                        connection.graphics[type] = renderer\n                            .symbol(options.symbol)\n                            .addClass('highcharts-point-connecting-path-' + type + '-marker' +\n                            ' highcharts-color-' + this.fromPoint.colorIndex)\n                            .attr(box)\n                            .add(pathfinder.group);\n                        if (!renderer.styledMode) {\n                            connection.graphics[type].attr({\n                                fill: options.color || connection.fromPoint.color,\n                                stroke: options.lineColor,\n                                'stroke-width': options.lineWidth,\n                                opacity: 0\n                            })\n                                .animate({\n                                opacity: 1\n                            }, point.series.options.animation);\n                        }\n                    }\n                    else {\n                        connection.graphics[type].animate(box);\n                    }\n                }\n            }\n            /**\n             * Calculate and return connection path.\n             * Note: Recalculates chart obstacles on demand if they aren't calculated.\n             *\n             * @function Highcharts.Connection#getPath\n             *\n             * @param {Highcharts.ConnectorsOptions} options\n             *        Connector options. Not calculated or merged with other options.\n             *\n             * @return {object|undefined}\n             *         Calculated SVG path data in array format.\n             */\n            getPath(options) {\n                const pathfinder = this.pathfinder, chart = this.chart, algorithm = pathfinder.algorithms[options.type];\n                let chartObstacles = pathfinder.chartObstacles;\n                if (typeof algorithm !== 'function') {\n                    error('\"' + options.type + '\" is not a Pathfinder algorithm.');\n                    return {\n                        path: [],\n                        obstacles: []\n                    };\n                }\n                // This function calculates obstacles on demand if they don't exist\n                if (algorithm.requiresObstacles && !chartObstacles) {\n                    chartObstacles =\n                        pathfinder.chartObstacles =\n                            pathfinder.getChartObstacles(options);\n                    // If the algorithmMargin was computed, store the result in default\n                    // options.\n                    chart.options.connectors.algorithmMargin =\n                        options.algorithmMargin;\n                    // Cache some metrics too\n                    pathfinder.chartObstacleMetrics =\n                        pathfinder.getObstacleMetrics(chartObstacles);\n                }\n                // Get the SVG path\n                return algorithm(\n                // From\n                this.fromPoint.getPathfinderAnchorPoint(options.startMarker), \n                // To\n                this.toPoint.getPathfinderAnchorPoint(options.endMarker), merge({\n                    chartObstacles: chartObstacles,\n                    lineObstacles: pathfinder.lineObstacles || [],\n                    obstacleMetrics: pathfinder.chartObstacleMetrics,\n                    hardBounds: {\n                        xMin: 0,\n                        xMax: chart.plotWidth,\n                        yMin: 0,\n                        yMax: chart.plotHeight\n                    },\n                    obstacleOptions: {\n                        margin: options.algorithmMargin\n                    },\n                    startDirectionX: pathfinder.getAlgorithmStartDirection(options.startMarker)\n                }, options));\n            }\n            /**\n             * (re)Calculate and (re)draw the connection.\n             *\n             * @function Highcharts.Connection#render\n             */\n            render() {\n                const connection = this, fromPoint = connection.fromPoint, series = fromPoint.series, chart = series.chart, pathfinder = chart.pathfinder, attribs = {};\n                let options = merge(chart.options.connectors, series.options.connectors, fromPoint.options.connectors, connection.options);\n                // Set path attribs\n                if (!chart.styledMode) {\n                    attribs.stroke = options.lineColor || fromPoint.color;\n                    attribs['stroke-width'] = options.lineWidth;\n                    if (options.dashStyle) {\n                        attribs.dashstyle = options.dashStyle;\n                    }\n                }\n                attribs['class'] = // eslint-disable-line dot-notation\n                    'highcharts-point-connecting-path ' +\n                        'highcharts-color-' + fromPoint.colorIndex;\n                options = merge(attribs, options);\n                // Set common marker options\n                if (!defined(options.marker.radius)) {\n                    options.marker.radius = min(max(Math.ceil((options.algorithmMargin || 8) / 2) - 1, 1), 5);\n                }\n                // Get the path\n                const pathResult = connection.getPath(options), path = pathResult.path;\n                // Always update obstacle storage with obstacles from this path.\n                // We don't know if future calls will need this for their algorithm.\n                if (pathResult.obstacles) {\n                    pathfinder.lineObstacles =\n                        pathfinder.lineObstacles || [];\n                    pathfinder.lineObstacles =\n                        pathfinder.lineObstacles.concat(pathResult.obstacles);\n                }\n                // Add the calculated path to the pathfinder group\n                connection.renderPath(path, attribs);\n                // Render the markers\n                connection.addMarker('start', merge(options.marker, options.startMarker), path);\n                connection.addMarker('end', merge(options.marker, options.endMarker), path);\n            }\n            /**\n             * Destroy connection by destroying the added graphics elements.\n             *\n             * @function Highcharts.Connection#destroy\n             */\n            destroy() {\n                if (this.graphics) {\n                    objectEach(this.graphics, function (val) {\n                        val.destroy();\n                    });\n                    delete this.graphics;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * The default pathfinder algorithm to use for a chart. It is possible to define\n         * your own algorithms by adding them to the\n         * `Highcharts.Pathfinder.prototype.algorithms`\n         * object before the chart has been created.\n         *\n         * The default algorithms are as follows:\n         *\n         * `straight`:      Draws a straight line between the connecting\n         *                  points. Does not avoid other points when drawing.\n         *\n         * `simpleConnect`: Finds a path between the points using right angles\n         *                  only. Takes only starting/ending points into\n         *                  account, and will not avoid other points.\n         *\n         * `fastAvoid`:     Finds a path between the points using right angles\n         *                  only. Will attempt to avoid other points, but its\n         *                  focus is performance over accuracy. Works well with\n         *                  less dense datasets.\n         *\n         * @typedef {\"fastAvoid\"|\"simpleConnect\"|\"straight\"|string} Highcharts.PathfinderTypeValue\n         */\n        ''; // Keeps doclets above in JS file\n\n        return Connection;\n    });\n    _registerModule(_modules, 'Extensions/CurrentDateIndication.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, merge, pushUnique, wrap } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Show an indicator on the axis for the current date and time. Can be a\n         * boolean or a configuration object similar to\n         * [xAxis.plotLines](#xAxis.plotLines).\n         *\n         * @sample gantt/current-date-indicator/demo\n         *         Current date indicator enabled\n         * @sample gantt/current-date-indicator/object-config\n         *         Current date indicator with custom options\n         *\n         * @declare   Highcharts.CurrentDateIndicatorOptions\n         * @type      {boolean|CurrentDateIndicatorOptions}\n         * @default   true\n         * @extends   xAxis.plotLines\n         * @excluding value\n         * @product   gantt\n         * @apioption xAxis.currentDateIndicator\n         */\n        const defaultOptions = {\n            color: \"#ccd3ff\" /* Palette.highlightColor20 */,\n            width: 2,\n            /**\n             * @declare Highcharts.AxisCurrentDateIndicatorLabelOptions\n             */\n            label: {\n                /**\n                 * Format of the label. This options is passed as the fist argument to\n                 * [dateFormat](/class-reference/Highcharts.Time#dateFormat) function.\n                 *\n                 * @type      {string}\n                 * @default   %a, %b %d %Y, %H:%M\n                 * @product   gantt\n                 * @apioption xAxis.currentDateIndicator.label.format\n                 */\n                format: '%a, %b %d %Y, %H:%M',\n                formatter: function (value, format) {\n                    return this.axis.chart.time.dateFormat(format || '', value);\n                },\n                rotation: 0,\n                /**\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    fontSize: '0.7em'\n                }\n            }\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, PlotLineOrBandClass) {\n            if (pushUnique(composed, 'CurrentDateIndication')) {\n                addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                addEvent(PlotLineOrBandClass, 'render', onPlotLineOrBandRender);\n                wrap(PlotLineOrBandClass.prototype, 'getLabelText', wrapPlotLineOrBandGetLabelText);\n            }\n        }\n        /**\n         * @private\n         */\n        function onAxisAfterSetOptions() {\n            const options = this.options, cdiOptions = options.currentDateIndicator;\n            if (cdiOptions) {\n                const plotLineOptions = typeof cdiOptions === 'object' ?\n                    merge(defaultOptions, cdiOptions) :\n                    merge(defaultOptions);\n                plotLineOptions.value = Date.now();\n                plotLineOptions.className = 'highcharts-current-date-indicator';\n                if (!options.plotLines) {\n                    options.plotLines = [];\n                }\n                options.plotLines.push(plotLineOptions);\n            }\n        }\n        /**\n         * @private\n         */\n        function onPlotLineOrBandRender() {\n            // If the label already exists, update its text\n            if (this.label) {\n                this.label.attr({\n                    text: this.getLabelText(this.options.label)\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function wrapPlotLineOrBandGetLabelText(defaultMethod, defaultLabelOptions) {\n            const options = this.options;\n            if (options &&\n                options.className &&\n                options.className.indexOf('highcharts-current-date-indicator') !== -1 &&\n                options.label &&\n                typeof options.label.formatter === 'function') {\n                options.value = Date.now();\n                return options.label.formatter\n                    .call(this, options.value, options.label.format);\n            }\n            return defaultMethod.call(this, defaultLabelOptions);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const CurrentDateIndication = {\n            compose\n        };\n\n        return CurrentDateIndication;\n    });\n    _registerModule(_modules, 'Core/Chart/GanttChart.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Defaults.js'], _modules['Core/Utilities.js']], function (Chart, D, U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { isArray, merge, splat } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Gantt-optimized chart. Use {@link Highcharts.Chart|Chart} for common charts.\n         *\n         * @requires modules/gantt\n         *\n         * @class\n         * @name Highcharts.GanttChart\n         * @extends Highcharts.Chart\n         */\n        class GanttChart extends Chart {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initializes the chart. The constructor's arguments are passed on\n             * directly.\n             *\n             * @function Highcharts.GanttChart#init\n             *\n             * @param {Highcharts.Options} userOptions\n             *        Custom options.\n             *\n             * @param {Function} [callback]\n             *        Function to run when the chart has loaded and all external\n             *        images are loaded.\n             *\n             *\n             * @emits Highcharts.GanttChart#event:init\n             * @emits Highcharts.GanttChart#event:afterInit\n             */\n            init(userOptions, callback) {\n                const xAxisOptions = userOptions.xAxis, yAxisOptions = userOptions.yAxis;\n                let defaultLinkedTo;\n                // Avoid doing these twice\n                userOptions.xAxis = userOptions.yAxis = void 0;\n                const options = merge(true, {\n                    chart: {\n                        type: 'gantt'\n                    },\n                    title: {\n                        text: ''\n                    },\n                    legend: {\n                        enabled: false\n                    },\n                    navigator: {\n                        series: { type: 'gantt' },\n                        // Bars were clipped, #14060.\n                        yAxis: {\n                            type: 'category'\n                        }\n                    }\n                }, userOptions, // User's options\n                // forced options\n                {\n                    isGantt: true\n                });\n                userOptions.xAxis = xAxisOptions;\n                userOptions.yAxis = yAxisOptions;\n                // Apply X axis options to both single and multi x axes If user hasn't\n                // defined axes as array, make it into an array and add a second axis by\n                // default.\n                options.xAxis = (!isArray(userOptions.xAxis) ?\n                    [userOptions.xAxis || {}, {}] :\n                    userOptions.xAxis).map((xAxisOptions, i) => {\n                    if (i === 1) { // Second xAxis\n                        defaultLinkedTo = 0;\n                    }\n                    return merge(\n                    // Defaults\n                    {\n                        grid: {\n                            borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                            enabled: true\n                        },\n                        opposite: defaultOptions.xAxis?.opposite ??\n                            xAxisOptions.opposite ??\n                            true,\n                        linkedTo: defaultLinkedTo\n                    }, \n                    // User options\n                    xAxisOptions, \n                    // Forced options\n                    {\n                        type: 'datetime'\n                    });\n                });\n                // Apply Y axis options to both single and multi y axes\n                options.yAxis = (splat(userOptions.yAxis || {})).map((yAxisOptions) => merge(\n                // Defaults\n                {\n                    grid: {\n                        borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                        enabled: true\n                    },\n                    staticScale: 50,\n                    reversed: true,\n                    // Set default type treegrid, but only if 'categories' is\n                    // undefined\n                    type: yAxisOptions.categories ? yAxisOptions.type : 'treegrid'\n                }, \n                // User options\n                yAxisOptions));\n                super.init(options, callback);\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GanttChart) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable jsdoc/check-param-names */\n            /**\n             * The factory function for creating new gantt charts. Creates a new {@link\n             * Highcharts.GanttChart|GanttChart} object with different default options\n             * than the basic Chart.\n             *\n             * @example\n             * // Render a chart in to div#container\n             * let chart = Highcharts.ganttChart('container', {\n             *     title: {\n             *         text: 'My chart'\n             *     },\n             *     series: [{\n             *         data: ...\n             *     }]\n             * });\n             *\n             * @function Highcharts.ganttChart\n             *\n             * @param {string|Highcharts.HTMLDOMElement} renderTo\n             *        The DOM element to render to, or its id.\n             *\n             * @param {Highcharts.Options} options\n             *        The chart options structure.\n             *\n             * @param {Highcharts.ChartCallbackFunction} [callback]\n             *        Function to run when the chart has loaded and all external\n             *        images are loaded. Defining a\n             *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n             *        handler is equivalent.\n             *\n             * @return {Highcharts.GanttChart}\n             *         Returns the Chart object.\n             */\n            function ganttChart(a, b, c) {\n                return new GanttChart(a, b, c);\n            }\n            GanttChart.ganttChart = ganttChart;\n            /* eslint-enable jsdoc/check-param-names */\n        })(GanttChart || (GanttChart = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GanttChart;\n    });\n    _registerModule(_modules, 'Stock/Navigator/ChartNavigatorComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { addEvent, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let NavigatorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass, NavigatorClass) {\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                const chartProto = ChartClass.prototype;\n                NavigatorConstructor = NavigatorClass;\n                chartProto.callbacks.push(onChartCallback);\n                addEvent(ChartClass, 'afterAddSeries', onChartAfterAddSeries);\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n                addEvent(ChartClass, 'afterUpdate', onChartAfterUpdate);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'beforeShowResetZoom', onChartBeforeShowResetZoom);\n                addEvent(ChartClass, 'update', onChartUpdate);\n            }\n        }\n        /**\n         * Handle adding new series.\n         * @private\n         */\n        function onChartAfterAddSeries() {\n            if (this.navigator) {\n                // Recompute which series should be shown in navigator, and add them\n                this.navigator.setBaseSeries(null, false);\n            }\n        }\n        /**\n         * For stock charts, extend the Chart.setChartSize method so that we can set the\n         * final top position of the navigator once the height of the chart, including\n         * the legend, is determined. #367. We can't use Chart.getMargins, because\n         * labels offsets are not calculated yet.\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            const legend = this.legend, navigator = this.navigator;\n            let legendOptions, xAxis, yAxis;\n            if (navigator) {\n                legendOptions = legend && legend.options;\n                xAxis = navigator.xAxis;\n                yAxis = navigator.yAxis;\n                const { scrollbarHeight, scrollButtonSize } = navigator;\n                // Compute the top position\n                if (this.inverted) {\n                    navigator.left = navigator.opposite ?\n                        this.chartWidth - scrollbarHeight -\n                            navigator.height :\n                        this.spacing[3] + scrollbarHeight;\n                    navigator.top = this.plotTop + scrollButtonSize;\n                }\n                else {\n                    navigator.left = pick(xAxis.left, this.plotLeft + scrollButtonSize);\n                    navigator.top = navigator.navigatorOptions.top ||\n                        this.chartHeight -\n                            navigator.height -\n                            scrollbarHeight -\n                            (this.scrollbar?.options.margin || 0) -\n                            this.spacing[2] -\n                            (this.rangeSelector && this.extraBottomMargin ?\n                                this.rangeSelector.getHeight() :\n                                0) -\n                            ((legendOptions &&\n                                legendOptions.verticalAlign === 'bottom' &&\n                                legendOptions.layout !== 'proximate' && // #13392\n                                legendOptions.enabled &&\n                                !legendOptions.floating) ?\n                                legend.legendHeight +\n                                    pick(legendOptions.margin, 10) :\n                                0) -\n                            (this.titleOffset ? this.titleOffset[2] : 0);\n                }\n                if (xAxis && yAxis) { // False if navigator is disabled (#904)\n                    if (this.inverted) {\n                        xAxis.options.left = yAxis.options.left = navigator.left;\n                    }\n                    else {\n                        xAxis.options.top = yAxis.options.top = navigator.top;\n                    }\n                    xAxis.setAxisSize();\n                    yAxis.setAxisSize();\n                }\n            }\n        }\n        /**\n         * Initialize navigator, if no scrolling exists yet.\n         * @private\n         */\n        function onChartAfterUpdate(event) {\n            if (!this.navigator && !this.scroller &&\n                (this.options.navigator.enabled ||\n                    this.options.scrollbar.enabled)) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n                if (pick(event.redraw, true)) {\n                    this.redraw(event.animation); // #7067\n                }\n            }\n        }\n        /**\n         * Initialize navigator for stock charts\n         * @private\n         */\n        function onChartBeforeRender() {\n            const options = this.options;\n            if (options.navigator.enabled ||\n                options.scrollbar.enabled) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n            }\n        }\n        /**\n         * For Stock charts. For x only zooming, do not to create the zoom button\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector. (#9285)\n         * @private\n         */\n        function onChartBeforeShowResetZoom() {\n            const chartOptions = this.options, navigator = chartOptions.navigator, rangeSelector = chartOptions.rangeSelector;\n            if (((navigator && navigator.enabled) ||\n                (rangeSelector && rangeSelector.enabled)) &&\n                ((!isTouchDevice &&\n                    this.zooming.type === 'x') ||\n                    (isTouchDevice && this.zooming.pinchType === 'x'))) {\n                return false;\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartCallback(chart) {\n            const navigator = chart.navigator;\n            // Initialize the navigator\n            if (navigator && chart.xAxis[0]) {\n                const extremes = chart.xAxis[0].getExtremes();\n                navigator.render(extremes.min, extremes.max);\n            }\n        }\n        /**\n         * Merge options, if no scrolling exists yet\n         * @private\n         */\n        function onChartUpdate(e) {\n            const navigatorOptions = (e.options.navigator || {}), scrollbarOptions = (e.options.scrollbar || {});\n            if (!this.navigator && !this.scroller &&\n                (navigatorOptions.enabled || scrollbarOptions.enabled)) {\n                merge(true, this.options.navigator, navigatorOptions);\n                merge(true, this.options.scrollbar, scrollbarOptions);\n                delete e.options.navigator;\n                delete e.options.scrollbar;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ChartNavigatorComposition = {\n            compose\n        };\n\n        return ChartNavigatorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/NavigatorAxisComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { addEvent, correctFloat, defined, isNumber, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onAxisInit() {\n            const axis = this;\n            if (!axis.navigatorAxis) {\n                axis.navigatorAxis = new NavigatorAxisAdditions(axis);\n            }\n        }\n        /**\n         * For Stock charts, override selection zooming with some special features\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector.\n         * @private\n         */\n        function onAxisSetExtremes(e) {\n            const axis = this, chart = axis.chart, chartOptions = chart.options, navigator = chartOptions.navigator, navigatorAxis = axis.navigatorAxis, pinchType = chart.zooming.pinchType, rangeSelector = chartOptions.rangeSelector, zoomType = chart.zooming.type;\n            let zoomed;\n            if (axis.isXAxis &&\n                (navigator?.enabled || rangeSelector?.enabled)) {\n                // For y only zooming, ignore the X axis completely\n                if (zoomType === 'y' && e.trigger === 'zoom') {\n                    zoomed = false;\n                    // For xy zooming, record the state of the zoom before zoom selection,\n                    // then when the reset button is pressed, revert to this state. This\n                    // should apply only if the chart is initialized with a range (#6612),\n                    // otherwise zoom all the way out.\n                }\n                else if (((e.trigger === 'zoom' && zoomType === 'xy') ||\n                    (isTouchDevice && pinchType === 'xy')) &&\n                    axis.options.range) {\n                    const previousZoom = navigatorAxis.previousZoom;\n                    // Minimum defined, zooming in\n                    if (defined(e.min)) {\n                        navigatorAxis.previousZoom = [axis.min, axis.max];\n                        // Minimum undefined, resetting zoom\n                    }\n                    else if (previousZoom) {\n                        e.min = previousZoom[0];\n                        e.max = previousZoom[1];\n                        navigatorAxis.previousZoom = void 0;\n                    }\n                }\n            }\n            if (typeof zoomed !== 'undefined') {\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class NavigatorAxisAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass) {\n                if (!AxisClass.keepProps.includes('navigatorAxis')) {\n                    AxisClass.keepProps.push('navigatorAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'setExtremes', onAxisSetExtremes);\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            destroy() {\n                this.axis = void 0;\n            }\n            /**\n             * Add logic to normalize the zoomed range in order to preserve the pressed\n             * state of range selector buttons\n             *\n             * @private\n             * @function Highcharts.Axis#toFixedRange\n             */\n            toFixedRange(pxMin, pxMax, fixedMin, fixedMax) {\n                const axis = this.axis, halfPointRange = (axis.pointRange || 0) / 2;\n                let newMin = pick(fixedMin, axis.translate(pxMin, true, !axis.horiz)), newMax = pick(fixedMax, axis.translate(pxMax, true, !axis.horiz));\n                // Add/remove half point range to/from the extremes (#1172)\n                if (!defined(fixedMin)) {\n                    newMin = correctFloat(newMin + halfPointRange);\n                }\n                if (!defined(fixedMax)) {\n                    newMax = correctFloat(newMax - halfPointRange);\n                }\n                if (!isNumber(newMin) || !isNumber(newMax)) { // #1195, #7411\n                    newMin = newMax = void 0;\n                }\n                return {\n                    min: newMin,\n                    max: newMax\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorAxisAdditions;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorDefaults.js', [_modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js']], function (Color, SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { seriesTypes } = SeriesRegistry;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The navigator is a small series below the main series, displaying\n         * a view of the entire data set. It provides tools to zoom in and\n         * out on parts of the data as well as panning across the dataset.\n         *\n         * @product      highstock gantt\n         * @optionparent navigator\n         */\n        const NavigatorDefaults = {\n            /**\n             * Whether the navigator and scrollbar should adapt to updated data\n             * in the base X axis. When loading data async, as in the demo below,\n             * this should be `false`. Otherwise new data will trigger navigator\n             * redraw, which will cause unwanted looping. In the demo below, the\n             * data in the navigator is set only once. On navigating, only the main\n             * chart content is updated.\n             *\n             * @sample {highstock} stock/demo/lazy-loading/\n             *         Set to false with async data loading\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.adaptToUpdatedData\n             */\n            /**\n             * An integer identifying the index to use for the base series, or a\n             * string representing the id of the series.\n             *\n             * **Note**: As of Highcharts 5.0, this is now a deprecated option.\n             * Prefer [series.showInNavigator](#plotOptions.series.showInNavigator).\n             *\n             * @see [series.showInNavigator](#plotOptions.series.showInNavigator)\n             *\n             * @deprecated\n             * @type      {number|string}\n             * @default   0\n             * @apioption navigator.baseSeries\n             */\n            /**\n             * Enable or disable the navigator.\n             *\n             * @sample {highstock} stock/navigator/enabled/\n             *         Disable the navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.enabled\n             */\n            /**\n             * When the chart is inverted, whether to draw the navigator on the\n             * opposite side.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     5.0.8\n             * @apioption navigator.opposite\n             */\n            /**\n             * The height of the navigator.\n             *\n             * @sample {highstock} stock/navigator/height/\n             *         A higher navigator\n             */\n            height: 40,\n            /**\n             * The distance from the nearest element, the X axis or X axis labels.\n             *\n             * @sample {highstock} stock/navigator/margin/\n             *         A margin of 2 draws the navigator closer to the X axis labels\n             */\n            margin: 25,\n            /**\n             * Whether the mask should be inside the range marking the zoomed\n             * range, or outside. In Highcharts Stock 1.x it was always `false`.\n             *\n             * @sample {highstock} stock/demo/maskinside-false/\n             *         False, mask outside\n             *\n             * @since   2.0\n             */\n            maskInside: true,\n            /**\n             * Options for the handles for dragging the zoomed area.\n             *\n             * @sample {highstock} stock/navigator/handles/\n             *         Colored handles\n             */\n            handles: {\n                /**\n                 * Width for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                width: 7,\n                /**\n                 * Border radius of the handles.\n                 *\n                 * @sample {highstock} stock/navigator/handles-border-radius/\n                 *      Border radius on the navigator handles.\n                 *\n                 * @since 11.4.2\n                 */\n                borderRadius: 0,\n                /**\n                 * Height for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                height: 15,\n                /**\n                 * Array to define shapes of handles. 0-index for left, 1-index for\n                 * right.\n                 *\n                 * Additionally, the URL to a graphic can be given on this form:\n                 * `url(graphic.png)`. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export\n                 * server.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                 * used by its method name, as shown in the demo.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"navigator-handle\", \"navigator-handle\"]\n                 * @since   6.0.0\n                 */\n                symbols: ['navigator-handle', 'navigator-handle'],\n                /**\n                 * Allows to enable/disable handles.\n                 *\n                 * @since   6.0.0\n                 */\n                enabled: true,\n                /**\n                 * The width for the handle border and the stripes inside.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since     6.0.0\n                 * @apioption navigator.handles.lineWidth\n                 */\n                lineWidth: 1,\n                /**\n                 * The fill for the handle.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#f2f2f2\" /* Palette.neutralColor5 */,\n                /**\n                 * The stroke for the handle border and the stripes inside.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */\n            },\n            /**\n             * The color of the mask covering the areas of the navigator series\n             * that are currently not visible in the main series. The default\n             * color is bluish with an opacity of 0.3 to see the series below.\n             *\n             * @see In styled mode, the mask is styled with the\n             *      `.highcharts-navigator-mask` and\n             *      `.highcharts-navigator-mask-inside` classes.\n             *\n             * @sample {highstock} stock/navigator/maskfill/\n             *         Blue, semi transparent mask\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default rgba(102,133,194,0.3)\n             */\n            maskFill: color(\"#667aff\" /* Palette.highlightColor60 */).setOpacity(0.3).get(),\n            /**\n             * The color of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #cccccc\n             */\n            outlineColor: \"#999999\" /* Palette.neutralColor40 */,\n            /**\n             * The width of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @see In styled mode, the outline stroke width is set with the\n             *      `.highcharts-navigator-outline` class.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {number}\n             */\n            outlineWidth: 1,\n            /**\n             * Options for the navigator series. Available options are the same\n             * as any series, documented at [plotOptions](#plotOptions.series)\n             * and [series](#series).\n             *\n             * Unless data is explicitly defined on navigator.series, the data\n             * is borrowed from the first series in the chart.\n             *\n             * Default series options for the navigator series are:\n             * ```js\n             * series: {\n             *     type: 'areaspline',\n             *     fillOpacity: 0.05,\n             *     dataGrouping: {\n             *         smoothed: true\n             *     },\n             *     lineWidth: 1,\n             *     marker: {\n             *         enabled: false\n             *     }\n             * }\n             * ```\n             *\n             * @see In styled mode, the navigator series is styled with the\n             *      `.highcharts-navigator-series` class.\n             *\n             * @sample {highstock} stock/navigator/series-data/\n             *         Using a separate data set for the navigator\n             * @sample {highstock} stock/navigator/series/\n             *         A green navigator series\n             *\n             * @type {*|Array<*>|Highcharts.SeriesOptionsType|Array<Highcharts.SeriesOptionsType>}\n             */\n            series: {\n                /**\n                 * The type of the navigator series.\n                 *\n                 * Heads up:\n                 * In column-type navigator, zooming is limited to at least one\n                 * point with its `pointRange`.\n                 *\n                 * @sample {highstock} stock/navigator/column/\n                 *         Column type navigator\n                 *\n                 * @type    {string}\n                 * @default {highstock} `areaspline` if defined, otherwise `line`\n                 * @default {gantt} gantt\n                 */\n                type: (typeof seriesTypes.areaspline === 'undefined' ?\n                    'line' :\n                    'areaspline'),\n                /**\n                 * The fill opacity of the navigator series.\n                 */\n                fillOpacity: 0.05,\n                /**\n                 * The pixel line width of the navigator series.\n                 */\n                lineWidth: 1,\n                /**\n                 * @ignore-option\n                 */\n                compare: null,\n                /**\n                 * @ignore-option\n                 */\n                sonification: {\n                    enabled: false\n                },\n                /**\n                 * Unless data is explicitly defined, the data is borrowed from the\n                 * first series in the chart.\n                 *\n                 * @type      {Array<number|Array<number|string|null>|object|null>}\n                 * @product   highstock\n                 * @apioption navigator.series.data\n                 */\n                /**\n                 * Data grouping options for the navigator series.\n                 *\n                 * @extends plotOptions.series.dataGrouping\n                 */\n                dataGrouping: {\n                    approximation: 'average',\n                    enabled: true,\n                    groupPixelWidth: 2,\n                    // Replace smoothed property by anchors, #12455.\n                    firstAnchor: 'firstPoint',\n                    anchor: 'middle',\n                    lastAnchor: 'lastPoint',\n                    // Day and week differs from plotOptions.series.dataGrouping\n                    units: [\n                        ['millisecond', [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]],\n                        ['second', [1, 2, 5, 10, 15, 30]],\n                        ['minute', [1, 2, 5, 10, 15, 30]],\n                        ['hour', [1, 2, 3, 4, 6, 8, 12]],\n                        ['day', [1, 2, 3, 4]],\n                        ['week', [1, 2, 3]],\n                        ['month', [1, 3, 6]],\n                        ['year', null]\n                    ]\n                },\n                /**\n                 * Data label options for the navigator series. Data labels are\n                 * disabled by default on the navigator series.\n                 *\n                 * @extends plotOptions.series.dataLabels\n                 */\n                dataLabels: {\n                    enabled: false,\n                    zIndex: 2 // #1839\n                },\n                id: 'highcharts-navigator-series',\n                className: 'highcharts-navigator-series',\n                /**\n                 * Sets the fill color of the navigator series.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption navigator.series.color\n                 */\n                /**\n                 * Line color for the navigator series. Allows setting the color\n                 * while disallowing the default candlestick setting.\n                 *\n                 * @type {Highcharts.ColorString|null}\n                 */\n                lineColor: null, // #4602\n                marker: {\n                    enabled: false\n                },\n                /**\n                 * Since Highcharts Stock v8, default value is the same as default\n                 * `pointRange` defined for a specific type (e.g. `null` for\n                 * column type).\n                 *\n                 * In Highcharts Stock version < 8, defaults to 0.\n                 *\n                 * @extends plotOptions.series.pointRange\n                 * @type {number|null}\n                 * @apioption navigator.series.pointRange\n                 */\n                /**\n                 * The threshold option. Setting it to 0 will make the default\n                 * navigator area series draw its area from the 0 value and up.\n                 *\n                 * @type {number|null}\n                 */\n                threshold: null\n            },\n            /**\n             * Enable or disable navigator sticking to right, while adding new\n             * points. If `undefined`, the navigator sticks to the axis maximum only\n             * if it was already at the maximum prior to adding points.\n             *\n             * @type      {boolean}\n             * @default   undefined\n             * @since 10.2.1\n             * @sample {highstock} stock/navigator/sticktomax-false/\n             * stickToMax set to false\n             * @apioption navigator.stickToMax\n             */\n            /**\n             * Options for the navigator X axis. Default series options for the\n             * navigator xAxis are:\n             * ```js\n             * xAxis: {\n             *     tickWidth: 0,\n             *     lineWidth: 0,\n             *     gridLineWidth: 1,\n             *     tickPixelInterval: 200,\n             *     labels: {\n             *            align: 'left',\n             *         style: {\n             *             color: '#888'\n             *         },\n             *         x: 3,\n             *         y: -4\n             *     }\n             * }\n             * ```\n             *\n             * @extends   xAxis\n             * @excluding linkedTo, maxZoom, minRange, opposite, range, scrollbar,\n             *            showEmpty, maxRange\n             */\n            xAxis: {\n                /**\n                 * Additional range on the right side of the xAxis. Works similar to\n                 * `xAxis.maxPadding`, but the value is set in terms of axis values,\n                 * percentage or pixels.\n                 *\n                 * If it's a number, it is interpreted as axis values, which in a\n                 * datetime axis equals milliseconds.\n                 *\n                 * If it's a percentage string, is interpreted as percentages of the\n                 * axis length. An overscroll of 50% will make a 100px axis 50px longer.\n                 *\n                 * If it's a pixel string, it is interpreted as a fixed pixel value, but\n                 * limited to 90% of the axis length.\n                 *\n                 * If it's undefined, the value is inherited from `xAxis.overscroll`.\n                 *\n                 * Can be set for both, main xAxis and navigator's xAxis.\n                 *\n                 * @type    {number | string | undefined}\n                 * @since   6.0.0\n                 * @apioption navigator.xAxis.overscroll\n                 */\n                className: 'highcharts-navigator-xaxis',\n                tickLength: 0,\n                lineWidth: 0,\n                gridLineColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n                id: 'navigator-x-axis',\n                gridLineWidth: 1,\n                tickPixelInterval: 200,\n                labels: {\n                    align: 'left',\n                    /**\n                     * @type {Highcharts.CSSObject}\n                     */\n                    style: {\n                        /** @ignore */\n                        color: \"#000000\" /* Palette.neutralColor100 */,\n                        /** @ignore */\n                        fontSize: '0.7em',\n                        /** @ignore */\n                        opacity: 0.6,\n                        /** @ignore */\n                        textOutline: '2px contrast'\n                    },\n                    x: 3,\n                    y: -4\n                },\n                crosshair: false\n            },\n            /**\n             * Options for the navigator Y axis. Default series options for the\n             * navigator yAxis are:\n             * ```js\n             * yAxis: {\n             *     gridLineWidth: 0,\n             *     startOnTick: false,\n             *     endOnTick: false,\n             *     minPadding: 0.1,\n             *     maxPadding: 0.1,\n             *     labels: {\n             *         enabled: false\n             *     },\n             *     title: {\n             *         text: null\n             *     },\n             *     tickWidth: 0\n             * }\n             * ```\n             *\n             * @extends   yAxis\n             * @excluding height, linkedTo, maxZoom, minRange, ordinal, range,\n             *            showEmpty, scrollbar, top, units, maxRange, minLength,\n             *            maxLength, resize\n             */\n            yAxis: {\n                className: 'highcharts-navigator-yaxis',\n                gridLineWidth: 0,\n                startOnTick: false,\n                endOnTick: false,\n                minPadding: 0.1,\n                id: 'navigator-y-axis',\n                maxPadding: 0.1,\n                labels: {\n                    enabled: false\n                },\n                crosshair: false,\n                title: {\n                    text: null\n                },\n                tickLength: 0,\n                tickWidth: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Maximum range which can be set using the navigator's handles.\n         * Opposite of [xAxis.minRange](#xAxis.minRange).\n         *\n         * @sample {highstock} stock/navigator/maxrange/\n         *         Defined max and min range\n         *\n         * @type      {number}\n         * @since     6.0.0\n         * @product   highstock gantt\n         * @apioption xAxis.maxRange\n         */\n        (''); // Keeps doclets above in JS file\n\n        return NavigatorDefaults;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorSymbols.js', [_modules['Core/Renderer/SVG/Symbols.js'], _modules['Core/Utilities.js']], function (rect, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { relativeLength } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Draw one of the handles on the side of the zoomed range in the navigator.\n         * @private\n         */\n        function navigatorHandle(_x, _y, width, height, options = {}) {\n            const halfWidth = options.width ? options.width / 2 : width, markerPosition = 1.5, r = relativeLength(options.borderRadius || 0, Math.min(halfWidth * 2, height));\n            height = options.height || height;\n            return [\n                ['M', -markerPosition, height / 2 - 3.5],\n                ['L', -markerPosition, height / 2 + 4.5],\n                ['M', markerPosition - 1, height / 2 - 3.5],\n                ['L', markerPosition - 1, height / 2 + 4.5],\n                ...rect.rect(-halfWidth - 1, 0.5, halfWidth * 2 + 1, height, { r })\n            ];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorSymbols = {\n            'navigator-handle': navigatorHandle\n        };\n\n        return NavigatorSymbols;\n    });\n    _registerModule(_modules, 'Stock/Utilities/StockUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Sets the chart.fixedRange to the specified value. If the value is larger\n         * than actual range, sets it to the maximum possible range. (#20327)\n         *\n         * @private\n         * @function Highcharts.StockChart#setFixedRange\n         * @param {number|undefined} range\n         *        Range to set in axis units.\n         */\n        function setFixedRange(range) {\n            const xAxis = this.xAxis[0];\n            if (defined(xAxis.dataMax) &&\n                defined(xAxis.dataMin) &&\n                range) {\n                this.fixedRange = Math.min(range, xAxis.dataMax - xAxis.dataMin);\n            }\n            else {\n                this.fixedRange = range;\n            }\n        }\n        const StockUtilities = {\n            setFixedRange\n        };\n\n        return StockUtilities;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorComposition.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorDefaults.js'], _modules['Stock/Navigator/NavigatorSymbols.js'], _modules['Core/Renderer/RendererRegistry.js'], _modules['Stock/Utilities/StockUtilities.js'], _modules['Core/Utilities.js']], function (D, H, NavigatorAxisAdditions, NavigatorDefaults, NavigatorSymbols, RendererRegistry, StockUtilities, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setOptions } = D;\n        const { composed } = H;\n        const { getRendererType } = RendererRegistry;\n        const { setFixedRange } = StockUtilities;\n        const { addEvent, extend, pushUnique } = U;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass, AxisClass, SeriesClass) {\n            NavigatorAxisAdditions.compose(AxisClass);\n            if (pushUnique(composed, 'Navigator')) {\n                ChartClass.prototype.setFixedRange = setFixedRange;\n                extend(getRendererType().prototype.symbols, NavigatorSymbols);\n                addEvent(SeriesClass, 'afterUpdate', onSeriesAfterUpdate);\n                setOptions({ navigator: NavigatorDefaults });\n            }\n        }\n        /**\n         * Handle updating series\n         * @private\n         */\n        function onSeriesAfterUpdate() {\n            if (this.chart.navigator && !this.options.isInternal) {\n                this.chart.navigator.setBaseSeries(null, false);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorComposition = {\n            compose\n        };\n\n        return NavigatorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/ScrollbarAxis.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, defined, pick, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ScrollbarAxis;\n        (function (ScrollbarAxis) {\n            /* *\n             *\n             *  Variables\n             *\n             * */\n            let Scrollbar;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Attaches to axis events to create scrollbars if enabled.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} AxisClass\n             * Axis class to extend.\n             *\n             * @param {Highcharts.Scrollbar} ScrollbarClass\n             * Scrollbar class to use.\n             */\n            function compose(AxisClass, ScrollbarClass) {\n                if (pushUnique(composed, 'Axis.Scrollbar')) {\n                    Scrollbar = ScrollbarClass;\n                    addEvent(AxisClass, 'afterGetOffset', onAxisAfterGetOffset);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterRender', onAxisAfterRender);\n                }\n            }\n            ScrollbarAxis.compose = compose;\n            /** @private */\n            function getExtremes(axis) {\n                const axisMin = pick(axis.options && axis.options.min, axis.min);\n                const axisMax = pick(axis.options && axis.options.max, axis.max);\n                return {\n                    axisMin,\n                    axisMax,\n                    scrollMin: defined(axis.dataMin) ?\n                        Math.min(axisMin, axis.min, axis.dataMin, pick(axis.threshold, Infinity)) : axisMin,\n                    scrollMax: defined(axis.dataMax) ?\n                        Math.max(axisMax, axis.max, axis.dataMax, pick(axis.threshold, -Infinity)) : axisMax\n                };\n            }\n            /**\n             * Make space for a scrollbar.\n             * @private\n             */\n            function onAxisAfterGetOffset() {\n                const axis = this, scrollbar = axis.scrollbar, opposite = scrollbar && !scrollbar.options.opposite, index = axis.horiz ? 2 : opposite ? 3 : 1;\n                if (scrollbar) {\n                    // Reset scrollbars offsets\n                    axis.chart.scrollbarsOffsets = [0, 0];\n                    axis.chart.axisOffset[index] +=\n                        scrollbar.size + (scrollbar.options.margin || 0);\n                }\n            }\n            /**\n             * Wrap axis initialization and create scrollbar if enabled.\n             * @private\n             */\n            function onAxisAfterInit() {\n                const axis = this;\n                if (axis.options &&\n                    axis.options.scrollbar &&\n                    axis.options.scrollbar.enabled) {\n                    // Predefined options:\n                    axis.options.scrollbar.vertical = !axis.horiz;\n                    axis.options.startOnTick = axis.options.endOnTick = false;\n                    axis.scrollbar = new Scrollbar(axis.chart.renderer, axis.options.scrollbar, axis.chart);\n                    addEvent(axis.scrollbar, 'changed', function (e) {\n                        const { axisMin, axisMax, scrollMin: unitedMin, scrollMax: unitedMax } = getExtremes(axis), range = unitedMax - unitedMin;\n                        let to, from;\n                        // #12834, scroll when show/hide series, wrong extremes\n                        if (!defined(axisMin) || !defined(axisMax)) {\n                            return;\n                        }\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            to = unitedMin + range * this.to;\n                            from = unitedMin + range * this.from;\n                        }\n                        else {\n                            // Y-values in browser are reversed, but this also\n                            // applies for reversed horizontal axis:\n                            to = unitedMin + range * (1 - this.from);\n                            from = unitedMin + range * (1 - this.to);\n                        }\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            // #17977, set animation to undefined instead of true\n                            const animate = e.DOMType === 'mousemove' ||\n                                e.DOMType === 'touchmove' ? false : void 0;\n                            axis.setExtremes(from, to, true, animate, e);\n                        }\n                        else {\n                            // When live redraw is disabled, don't change extremes\n                            // Only change the position of the scrollbar thumb\n                            this.setRange(this.from, this.to);\n                        }\n                    });\n                }\n            }\n            /**\n             * Wrap rendering axis, and update scrollbar if one is created.\n             * @private\n             */\n            function onAxisAfterRender() {\n                const axis = this, { scrollMin, scrollMax } = getExtremes(axis), scrollbar = axis.scrollbar, offset = (axis.axisTitleMargin + (axis.titleOffset || 0)), scrollbarsOffsets = axis.chart.scrollbarsOffsets, axisMargin = axis.options.margin || 0;\n                let offsetsIndex, from, to;\n                if (scrollbar && scrollbarsOffsets) {\n                    if (axis.horiz) {\n                        // Reserve space for labels/title\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += offset;\n                        }\n                        scrollbar.position(axis.left, (axis.top +\n                            axis.height +\n                            2 +\n                            scrollbarsOffsets[1] -\n                            (axis.opposite ? axisMargin : 0)), axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += axisMargin;\n                        }\n                        offsetsIndex = 1;\n                    }\n                    else {\n                        // Reserve space for labels/title\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += offset;\n                        }\n                        let xPosition;\n                        if (!scrollbar.options.opposite) {\n                            xPosition = axis.opposite ? 0 : axisMargin;\n                        }\n                        else {\n                            xPosition = axis.left +\n                                axis.width +\n                                2 +\n                                scrollbarsOffsets[0] -\n                                (axis.opposite ? 0 : axisMargin);\n                        }\n                        scrollbar.position(xPosition, axis.top, axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += axisMargin;\n                        }\n                        offsetsIndex = 0;\n                    }\n                    scrollbarsOffsets[offsetsIndex] += scrollbar.size +\n                        (scrollbar.options.margin || 0);\n                    if (isNaN(scrollMin) ||\n                        isNaN(scrollMax) ||\n                        !defined(axis.min) ||\n                        !defined(axis.max) ||\n                        axis.min === axis.max // #10733\n                    ) {\n                        // Default action: when extremes are the same or there is\n                        // not extremes on the axis, but scrollbar exists, make it\n                        // full size\n                        scrollbar.setRange(0, 1);\n                    }\n                    else {\n                        from = ((axis.min - scrollMin) /\n                            (scrollMax - scrollMin));\n                        to = ((axis.max - scrollMin) /\n                            (scrollMax - scrollMin));\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            scrollbar.setRange(from, to);\n                        }\n                        else {\n                            // Inverse vertical axis\n                            scrollbar.setRange(1 - to, 1 - from);\n                        }\n                    }\n                }\n            }\n        })(ScrollbarAxis || (ScrollbarAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarAxis;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/ScrollbarDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constant\n         *\n         * */\n        /**\n         *\n         * The scrollbar is a means of panning over the X axis of a stock chart.\n         * Scrollbars can also be applied to other types of axes.\n         *\n         * Another approach to scrollable charts is the [chart.scrollablePlotArea](\n         * https://api.highcharts.com/highcharts/chart.scrollablePlotArea) option that\n         * is especially suitable for simpler cartesian charts on mobile.\n         *\n         * In styled mode, all the presentational options for the\n         * scrollbar are replaced by the classes `.highcharts-scrollbar-thumb`,\n         * `.highcharts-scrollbar-arrow`, `.highcharts-scrollbar-button`,\n         * `.highcharts-scrollbar-rifles` and `.highcharts-scrollbar-track`.\n         *\n         * @sample stock/yaxis/inverted-bar-scrollbar/\n         *         A scrollbar on a simple bar chart\n         *\n         * @product highstock gantt\n         * @optionparent scrollbar\n         *\n         * @private\n         */\n        const ScrollbarDefaults = {\n            /**\n             * The height of the scrollbar. If `buttonsEnabled` is true , the height\n             * also applies to the width of the scroll arrows so that they are always\n             * squares.\n             *\n             * @sample stock/scrollbar/style/\n             *         Non-default height\n             *\n             * @type    {number}\n             */\n            height: 10,\n            /**\n             * The border rounding radius of the bar.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderRadius: 5,\n            /**\n             * The corner radius of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderRadius: 0,\n            /**\n             * Enable or disable the buttons at the end of the scrollbar.\n             *\n             * @since 11.0.0\n             */\n            buttonsEnabled: false,\n            /**\n             * Enable or disable the scrollbar.\n             *\n             * @sample stock/scrollbar/enabled/\n             *         Disable the scrollbar, only use navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.enabled\n             */\n            /**\n             * Whether to redraw the main chart as the scrollbar or the navigator\n             * zoomed window is moved. Defaults to `true` for modern browsers and\n             * `false` for legacy IE browsers as well as mobile devices.\n             *\n             * @sample stock/scrollbar/liveredraw\n             *         Setting live redraw to false\n             *\n             * @type  {boolean}\n             * @since 1.3\n             */\n            liveRedraw: void 0,\n            /**\n             * The margin between the scrollbar and its axis when the scrollbar is\n             * applied directly to an axis, or the navigator in case that is enabled.\n             * Defaults to 10 for axis, 0 for navigator.\n             *\n             * @type {number|undefined}\n             */\n            margin: void 0,\n            /**\n             * The minimum width of the scrollbar.\n             *\n             * @since 1.2.5\n             */\n            minWidth: 6,\n            /** @ignore-option */\n            opposite: true,\n            /**\n             * Whether to show or hide the scrollbar when the scrolled content is\n             * zoomed out to it full extent.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.showFull\n             */\n            step: 0.2,\n            /**\n             * The z index of the scrollbar group.\n             */\n            zIndex: 3,\n            /**\n             * The background color of the scrollbar itself.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBackgroundColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The width of the bar's border.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderWidth: 0,\n            /**\n             * The color of the scrollbar's border.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The color of the small arrow inside the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonArrowColor: \"#333333\" /* Palette.neutralColor80 */,\n            /**\n             * The color of scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBackgroundColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n            /**\n             * The color of the border of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The border width of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderWidth: 1,\n            /**\n             * The color of the small rifles in the middle of the scrollbar.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            rifleColor: 'none',\n            /**\n             * The color of the track background.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBackgroundColor: 'rgba(255, 255, 255, 0.001)', // #18922\n            /**\n             * The color of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The corner radius of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderRadius: 5,\n            /**\n             * The width of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderWidth: 1\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarDefaults;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/Scrollbar.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/ScrollbarAxis.js'], _modules['Stock/Scrollbar/ScrollbarDefaults.js'], _modules['Core/Utilities.js']], function (D, H, ScrollbarAxis, ScrollbarDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, correctFloat, crisp, defined, destroyObjectProperties, fireEvent, merge, pick, removeEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * A reusable scrollbar, internally used in Highcharts Stock's\n         * navigator and optionally on individual axes.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Scrollbar\n         * @param {Highcharts.SVGRenderer} renderer\n         * @param {Highcharts.ScrollbarOptions} options\n         * @param {Highcharts.Chart} chart\n         */\n        class Scrollbar {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass) {\n                ScrollbarAxis.compose(AxisClass, Scrollbar);\n            }\n            /**\n             * When we have vertical scrollbar, rifles and arrow in buttons should be\n             * rotated. The same method is used in Navigator's handles, to rotate them.\n             *\n             * @function Highcharts.swapXY\n             *\n             * @param {Highcharts.SVGPathArray} path\n             * Path to be rotated.\n             *\n             * @param {boolean} [vertical]\n             * If vertical scrollbar, swap x-y values.\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Rotated path.\n             *\n             * @requires modules/stock\n             */\n            static swapXY(path, vertical) {\n                if (vertical) {\n                    path.forEach((seg) => {\n                        const len = seg.length;\n                        let temp;\n                        for (let i = 0; i < len; i += 2) {\n                            temp = seg[i + 1];\n                            if (typeof temp === 'number') {\n                                seg[i + 1] = seg[i + 2];\n                                seg[i + 2] = temp;\n                            }\n                        }\n                    });\n                }\n                return path;\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(renderer, options, chart) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this._events = [];\n                this.chartX = 0;\n                this.chartY = 0;\n                this.from = 0;\n                this.scrollbarButtons = [];\n                this.scrollbarLeft = 0;\n                this.scrollbarStrokeWidth = 1;\n                this.scrollbarTop = 0;\n                this.size = 0;\n                this.to = 0;\n                this.trackBorderWidth = 1;\n                this.x = 0;\n                this.y = 0;\n                this.init(renderer, options, chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set up the mouse and touch events for the Scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#addEvents\n             */\n            addEvents() {\n                const buttonsOrder = this.options.inverted ? [1, 0] : [0, 1], buttons = this.scrollbarButtons, bar = this.scrollbarGroup.element, track = this.track.element, mouseDownHandler = this.mouseDownHandler.bind(this), mouseMoveHandler = this.mouseMoveHandler.bind(this), mouseUpHandler = this.mouseUpHandler.bind(this);\n                const _events = [\n                    // Mouse events\n                    [\n                        buttons[buttonsOrder[0]].element,\n                        'click',\n                        this.buttonToMinClick.bind(this)\n                    ],\n                    [\n                        buttons[buttonsOrder[1]].element,\n                        'click',\n                        this.buttonToMaxClick.bind(this)\n                    ],\n                    [track, 'click', this.trackClick.bind(this)],\n                    [bar, 'mousedown', mouseDownHandler],\n                    [bar.ownerDocument, 'mousemove', mouseMoveHandler],\n                    [bar.ownerDocument, 'mouseup', mouseUpHandler],\n                    // Touch events\n                    [bar, 'touchstart', mouseDownHandler],\n                    [bar.ownerDocument, 'touchmove', mouseMoveHandler],\n                    [bar.ownerDocument, 'touchend', mouseUpHandler]\n                ];\n                // Add them all\n                _events.forEach(function (args) {\n                    addEvent.apply(null, args);\n                });\n                this._events = _events;\n            }\n            buttonToMaxClick(e) {\n                const scroller = this;\n                const range = ((scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2));\n                scroller.updatePosition(scroller.from + range, scroller.to + range);\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            buttonToMinClick(e) {\n                const scroller = this;\n                const range = correctFloat(scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2);\n                scroller.updatePosition(correctFloat(scroller.from - range), correctFloat(scroller.to - range));\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Get normalized (0-1) cursor position over the scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#cursorToScrollbarPosition\n             *\n             * @param  {*} normalizedEvent\n             *         normalized event, with chartX and chartY values\n             *\n             * @return {Highcharts.Dictionary<number>}\n             *         Local position {chartX, chartY}\n             */\n            cursorToScrollbarPosition(normalizedEvent) {\n                const scroller = this, options = scroller.options, minWidthDifference = options.minWidth > scroller.calculatedWidth ?\n                    options.minWidth :\n                    0; // `minWidth` distorts translation\n                return {\n                    chartX: (normalizedEvent.chartX - scroller.x -\n                        scroller.xOffset) /\n                        (scroller.barWidth - minWidthDifference),\n                    chartY: (normalizedEvent.chartY - scroller.y -\n                        scroller.yOffset) /\n                        (scroller.barWidth - minWidthDifference)\n                };\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#destroy\n             */\n            destroy() {\n                const scroller = this, navigator = scroller.chart.scroller;\n                // Disconnect events added in addEvents\n                scroller.removeEvents();\n                // Destroy properties\n                [\n                    'track',\n                    'scrollbarRifles',\n                    'scrollbar',\n                    'scrollbarGroup',\n                    'group'\n                ].forEach(function (prop) {\n                    if (scroller[prop] && scroller[prop].destroy) {\n                        scroller[prop] = scroller[prop].destroy();\n                    }\n                });\n                // #6421, chart may have more scrollbars\n                if (navigator && scroller === navigator.scrollbar) {\n                    navigator.scrollbar = null;\n                    // Destroy elements in collection\n                    destroyObjectProperties(navigator.scrollbarButtons);\n                }\n            }\n            /**\n             * Draw the scrollbar buttons with arrows\n             *\n             * @private\n             * @function Highcharts.Scrollbar#drawScrollbarButton\n             * @param {number} index\n             *        0 is left, 1 is right\n             */\n            drawScrollbarButton(index) {\n                const scroller = this, renderer = scroller.renderer, scrollbarButtons = scroller.scrollbarButtons, options = scroller.options, size = scroller.size, group = renderer.g().add(scroller.group);\n                scrollbarButtons.push(group);\n                if (options.buttonsEnabled) {\n                    // Create a rectangle for the scrollbar button\n                    const rect = renderer.rect()\n                        .addClass('highcharts-scrollbar-button')\n                        .add(group);\n                    // Presentational attributes\n                    if (!scroller.chart.styledMode) {\n                        rect.attr({\n                            stroke: options.buttonBorderColor,\n                            'stroke-width': options.buttonBorderWidth,\n                            fill: options.buttonBackgroundColor\n                        });\n                    }\n                    // Place the rectangle based on the rendered stroke width\n                    rect.attr(rect.crisp({\n                        x: -0.5,\n                        y: -0.5,\n                        width: size,\n                        height: size,\n                        r: options.buttonBorderRadius\n                    }, rect.strokeWidth()));\n                    // Button arrow\n                    const arrow = renderer\n                        .path(Scrollbar.swapXY([[\n                            'M',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 - 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 + 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? 2 : -2),\n                            size / 2\n                        ]], options.vertical))\n                        .addClass('highcharts-scrollbar-arrow')\n                        .add(scrollbarButtons[index]);\n                    if (!scroller.chart.styledMode) {\n                        arrow.attr({\n                            fill: options.buttonArrowColor\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.Scrollbar#init\n             * @param {Highcharts.SVGRenderer} renderer\n             * @param {Highcharts.ScrollbarOptions} options\n             * @param {Highcharts.Chart} chart\n             */\n            init(renderer, options, chart) {\n                const scroller = this;\n                scroller.scrollbarButtons = [];\n                scroller.renderer = renderer;\n                scroller.userOptions = options;\n                scroller.options = merge(ScrollbarDefaults, defaultOptions.scrollbar, options);\n                scroller.options.margin = pick(scroller.options.margin, 10);\n                scroller.chart = chart;\n                // Backward compatibility\n                scroller.size = pick(scroller.options.size, scroller.options.height);\n                // Init\n                if (options.enabled) {\n                    scroller.render();\n                    scroller.addEvents();\n                }\n            }\n            mouseDownHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer?.normalize(e) || e, mousePosition = scroller.cursorToScrollbarPosition(normalizedEvent);\n                scroller.chartX = mousePosition.chartX;\n                scroller.chartY = mousePosition.chartY;\n                scroller.initPositions = [scroller.from, scroller.to];\n                scroller.grabbedCenter = true;\n            }\n            /**\n             * Event handler for the mouse move event.\n             * @private\n             */\n            mouseMoveHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer?.normalize(e) || e, options = scroller.options, direction = options.vertical ?\n                    'chartY' : 'chartX', initPositions = scroller.initPositions || [];\n                let scrollPosition, chartPosition, change;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when\n                // holding the finger down in the center of the scrollbar. This\n                // should be ignored.\n                if (scroller.grabbedCenter &&\n                    // #4696, scrollbar failed on Android\n                    (!e.touches || e.touches[0][direction] !== 0)) {\n                    chartPosition = scroller.cursorToScrollbarPosition(normalizedEvent)[direction];\n                    scrollPosition = scroller[direction];\n                    change = chartPosition - scrollPosition;\n                    scroller.hasDragged = true;\n                    scroller.updatePosition(initPositions[0] + change, initPositions[1] + change);\n                    if (scroller.hasDragged) {\n                        fireEvent(scroller, 'changed', {\n                            from: scroller.from,\n                            to: scroller.to,\n                            trigger: 'scrollbar',\n                            DOMType: e.type,\n                            DOMEvent: e\n                        });\n                    }\n                }\n            }\n            /**\n             * Event handler for the mouse up event.\n             * @private\n             */\n            mouseUpHandler(e) {\n                const scroller = this;\n                if (scroller.hasDragged) {\n                    fireEvent(scroller, 'changed', {\n                        from: scroller.from,\n                        to: scroller.to,\n                        trigger: 'scrollbar',\n                        DOMType: e.type,\n                        DOMEvent: e\n                    });\n                }\n                scroller.grabbedCenter =\n                    scroller.hasDragged =\n                        scroller.chartX =\n                            scroller.chartY = null;\n            }\n            /**\n             * Position the scrollbar, method called from a parent with defined\n             * dimensions.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#position\n             * @param {number} x\n             *        x-position on the chart\n             * @param {number} y\n             *        y-position on the chart\n             * @param {number} width\n             *        width of the scrollbar\n             * @param {number} height\n             *        height of the scrollbar\n             */\n            position(x, y, width, height) {\n                const scroller = this, options = scroller.options, { buttonsEnabled, margin = 0, vertical } = options, method = scroller.rendered ? 'animate' : 'attr';\n                let xOffset = height, yOffset = 0;\n                // Make the scrollbar visible when it is repositioned, #15763.\n                scroller.group.show();\n                scroller.x = x;\n                scroller.y = y + this.trackBorderWidth;\n                scroller.width = width; // Width with buttons\n                scroller.height = height;\n                scroller.xOffset = xOffset;\n                scroller.yOffset = yOffset;\n                // If Scrollbar is a vertical type, swap options:\n                if (vertical) {\n                    scroller.width = scroller.yOffset = width = yOffset = scroller.size;\n                    scroller.xOffset = xOffset = 0;\n                    scroller.yOffset = yOffset = buttonsEnabled ? scroller.size : 0;\n                    // Width without buttons\n                    scroller.barWidth = height - (buttonsEnabled ? width * 2 : 0);\n                    scroller.x = x = x + margin;\n                }\n                else {\n                    scroller.height = height = scroller.size;\n                    scroller.xOffset = xOffset = buttonsEnabled ? scroller.size : 0;\n                    // Width without buttons\n                    scroller.barWidth = width - (buttonsEnabled ? height * 2 : 0);\n                    scroller.y = scroller.y + margin;\n                }\n                // Set general position for a group:\n                scroller.group[method]({\n                    translateX: x,\n                    translateY: scroller.y\n                });\n                // Resize background/track:\n                scroller.track[method]({\n                    width: width,\n                    height: height\n                });\n                // Move right/bottom button to its place:\n                scroller.scrollbarButtons[1][method]({\n                    translateX: vertical ? 0 : width - xOffset,\n                    translateY: vertical ? height - yOffset : 0\n                });\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#removeEvents\n             */\n            removeEvents() {\n                this._events.forEach(function (args) {\n                    removeEvent.apply(null, args);\n                });\n                this._events.length = 0;\n            }\n            /**\n             * Render scrollbar with all required items.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#render\n             */\n            render() {\n                const scroller = this, renderer = scroller.renderer, options = scroller.options, size = scroller.size, styledMode = scroller.chart.styledMode, group = renderer.g('scrollbar')\n                    .attr({\n                    zIndex: options.zIndex\n                })\n                    .hide() // Initially hide the scrollbar #15863\n                    .add();\n                // Draw the scrollbar group\n                scroller.group = group;\n                // Draw the scrollbar track:\n                scroller.track = renderer.rect()\n                    .addClass('highcharts-scrollbar-track')\n                    .attr({\n                    r: options.trackBorderRadius || 0,\n                    height: size,\n                    width: size\n                }).add(group);\n                if (!styledMode) {\n                    scroller.track.attr({\n                        fill: options.trackBackgroundColor,\n                        stroke: options.trackBorderColor,\n                        'stroke-width': options.trackBorderWidth\n                    });\n                }\n                const trackBorderWidth = scroller.trackBorderWidth =\n                    scroller.track.strokeWidth();\n                scroller.track.attr({\n                    x: -crisp(0, trackBorderWidth),\n                    y: -crisp(0, trackBorderWidth)\n                });\n                // Draw the scrollbar itself\n                scroller.scrollbarGroup = renderer.g().add(group);\n                scroller.scrollbar = renderer.rect()\n                    .addClass('highcharts-scrollbar-thumb')\n                    .attr({\n                    height: size - trackBorderWidth,\n                    width: size - trackBorderWidth,\n                    r: options.barBorderRadius || 0\n                }).add(scroller.scrollbarGroup);\n                scroller.scrollbarRifles = renderer\n                    .path(Scrollbar.swapXY([\n                    ['M', -3, size / 4],\n                    ['L', -3, 2 * size / 3],\n                    ['M', 0, size / 4],\n                    ['L', 0, 2 * size / 3],\n                    ['M', 3, size / 4],\n                    ['L', 3, 2 * size / 3]\n                ], options.vertical))\n                    .addClass('highcharts-scrollbar-rifles')\n                    .add(scroller.scrollbarGroup);\n                if (!styledMode) {\n                    scroller.scrollbar.attr({\n                        fill: options.barBackgroundColor,\n                        stroke: options.barBorderColor,\n                        'stroke-width': options.barBorderWidth\n                    });\n                    scroller.scrollbarRifles.attr({\n                        stroke: options.rifleColor,\n                        'stroke-width': 1\n                    });\n                }\n                scroller.scrollbarStrokeWidth = scroller.scrollbar.strokeWidth();\n                scroller.scrollbarGroup.translate(-crisp(0, scroller.scrollbarStrokeWidth), -crisp(0, scroller.scrollbarStrokeWidth));\n                // Draw the buttons:\n                scroller.drawScrollbarButton(0);\n                scroller.drawScrollbarButton(1);\n            }\n            /**\n             * Set scrollbar size, with a given scale.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#setRange\n             * @param {number} from\n             *        scale (0-1) where bar should start\n             * @param {number} to\n             *        scale (0-1) where bar should end\n             */\n            setRange(from, to) {\n                const scroller = this, options = scroller.options, vertical = options.vertical, minWidth = options.minWidth, fullWidth = scroller.barWidth, method = (this.rendered &&\n                    !this.hasDragged &&\n                    !(this.chart.navigator && this.chart.navigator.hasDragged)) ? 'animate' : 'attr';\n                if (!defined(fullWidth)) {\n                    return;\n                }\n                const toPX = fullWidth * Math.min(to, 1);\n                let fromPX, newSize;\n                from = Math.max(from, 0);\n                fromPX = Math.ceil(fullWidth * from);\n                scroller.calculatedWidth = newSize = correctFloat(toPX - fromPX);\n                // We need to recalculate position, if minWidth is used\n                if (newSize < minWidth) {\n                    fromPX = (fullWidth - minWidth + newSize) * from;\n                    newSize = minWidth;\n                }\n                const newPos = Math.floor(fromPX + scroller.xOffset + scroller.yOffset);\n                const newRiflesPos = newSize / 2 - 0.5; // -0.5 -> rifle line width / 2\n                // Store current position:\n                scroller.from = from;\n                scroller.to = to;\n                if (!vertical) {\n                    scroller.scrollbarGroup[method]({\n                        translateX: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        width: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateX: newRiflesPos\n                    });\n                    scroller.scrollbarLeft = newPos;\n                    scroller.scrollbarTop = 0;\n                }\n                else {\n                    scroller.scrollbarGroup[method]({\n                        translateY: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        height: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateY: newRiflesPos\n                    });\n                    scroller.scrollbarTop = newPos;\n                    scroller.scrollbarLeft = 0;\n                }\n                if (newSize <= 12) {\n                    scroller.scrollbarRifles.hide();\n                }\n                else {\n                    scroller.scrollbarRifles.show();\n                }\n                // Show or hide the scrollbar based on the showFull setting\n                if (options.showFull === false) {\n                    if (from <= 0 && to >= 1) {\n                        scroller.group.hide();\n                    }\n                    else {\n                        scroller.group.show();\n                    }\n                }\n                scroller.rendered = true;\n            }\n            /**\n             * Checks if the extremes should be updated in response to a scrollbar\n             * change event.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#shouldUpdateExtremes\n             */\n            shouldUpdateExtremes(eventType) {\n                return (pick(this.options.liveRedraw, H.svg &&\n                    !H.isTouchDevice &&\n                    !this.chart.boosted) ||\n                    // Mouseup always should change extremes\n                    eventType === 'mouseup' ||\n                    eventType === 'touchend' ||\n                    // Internal events\n                    !defined(eventType));\n            }\n            trackClick(e) {\n                const scroller = this;\n                const normalizedEvent = scroller.chart.pointer?.normalize(e) || e, range = scroller.to - scroller.from, top = scroller.y + scroller.scrollbarTop, left = scroller.x + scroller.scrollbarLeft;\n                if ((scroller.options.vertical && normalizedEvent.chartY > top) ||\n                    (!scroller.options.vertical && normalizedEvent.chartX > left)) {\n                    // On the top or on the left side of the track:\n                    scroller.updatePosition(scroller.from + range, scroller.to + range);\n                }\n                else {\n                    // On the bottom or the right side of the track:\n                    scroller.updatePosition(scroller.from - range, scroller.to - range);\n                }\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Update the scrollbar with new options\n             *\n             * @private\n             * @function Highcharts.Scrollbar#update\n             * @param  {Highcharts.ScrollbarOptions} options\n             */\n            update(options) {\n                this.destroy();\n                this.init(this.chart.renderer, merge(true, this.options, options), this.chart);\n            }\n            /**\n             * Update position option in the Scrollbar, with normalized 0-1 scale\n             *\n             * @private\n             * @function Highcharts.Scrollbar#updatePosition\n             * @param  {number} from\n             * @param  {number} to\n             */\n            updatePosition(from, to) {\n                if (to > 1) {\n                    from = correctFloat(1 - correctFloat(to - from));\n                    to = 1;\n                }\n                if (from < 0) {\n                    to = correctFloat(to - from);\n                    from = 0;\n                }\n                this.from = from;\n                this.to = to;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        Scrollbar.defaultOptions = ScrollbarDefaults;\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        defaultOptions.scrollbar = merge(true, Scrollbar.defaultOptions, defaultOptions.scrollbar);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Scrollbar;\n    });\n    _registerModule(_modules, 'Stock/Navigator/Navigator.js', [_modules['Core/Axis/Axis.js'], _modules['Stock/Navigator/ChartNavigatorComposition.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorComposition.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Core/Renderer/SVG/SVGRenderer.js'], _modules['Core/Utilities.js']], function (Axis, ChartNavigatorComposition, D, H, NavigatorAxisAdditions, NavigatorComposition, Scrollbar, SVGRenderer, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { isTouchDevice } = H;\n        const { prototype: { symbols } } = SVGRenderer;\n        const { addEvent, clamp, correctFloat, defined, destroyObjectProperties, erase, extend, find, fireEvent, isArray, isNumber, merge, pick, removeEvent, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Finding the min or max of a set of variables where we don't know if they are\n         * defined, is a pattern that is repeated several places in Highcharts. Consider\n         * making this a global utility method.\n         * @private\n         */\n        function numExt(extreme, ...args) {\n            const numbers = [].filter.call(args, isNumber);\n            if (numbers.length) {\n                return Math[extreme].apply(0, numbers);\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Navigator class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Navigator\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         */\n        class Navigator {\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            static compose(ChartClass, AxisClass, SeriesClass) {\n                ChartNavigatorComposition.compose(ChartClass, Navigator);\n                NavigatorComposition.compose(ChartClass, AxisClass, SeriesClass);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                this.isDirty = false;\n                this.scrollbarHeight = 0;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Draw one of the handles on the side of the zoomed range in the navigator.\n             *\n             * @private\n             * @function Highcharts.Navigator#drawHandle\n             *\n             * @param {number} x\n             *        The x center for the handle\n             *\n             * @param {number} index\n             *        0 for left and 1 for right\n             *\n             * @param {boolean|undefined} inverted\n             *        Flag for chart.inverted\n             *\n             * @param {string} verb\n             *        Use 'animate' or 'attr'\n             */\n            drawHandle(x, index, inverted, verb) {\n                const navigator = this, height = navigator.navigatorOptions.handles.height;\n                // Place it\n                navigator.handles[index][verb](inverted ? {\n                    translateX: Math.round(navigator.left + navigator.height / 2),\n                    translateY: Math.round(navigator.top + parseInt(x, 10) + 0.5 - height)\n                } : {\n                    translateX: Math.round(navigator.left + parseInt(x, 10)),\n                    translateY: Math.round(navigator.top + navigator.height / 2 - height / 2 - 1)\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawOutline\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawOutline(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, maskInside = navigator.navigatorOptions.maskInside, outlineWidth = navigator.outline.strokeWidth(), halfOutline = outlineWidth / 2, outlineCorrection = (outlineWidth % 2) / 2, // #5800\n                scrollButtonSize = navigator.scrollButtonSize, navigatorSize = navigator.size, navigatorTop = navigator.top, height = navigator.height, lineTop = navigatorTop - halfOutline, lineBtm = navigatorTop + height;\n                let left = navigator.left, verticalMin, path;\n                if (inverted) {\n                    verticalMin = navigatorTop + zoomedMax + outlineCorrection;\n                    zoomedMax = navigatorTop + zoomedMin + outlineCorrection;\n                    path = [\n                        [\n                            'M',\n                            left + height,\n                            navigatorTop - scrollButtonSize - outlineCorrection\n                        ],\n                        // Top right of zoomed range\n                        ['L', left + height, verticalMin],\n                        ['L', left, verticalMin], // Top left of z.r.\n                        ['M', left, zoomedMax], // Bottom left of z.r.\n                        ['L', left + height, zoomedMax], // Bottom right of z.r.\n                        [\n                            'L',\n                            left + height,\n                            navigatorTop + navigatorSize + scrollButtonSize\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // Upper left of zoomed range\n                        ['M', left + height, verticalMin - halfOutline], \n                        // Upper right of z.r.\n                        [\n                            'L',\n                            left + height,\n                            zoomedMax + halfOutline\n                        ]);\n                    }\n                }\n                else {\n                    left -= scrollButtonSize;\n                    zoomedMin += left + scrollButtonSize - outlineCorrection;\n                    zoomedMax += left + scrollButtonSize - outlineCorrection;\n                    path = [\n                        // Left\n                        ['M', left, lineTop],\n                        // Upper left of zoomed range\n                        ['L', zoomedMin, lineTop],\n                        // Lower left of z.r.\n                        ['L', zoomedMin, lineBtm],\n                        // Lower right of z.r.\n                        ['M', zoomedMax, lineBtm],\n                        // Upper right of z.r.\n                        ['L', zoomedMax, lineTop],\n                        // Right\n                        [\n                            'L',\n                            left + navigatorSize + scrollButtonSize * 2,\n                            lineTop\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // Upper left of zoomed range\n                        ['M', zoomedMin - halfOutline, lineTop], \n                        // Upper right of z.r.\n                        ['L', zoomedMax + halfOutline, lineTop]);\n                    }\n                }\n                navigator.outline[verb]({\n                    d: path\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawMasks\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawMasks(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, left = navigator.left, top = navigator.top, navigatorHeight = navigator.height;\n                let height, width, x, y;\n                // Determine rectangle position & size\n                // According to (non)inverted position:\n                if (inverted) {\n                    x = [left, left, left];\n                    y = [top, top + zoomedMin, top + zoomedMax];\n                    width = [navigatorHeight, navigatorHeight, navigatorHeight];\n                    height = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                }\n                else {\n                    x = [left, left + zoomedMin, left + zoomedMax];\n                    y = [top, top, top];\n                    width = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                    height = [navigatorHeight, navigatorHeight, navigatorHeight];\n                }\n                navigator.shades.forEach((shade, i) => {\n                    shade[verb]({\n                        x: x[i],\n                        y: y[i],\n                        width: width[i],\n                        height: height[i]\n                    });\n                });\n            }\n            /**\n             * Generate and update DOM elements for a navigator:\n             *\n             * - main navigator group\n             *\n             * - all shades\n             *\n             * - outline\n             *\n             * - handles\n             *\n             * @private\n             * @function Highcharts.Navigator#renderElements\n             */\n            renderElements() {\n                const navigator = this, navigatorOptions = navigator.navigatorOptions, maskInside = navigatorOptions.maskInside, chart = navigator.chart, inverted = chart.inverted, renderer = chart.renderer, mouseCursor = {\n                    cursor: inverted ? 'ns-resize' : 'ew-resize'\n                }, \n                // Create the main navigator group\n                navigatorGroup = navigator.navigatorGroup ??\n                    (navigator.navigatorGroup = renderer\n                        .g('navigator')\n                        .attr({\n                        zIndex: 8,\n                        visibility: 'hidden'\n                    })\n                        .add());\n                // Create masks, each mask will get events and fill:\n                [\n                    !maskInside,\n                    maskInside,\n                    !maskInside\n                ].forEach((hasMask, index) => {\n                    const shade = navigator.shades[index] ??\n                        (navigator.shades[index] = renderer.rect()\n                            .addClass('highcharts-navigator-mask' +\n                            (index === 1 ? '-inside' : '-outside'))\n                            .add(navigatorGroup));\n                    if (!chart.styledMode) {\n                        shade.attr({\n                            fill: hasMask ? navigatorOptions.maskFill : 'rgba(0,0,0,0)'\n                        });\n                        if (index === 1) {\n                            shade.css(mouseCursor);\n                        }\n                    }\n                });\n                // Create the outline:\n                if (!navigator.outline) {\n                    navigator.outline = renderer.path()\n                        .addClass('highcharts-navigator-outline')\n                        .add(navigatorGroup);\n                }\n                if (!chart.styledMode) {\n                    navigator.outline.attr({\n                        'stroke-width': navigatorOptions.outlineWidth,\n                        stroke: navigatorOptions.outlineColor\n                    });\n                }\n                // Create the handlers:\n                if (navigatorOptions.handles?.enabled) {\n                    const handlesOptions = navigatorOptions.handles, { height, width } = handlesOptions;\n                    [0, 1].forEach((index) => {\n                        const symbolName = handlesOptions.symbols[index];\n                        if (!navigator.handles[index]) {\n                            navigator.handles[index] = renderer.symbol(symbolName, -width / 2 - 1, 0, width, height, handlesOptions);\n                            // Z index is 6 for right handle, 7 for left. Can't be 10,\n                            // because of the tooltip in inverted chart (#2908).\n                            navigator.handles[index].attr({ zIndex: 7 - index })\n                                .addClass('highcharts-navigator-handle ' +\n                                'highcharts-navigator-handle-' +\n                                ['left', 'right'][index]).add(navigatorGroup);\n                            // If the navigator symbol changed, update its path and name\n                        }\n                        else if (symbolName !== navigator.handles[index].symbolName) {\n                            const symbolFn = symbols[symbolName], path = symbolFn.call(symbols, -width / 2 - 1, 0, width, height);\n                            navigator.handles[index].attr({\n                                d: path\n                            });\n                            navigator.handles[index].symbolName = symbolName;\n                        }\n                        if (chart.inverted) {\n                            navigator.handles[index].attr({\n                                rotation: 90,\n                                rotationOriginX: Math.floor(-width / 2),\n                                rotationOriginY: (height + width) / 2\n                            });\n                        }\n                        if (!chart.styledMode) {\n                            navigator.handles[index]\n                                .attr({\n                                fill: handlesOptions.backgroundColor,\n                                stroke: handlesOptions.borderColor,\n                                'stroke-width': handlesOptions.lineWidth,\n                                width: handlesOptions.width,\n                                height: handlesOptions.height,\n                                x: -width / 2 - 1,\n                                y: 0\n                            })\n                                .css(mouseCursor);\n                        }\n                    });\n                }\n            }\n            /**\n             * Update navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#update\n             *\n             * @param {Highcharts.NavigatorOptions} options\n             *        Options to merge in when updating navigator\n             */\n            update(options, redraw = false) {\n                const chart = this.chart, invertedUpdate = chart.options.chart.inverted !==\n                    chart.scrollbar?.options.vertical;\n                merge(true, chart.options.navigator, options);\n                this.navigatorOptions = chart.options.navigator || {};\n                this.setOpposite();\n                // Revert to destroy/init for navigator/scrollbar enabled toggle\n                if (defined(options.enabled) || invertedUpdate) {\n                    this.destroy();\n                    this.navigatorEnabled = options.enabled || this.navigatorEnabled;\n                    return this.init(chart);\n                }\n                if (this.navigatorEnabled) {\n                    this.isDirty = true;\n                    if (options.adaptToUpdatedData === false) {\n                        this.baseSeries.forEach((series) => {\n                            removeEvent(series, 'updatedData', this.updatedDataHandler);\n                        }, this);\n                    }\n                    if (options.adaptToUpdatedData) {\n                        this.baseSeries.forEach((series) => {\n                            series.eventsToUnbind.push(addEvent(series, 'updatedData', this.updatedDataHandler));\n                        }, this);\n                    }\n                    // Update navigator series\n                    if (options.series || options.baseSeries) {\n                        this.setBaseSeries(void 0, false);\n                    }\n                    // Update navigator axis\n                    if (options.height || options.xAxis || options.yAxis) {\n                        this.height = options.height ?? this.height;\n                        const offsets = this.getXAxisOffsets();\n                        this.xAxis.update({\n                            ...options.xAxis,\n                            offsets,\n                            [chart.inverted ? 'width' : 'height']: this.height,\n                            [chart.inverted ? 'height' : 'width']: void 0\n                        }, false);\n                        this.yAxis.update({\n                            ...options.yAxis,\n                            [chart.inverted ? 'width' : 'height']: this.height\n                        }, false);\n                    }\n                }\n                if (redraw) {\n                    chart.redraw();\n                }\n            }\n            /**\n             * Render the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#render\n             * @param {number} min\n             *        X axis value minimum\n             * @param {number} max\n             *        X axis value maximum\n             * @param {number} [pxMin]\n             *        Pixel value minimum\n             * @param {number} [pxMax]\n             *        Pixel value maximum\n             */\n            render(min, max, pxMin, pxMax) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, pointRange = xAxis.pointRange || 0, scrollbarXAxis = xAxis.navigatorAxis.fake ? chart.xAxis[0] : xAxis, navigatorEnabled = navigator.navigatorEnabled, rendered = navigator.rendered, inverted = chart.inverted, minRange = chart.xAxis[0].minRange, maxRange = chart.xAxis[0].options.maxRange, scrollButtonSize = navigator.scrollButtonSize;\n                let navigatorWidth, scrollbarLeft, scrollbarTop, scrollbarHeight = navigator.scrollbarHeight, navigatorSize, verb;\n                // Don't redraw while moving the handles (#4703).\n                if (this.hasDragged && !defined(pxMin)) {\n                    return;\n                }\n                if (this.isDirty) {\n                    // Update DOM navigator elements\n                    this.renderElements();\n                }\n                min = correctFloat(min - pointRange / 2);\n                max = correctFloat(max + pointRange / 2);\n                // Don't render the navigator until we have data (#486, #4202, #5172).\n                if (!isNumber(min) || !isNumber(max)) {\n                    // However, if navigator was already rendered, we may need to resize\n                    // it. For example hidden series, but visible navigator (#6022).\n                    if (rendered) {\n                        pxMin = 0;\n                        pxMax = pick(xAxis.width, scrollbarXAxis.width);\n                    }\n                    else {\n                        return;\n                    }\n                }\n                navigator.left = pick(xAxis.left, \n                // In case of scrollbar only, without navigator\n                chart.plotLeft + scrollButtonSize +\n                    (inverted ? chart.plotWidth : 0));\n                let zoomedMax = navigator.size = navigatorSize = pick(xAxis.len, (inverted ? chart.plotHeight : chart.plotWidth) -\n                    2 * scrollButtonSize);\n                if (inverted) {\n                    navigatorWidth = scrollbarHeight;\n                }\n                else {\n                    navigatorWidth = navigatorSize + 2 * scrollButtonSize;\n                }\n                // Get the pixel position of the handles\n                pxMin = pick(pxMin, xAxis.toPixels(min, true));\n                pxMax = pick(pxMax, xAxis.toPixels(max, true));\n                // Verify (#1851, #2238)\n                if (!isNumber(pxMin) || Math.abs(pxMin) === Infinity) {\n                    pxMin = 0;\n                    pxMax = navigatorWidth;\n                }\n                // Are we below the minRange? (#2618, #6191)\n                const newMin = xAxis.toValue(pxMin, true), newMax = xAxis.toValue(pxMax, true), currentRange = Math.abs(correctFloat(newMax - newMin));\n                if (currentRange < minRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - minRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + minRange + pointRange, true);\n                    }\n                }\n                else if (defined(maxRange) &&\n                    correctFloat(currentRange - pointRange) > maxRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - maxRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + maxRange + pointRange, true);\n                    }\n                }\n                // Handles are allowed to cross, but never exceed the plot area\n                navigator.zoomedMax = clamp(Math.max(pxMin, pxMax), 0, zoomedMax);\n                navigator.zoomedMin = clamp(navigator.fixedWidth ?\n                    navigator.zoomedMax - navigator.fixedWidth :\n                    Math.min(pxMin, pxMax), 0, zoomedMax);\n                navigator.range = navigator.zoomedMax - navigator.zoomedMin;\n                zoomedMax = Math.round(navigator.zoomedMax);\n                const zoomedMin = Math.round(navigator.zoomedMin);\n                if (navigatorEnabled) {\n                    navigator.navigatorGroup.attr({\n                        visibility: 'inherit'\n                    });\n                    // Place elements\n                    verb = rendered && !navigator.hasDragged ? 'animate' : 'attr';\n                    navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    if (navigator.navigatorOptions.handles.enabled) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n                if (navigator.scrollbar) {\n                    if (inverted) {\n                        scrollbarTop = navigator.top - scrollButtonSize;\n                        scrollbarLeft = navigator.left - scrollbarHeight +\n                            (navigatorEnabled || !scrollbarXAxis.opposite ? 0 :\n                                // Multiple axes has offsets:\n                                (scrollbarXAxis.titleOffset || 0) +\n                                    // Self margin from the axis.title\n                                    scrollbarXAxis.axisTitleMargin);\n                        scrollbarHeight = navigatorSize + 2 * scrollButtonSize;\n                    }\n                    else {\n                        scrollbarTop = navigator.top + (navigatorEnabled ?\n                            navigator.height :\n                            -scrollbarHeight);\n                        scrollbarLeft = navigator.left - scrollButtonSize;\n                    }\n                    // Reposition scrollbar\n                    navigator.scrollbar.position(scrollbarLeft, scrollbarTop, navigatorWidth, scrollbarHeight);\n                    // Keep scale 0-1\n                    navigator.scrollbar.setRange(\n                    // Use real value, not rounded because range can be very small\n                    // (#1716)\n                    navigator.zoomedMin / (navigatorSize || 1), navigator.zoomedMax / (navigatorSize || 1));\n                }\n                navigator.rendered = true;\n                this.isDirty = false;\n                fireEvent(this, 'afterRender');\n            }\n            /**\n             * Set up the mouse and touch events for the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#addMouseEvents\n             */\n            addMouseEvents() {\n                const navigator = this, chart = navigator.chart, container = chart.container;\n                let eventsToUnbind = [], mouseMoveHandler, mouseUpHandler;\n                /**\n                 * Create mouse events' handlers.\n                 * Make them as separate functions to enable wrapping them:\n                 */\n                navigator.mouseMoveHandler = mouseMoveHandler = function (e) {\n                    navigator.onMouseMove(e);\n                };\n                navigator.mouseUpHandler = mouseUpHandler = function (e) {\n                    navigator.onMouseUp(e);\n                };\n                // Add shades and handles mousedown events\n                eventsToUnbind = navigator.getPartsEvents('mousedown');\n                eventsToUnbind.push(\n                // Add mouse move and mouseup events. These are bind to doc/div,\n                // because Navigator.grabbedSomething flags are stored in mousedown\n                // events\n                addEvent(chart.renderTo, 'mousemove', mouseMoveHandler), addEvent(container.ownerDocument, 'mouseup', mouseUpHandler), \n                // Touch events\n                addEvent(chart.renderTo, 'touchmove', mouseMoveHandler), addEvent(container.ownerDocument, 'touchend', mouseUpHandler));\n                eventsToUnbind.concat(navigator.getPartsEvents('touchstart'));\n                navigator.eventsToUnbind = eventsToUnbind;\n                // Data events\n                if (navigator.series && navigator.series[0]) {\n                    eventsToUnbind.push(addEvent(navigator.series[0].xAxis, 'foundExtremes', function () {\n                        chart.navigator.modifyNavigatorAxisExtremes();\n                    }));\n                }\n            }\n            /**\n             * Generate events for handles and masks\n             *\n             * @private\n             * @function Highcharts.Navigator#getPartsEvents\n             *\n             * @param {string} eventName\n             *        Event name handler, 'mousedown' or 'touchstart'\n             *\n             * @return {Array<Function>}\n             *         An array of functions to remove navigator functions from the\n             *         events again.\n             */\n            getPartsEvents(eventName) {\n                const navigator = this, events = [];\n                ['shades', 'handles'].forEach(function (name) {\n                    navigator[name].forEach(function (navigatorItem, index) {\n                        events.push(addEvent(navigatorItem.element, eventName, function (e) {\n                            navigator[name + 'Mousedown'](e, index);\n                        }));\n                    });\n                });\n                return events;\n            }\n            /**\n             * Mousedown on a shaded mask, either:\n             *\n             * - will be stored for future drag&drop\n             *\n             * - will directly shift to a new range\n             *\n             * @private\n             * @function Highcharts.Navigator#shadesMousedown\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             *\n             * @param {number} index\n             *        Index of a mask in Navigator.shades array\n             */\n            shadesMousedown(e, index) {\n                e = this.chart.pointer?.normalize(e) || e;\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, zoomedMin = navigator.zoomedMin, navigatorSize = navigator.size, range = navigator.range;\n                let navigatorPosition = navigator.left, chartX = e.chartX, fixedMax, fixedMin, ext, left;\n                // For inverted chart, swap some options:\n                if (chart.inverted) {\n                    chartX = e.chartY;\n                    navigatorPosition = navigator.top;\n                }\n                if (index === 1) {\n                    // Store information for drag&drop\n                    navigator.grabbedCenter = chartX;\n                    navigator.fixedWidth = range;\n                    navigator.dragOffset = chartX - zoomedMin;\n                }\n                else {\n                    // Shift the range by clicking on shaded areas\n                    left = chartX - navigatorPosition - range / 2;\n                    if (index === 0) {\n                        left = Math.max(0, left);\n                    }\n                    else if (index === 2 && left + range >= navigatorSize) {\n                        left = navigatorSize - range;\n                        if (navigator.reversedExtremes) {\n                            // #7713\n                            left -= range;\n                            fixedMin = navigator.getUnionExtremes().dataMin;\n                        }\n                        else {\n                            // #2293, #3543\n                            fixedMax = navigator.getUnionExtremes().dataMax;\n                        }\n                    }\n                    if (left !== zoomedMin) { // It has actually moved\n                        navigator.fixedWidth = range; // #1370\n                        ext = xAxis.navigatorAxis.toFixedRange(left, left + range, fixedMin, fixedMax);\n                        if (defined(ext.min)) { // #7411\n                            fireEvent(this, 'setRange', {\n                                min: Math.min(ext.min, ext.max),\n                                max: Math.max(ext.min, ext.max),\n                                redraw: true,\n                                eventArguments: {\n                                    trigger: 'navigator'\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n            /**\n             * Mousedown on a handle mask.\n             * Will store necessary information for drag&drop.\n             *\n             * @private\n             * @function Highcharts.Navigator#handlesMousedown\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             * @param {number} index\n             *        Index of a handle in Navigator.handles array\n             */\n            handlesMousedown(e, index) {\n                e = this.chart.pointer?.normalize(e) || e;\n                const navigator = this, chart = navigator.chart, baseXAxis = chart.xAxis[0], \n                // For reversed axes, min and max are changed,\n                // so the other extreme should be stored\n                reverse = navigator.reversedExtremes;\n                if (index === 0) {\n                    // Grab the left handle\n                    navigator.grabbedLeft = true;\n                    navigator.otherHandlePos = navigator.zoomedMax;\n                    navigator.fixedExtreme = reverse ? baseXAxis.min : baseXAxis.max;\n                }\n                else {\n                    // Grab the right handle\n                    navigator.grabbedRight = true;\n                    navigator.otherHandlePos = navigator.zoomedMin;\n                    navigator.fixedExtreme = reverse ? baseXAxis.max : baseXAxis.min;\n                }\n                chart.setFixedRange(void 0);\n            }\n            /**\n             * Mouse move event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseMove\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseMove(e) {\n                const navigator = this, chart = navigator.chart, navigatorSize = navigator.navigatorSize, range = navigator.range, dragOffset = navigator.dragOffset, inverted = chart.inverted;\n                let left = navigator.left, chartX;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when holding\n                // the finger down in the center of the scrollbar. This should be\n                // ignored.\n                if (!e.touches || e.touches[0].pageX !== 0) { // #4696\n                    e = chart.pointer?.normalize(e) || e;\n                    chartX = e.chartX;\n                    // Swap some options for inverted chart\n                    if (inverted) {\n                        left = navigator.top;\n                        chartX = e.chartY;\n                    }\n                    // Drag left handle or top handle\n                    if (navigator.grabbedLeft) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, chartX - left, navigator.otherHandlePos);\n                        // Drag right handle or bottom handle\n                    }\n                    else if (navigator.grabbedRight) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, navigator.otherHandlePos, chartX - left);\n                        // Drag scrollbar or open area in navigator\n                    }\n                    else if (navigator.grabbedCenter) {\n                        navigator.hasDragged = true;\n                        if (chartX < dragOffset) { // Outside left\n                            chartX = dragOffset;\n                            // Outside right\n                        }\n                        else if (chartX >\n                            navigatorSize + dragOffset - range) {\n                            chartX = navigatorSize + dragOffset - range;\n                        }\n                        navigator.render(0, 0, chartX - dragOffset, chartX - dragOffset + range);\n                    }\n                    if (navigator.hasDragged &&\n                        navigator.scrollbar &&\n                        pick(navigator.scrollbar.options.liveRedraw, \n                        // By default, don't run live redraw on touch\n                        // devices or if the chart is in boost.\n                        !isTouchDevice &&\n                            !this.chart.boosted)) {\n                        e.DOMType = e.type;\n                        setTimeout(function () {\n                            navigator.onMouseUp(e);\n                        }, 0);\n                    }\n                }\n            }\n            /**\n             * Mouse up event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseUp\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseUp(e) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, scrollbar = navigator.scrollbar, DOMEvent = e.DOMEvent || e, inverted = chart.inverted, verb = navigator.rendered && !navigator.hasDragged ?\n                    'animate' : 'attr';\n                let zoomedMax, zoomedMin, unionExtremes, fixedMin, fixedMax, ext;\n                if (\n                // MouseUp is called for both, navigator and scrollbar (that order),\n                // which causes calling afterSetExtremes twice. Prevent first call\n                // by checking if scrollbar is going to set new extremes (#6334)\n                (navigator.hasDragged && (!scrollbar || !scrollbar.hasDragged)) ||\n                    e.trigger === 'scrollbar') {\n                    unionExtremes = navigator.getUnionExtremes();\n                    // When dragging one handle, make sure the other one doesn't change\n                    if (navigator.zoomedMin === navigator.otherHandlePos) {\n                        fixedMin = navigator.fixedExtreme;\n                    }\n                    else if (navigator.zoomedMax === navigator.otherHandlePos) {\n                        fixedMax = navigator.fixedExtreme;\n                    }\n                    // Snap to right edge (#4076)\n                    if (navigator.zoomedMax === navigator.size) {\n                        fixedMax = navigator.reversedExtremes ?\n                            unionExtremes.dataMin :\n                            unionExtremes.dataMax;\n                    }\n                    // Snap to left edge (#7576)\n                    if (navigator.zoomedMin === 0) {\n                        fixedMin = navigator.reversedExtremes ?\n                            unionExtremes.dataMax :\n                            unionExtremes.dataMin;\n                    }\n                    ext = xAxis.navigatorAxis.toFixedRange(navigator.zoomedMin, navigator.zoomedMax, fixedMin, fixedMax);\n                    if (defined(ext.min)) {\n                        fireEvent(this, 'setRange', {\n                            min: Math.min(ext.min, ext.max),\n                            max: Math.max(ext.min, ext.max),\n                            redraw: true,\n                            animation: navigator.hasDragged ? false : null,\n                            eventArguments: {\n                                trigger: 'navigator',\n                                triggerOp: 'navigator-drag',\n                                DOMEvent: DOMEvent // #1838\n                            }\n                        });\n                    }\n                }\n                if (e.DOMType !== 'mousemove' &&\n                    e.DOMType !== 'touchmove') {\n                    navigator.grabbedLeft = navigator.grabbedRight =\n                        navigator.grabbedCenter = navigator.fixedWidth =\n                            navigator.fixedExtreme = navigator.otherHandlePos =\n                                navigator.hasDragged = navigator.dragOffset = null;\n                }\n                // Update position of navigator shades, outline and handles (#12573)\n                if (navigator.navigatorEnabled &&\n                    isNumber(navigator.zoomedMin) &&\n                    isNumber(navigator.zoomedMax)) {\n                    zoomedMin = Math.round(navigator.zoomedMin);\n                    zoomedMax = Math.round(navigator.zoomedMax);\n                    if (navigator.shades) {\n                        navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.outline) {\n                        navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.navigatorOptions.handles.enabled &&\n                        Object.keys(navigator.handles).length ===\n                            navigator.handles.length) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeEvents\n             */\n            removeEvents() {\n                if (this.eventsToUnbind) {\n                    this.eventsToUnbind.forEach(function (unbind) {\n                        unbind();\n                    });\n                    this.eventsToUnbind = void 0;\n                }\n                this.removeBaseSeriesEvents();\n            }\n            /**\n             * Remove data events.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeBaseSeriesEvents\n             */\n            removeBaseSeriesEvents() {\n                const baseSeries = this.baseSeries || [];\n                if (this.navigatorEnabled && baseSeries[0]) {\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        baseSeries.forEach(function (series) {\n                            removeEvent(series, 'updatedData', this.updatedDataHandler);\n                        }, this);\n                    }\n                    // We only listen for extremes-events on the first baseSeries\n                    if (baseSeries[0].xAxis) {\n                        removeEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes);\n                    }\n                }\n            }\n            /**\n             * Calculate the navigator xAxis offsets\n             *\n             * @private\n             */\n            getXAxisOffsets() {\n                return (this.chart.inverted ?\n                    [this.scrollButtonSize, 0, -this.scrollButtonSize, 0] :\n                    [0, -this.scrollButtonSize, 0, this.scrollButtonSize]);\n            }\n            /**\n             * Initialize the Navigator object\n             *\n             * @private\n             * @function Highcharts.Navigator#init\n             */\n            init(chart) {\n                const chartOptions = chart.options, navigatorOptions = chartOptions.navigator || {}, navigatorEnabled = navigatorOptions.enabled, scrollbarOptions = chartOptions.scrollbar || {}, scrollbarEnabled = scrollbarOptions.enabled, height = navigatorEnabled && navigatorOptions.height || 0, scrollbarHeight = scrollbarEnabled && scrollbarOptions.height || 0, scrollButtonSize = scrollbarOptions.buttonsEnabled && scrollbarHeight || 0;\n                this.handles = [];\n                this.shades = [];\n                this.chart = chart;\n                this.setBaseSeries();\n                this.height = height;\n                this.scrollbarHeight = scrollbarHeight;\n                this.scrollButtonSize = scrollButtonSize;\n                this.scrollbarEnabled = scrollbarEnabled;\n                this.navigatorEnabled = navigatorEnabled;\n                this.navigatorOptions = navigatorOptions;\n                this.scrollbarOptions = scrollbarOptions;\n                this.setOpposite();\n                const navigator = this, baseSeries = navigator.baseSeries, xAxisIndex = chart.xAxis.length, yAxisIndex = chart.yAxis.length, baseXaxis = baseSeries && baseSeries[0] && baseSeries[0].xAxis ||\n                    chart.xAxis[0] || { options: {} };\n                chart.isDirtyBox = true;\n                if (navigator.navigatorEnabled) {\n                    const offsets = this.getXAxisOffsets();\n                    // An x axis is required for scrollbar also\n                    navigator.xAxis = new Axis(chart, merge({\n                        // Inherit base xAxis' break, ordinal options and overscroll\n                        breaks: baseXaxis.options.breaks,\n                        ordinal: baseXaxis.options.ordinal,\n                        overscroll: baseXaxis.options.overscroll\n                    }, navigatorOptions.xAxis, {\n                        type: 'datetime',\n                        index: xAxisIndex,\n                        isInternal: true,\n                        offset: 0,\n                        keepOrdinalPadding: true, // #2436\n                        startOnTick: false,\n                        endOnTick: false,\n                        // Inherit base xAxis' padding when ordinal is false (#16915).\n                        minPadding: baseXaxis.options.ordinal ? 0 :\n                            baseXaxis.options.minPadding,\n                        maxPadding: baseXaxis.options.ordinal ? 0 :\n                            baseXaxis.options.maxPadding,\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        offsets,\n                        width: height\n                    } : {\n                        offsets,\n                        height\n                    }), 'xAxis');\n                    navigator.yAxis = new Axis(chart, merge(navigatorOptions.yAxis, {\n                        alignTicks: false,\n                        offset: 0,\n                        index: yAxisIndex,\n                        isInternal: true,\n                        reversed: pick((navigatorOptions.yAxis &&\n                            navigatorOptions.yAxis.reversed), (chart.yAxis[0] && chart.yAxis[0].reversed), false), // #14060\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        width: height\n                    } : {\n                        height: height\n                    }), 'yAxis');\n                    // If we have a base series, initialize the navigator series\n                    if (baseSeries || navigatorOptions.series.data) {\n                        navigator.updateNavigatorSeries(false);\n                        // If not, set up an event to listen for added series\n                    }\n                    else if (chart.series.length === 0) {\n                        navigator.unbindRedraw = addEvent(chart, 'beforeRedraw', function () {\n                            // We've got one, now add it as base\n                            if (chart.series.length > 0 && !navigator.series) {\n                                navigator.setBaseSeries();\n                                navigator.unbindRedraw(); // Reset\n                            }\n                        });\n                    }\n                    navigator.reversedExtremes = (chart.inverted && !navigator.xAxis.reversed) || (!chart.inverted && navigator.xAxis.reversed);\n                    // Render items, so we can bind events to them:\n                    navigator.renderElements();\n                    // Add mouse events\n                    navigator.addMouseEvents();\n                    // In case of scrollbar only, fake an x axis to get translation\n                }\n                else {\n                    navigator.xAxis = {\n                        chart,\n                        navigatorAxis: {\n                            fake: true\n                        },\n                        translate: function (value, reverse) {\n                            const axis = chart.xAxis[0], ext = axis.getExtremes(), scrollTrackWidth = axis.len - 2 * scrollButtonSize, min = numExt('min', axis.options.min, ext.dataMin), valueRange = numExt('max', axis.options.max, ext.dataMax) - min;\n                            return reverse ?\n                                // From pixel to value\n                                (value * valueRange / scrollTrackWidth) + min :\n                                // From value to pixel\n                                scrollTrackWidth * (value - min) / valueRange;\n                        },\n                        toPixels: function (value) {\n                            return this.translate(value);\n                        },\n                        toValue: function (value) {\n                            return this.translate(value, true);\n                        }\n                    };\n                    navigator.xAxis.navigatorAxis.axis = navigator.xAxis;\n                    navigator.xAxis.navigatorAxis.toFixedRange = (NavigatorAxisAdditions.prototype.toFixedRange.bind(navigator.xAxis.navigatorAxis));\n                }\n                // Initialize the scrollbar\n                if (chart.options.scrollbar.enabled) {\n                    const options = merge(chart.options.scrollbar, { vertical: chart.inverted });\n                    if (!isNumber(options.margin) && navigator.navigatorEnabled) {\n                        options.margin = chart.inverted ? -3 : 3;\n                    }\n                    chart.scrollbar = navigator.scrollbar = new Scrollbar(chart.renderer, options, chart);\n                    addEvent(navigator.scrollbar, 'changed', function (e) {\n                        const range = navigator.size, to = range * this.to, from = range * this.from;\n                        navigator.hasDragged = navigator.scrollbar.hasDragged;\n                        navigator.render(0, 0, from, to);\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            setTimeout(function () {\n                                navigator.onMouseUp(e);\n                            });\n                        }\n                    });\n                }\n                // Add data events\n                navigator.addBaseSeriesEvents();\n                // Add redraw events\n                navigator.addChartEvents();\n            }\n            /**\n             * Set the opposite property on navigator\n             *\n             * @private\n             */\n            setOpposite() {\n                const navigatorOptions = this.navigatorOptions, navigatorEnabled = this.navigatorEnabled, chart = this.chart;\n                this.opposite = pick(navigatorOptions.opposite, Boolean(!navigatorEnabled && chart.inverted)); // #6262\n            }\n            /**\n             * Get the union data extremes of the chart - the outer data extremes of the\n             * base X axis and the navigator axis.\n             *\n             * @private\n             * @function Highcharts.Navigator#getUnionExtremes\n             */\n            getUnionExtremes(returnFalseOnNoBaseSeries) {\n                const baseAxis = this.chart.xAxis[0], navAxis = this.xAxis, navAxisOptions = navAxis.options, baseAxisOptions = baseAxis.options;\n                let ret;\n                if (!returnFalseOnNoBaseSeries || baseAxis.dataMin !== null) {\n                    ret = {\n                        dataMin: pick(// #4053\n                        navAxisOptions && navAxisOptions.min, numExt('min', baseAxisOptions.min, baseAxis.dataMin, navAxis.dataMin, navAxis.min)),\n                        dataMax: pick(navAxisOptions && navAxisOptions.max, numExt('max', baseAxisOptions.max, baseAxis.dataMax, navAxis.dataMax, navAxis.max))\n                    };\n                }\n                return ret;\n            }\n            /**\n             * Set the base series and update the navigator series from this. With a bit\n             * of modification we should be able to make this an API method to be called\n             * from the outside\n             *\n             * @private\n             * @function Highcharts.Navigator#setBaseSeries\n             * @param {Highcharts.SeriesOptionsType} [baseSeriesOptions]\n             *        Additional series options for a navigator\n             * @param {boolean} [redraw]\n             *        Whether to redraw after update.\n             */\n            setBaseSeries(baseSeriesOptions, redraw) {\n                const chart = this.chart, baseSeries = this.baseSeries = [];\n                baseSeriesOptions = (baseSeriesOptions ||\n                    chart.options && chart.options.navigator.baseSeries ||\n                    (chart.series.length ?\n                        // Find the first non-navigator series (#8430)\n                        find(chart.series, (s) => (!s.options.isInternal)).index :\n                        0));\n                // Iterate through series and add the ones that should be shown in\n                // navigator.\n                (chart.series || []).forEach((series, i) => {\n                    if (\n                    // Don't include existing nav series\n                    !series.options.isInternal &&\n                        (series.options.showInNavigator ||\n                            (i === baseSeriesOptions ||\n                                series.options.id === baseSeriesOptions) &&\n                                series.options.showInNavigator !== false)) {\n                        baseSeries.push(series);\n                    }\n                });\n                // When run after render, this.xAxis already exists\n                if (this.xAxis && !this.xAxis.navigatorAxis.fake) {\n                    this.updateNavigatorSeries(true, redraw);\n                }\n            }\n            /**\n             * Update series in the navigator from baseSeries, adding new if does not\n             * exist.\n             *\n             * @private\n             * @function Highcharts.Navigator.updateNavigatorSeries\n             */\n            updateNavigatorSeries(addEvents, redraw) {\n                const navigator = this, chart = navigator.chart, baseSeries = navigator.baseSeries, navSeriesMixin = {\n                    enableMouseTracking: false,\n                    index: null, // #6162\n                    linkedTo: null, // #6734\n                    group: 'nav', // For columns\n                    padXAxis: false,\n                    xAxis: this.navigatorOptions.xAxis?.id,\n                    yAxis: this.navigatorOptions.yAxis?.id,\n                    showInLegend: false,\n                    stacking: void 0, // #4823\n                    isInternal: true,\n                    states: {\n                        inactive: {\n                            opacity: 1\n                        }\n                    }\n                }, \n                // Remove navigator series that are no longer in the baseSeries\n                navigatorSeries = navigator.series =\n                    (navigator.series || []).filter((navSeries) => {\n                        const base = navSeries.baseSeries;\n                        if (baseSeries.indexOf(base) < 0) { // Not in array\n                            // If there is still a base series connected to this\n                            // series, remove event handler and reference.\n                            if (base) {\n                                removeEvent(base, 'updatedData', navigator.updatedDataHandler);\n                                delete base.navigatorSeries;\n                            }\n                            // Kill the nav series. It may already have been\n                            // destroyed (#8715).\n                            if (navSeries.chart) {\n                                navSeries.destroy();\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                let baseOptions, mergedNavSeriesOptions, chartNavigatorSeriesOptions = navigator.navigatorOptions.series, baseNavigatorOptions;\n                // Go through each base series and merge the options to create new\n                // series\n                if (baseSeries && baseSeries.length) {\n                    baseSeries.forEach((base) => {\n                        const linkedNavSeries = base.navigatorSeries, userNavOptions = extend(\n                        // Grab color and visibility from base as default\n                        {\n                            color: base.color,\n                            visible: base.visible\n                        }, !isArray(chartNavigatorSeriesOptions) ?\n                            chartNavigatorSeriesOptions :\n                            defaultOptions.navigator.series);\n                        // Don't update if the series exists in nav and we have disabled\n                        // adaptToUpdatedData.\n                        if (linkedNavSeries &&\n                            navigator.navigatorOptions.adaptToUpdatedData === false) {\n                            return;\n                        }\n                        navSeriesMixin.name = 'Navigator ' + baseSeries.length;\n                        baseOptions = base.options || {};\n                        baseNavigatorOptions = baseOptions.navigatorOptions || {};\n                        // The dataLabels options are not merged correctly\n                        // if the settings are an array, #13847.\n                        userNavOptions.dataLabels = splat(userNavOptions.dataLabels);\n                        mergedNavSeriesOptions = merge(baseOptions, navSeriesMixin, userNavOptions, baseNavigatorOptions);\n                        // Once nav series type is resolved, pick correct pointRange\n                        mergedNavSeriesOptions.pointRange = pick(\n                        // Stricte set pointRange in options\n                        userNavOptions.pointRange, baseNavigatorOptions.pointRange, \n                        // Fallback to default values, e.g. `null` for column\n                        defaultOptions.plotOptions[mergedNavSeriesOptions.type || 'line'].pointRange);\n                        // Merge data separately. Do a slice to avoid mutating the\n                        // navigator options from base series (#4923).\n                        const navigatorSeriesData = baseNavigatorOptions.data || userNavOptions.data;\n                        navigator.hasNavigatorData =\n                            navigator.hasNavigatorData || !!navigatorSeriesData;\n                        mergedNavSeriesOptions.data =\n                            navigatorSeriesData ||\n                                baseOptions.data && baseOptions.data.slice(0);\n                        // Update or add the series\n                        if (linkedNavSeries && linkedNavSeries.options) {\n                            linkedNavSeries.update(mergedNavSeriesOptions, redraw);\n                        }\n                        else {\n                            base.navigatorSeries = chart.initSeries(mergedNavSeriesOptions);\n                            // Set data on initial run with dataSorting enabled (#20318)\n                            chart.setSortedData();\n                            base.navigatorSeries.baseSeries = base; // Store ref\n                            navigatorSeries.push(base.navigatorSeries);\n                        }\n                    });\n                }\n                // If user has defined data (and no base series) or explicitly defined\n                // navigator.series as an array, we create these series on top of any\n                // base series.\n                if (chartNavigatorSeriesOptions.data &&\n                    !(baseSeries && baseSeries.length) ||\n                    isArray(chartNavigatorSeriesOptions)) {\n                    navigator.hasNavigatorData = false;\n                    // Allow navigator.series to be an array\n                    chartNavigatorSeriesOptions =\n                        splat(chartNavigatorSeriesOptions);\n                    chartNavigatorSeriesOptions.forEach((userSeriesOptions, i) => {\n                        navSeriesMixin.name =\n                            'Navigator ' + (navigatorSeries.length + 1);\n                        mergedNavSeriesOptions = merge(defaultOptions.navigator.series, {\n                            // Since we don't have a base series to pull color from,\n                            // try to fake it by using color from series with same\n                            // index. Otherwise pull from the colors array. We need\n                            // an explicit color as otherwise updates will increment\n                            // color counter and we'll get a new color for each\n                            // update of the nav series.\n                            color: chart.series[i] &&\n                                !chart.series[i].options.isInternal &&\n                                chart.series[i].color ||\n                                chart.options.colors[i] ||\n                                chart.options.colors[0]\n                        }, navSeriesMixin, userSeriesOptions);\n                        mergedNavSeriesOptions.data = userSeriesOptions.data;\n                        if (mergedNavSeriesOptions.data) {\n                            navigator.hasNavigatorData = true;\n                            navigatorSeries.push(chart.initSeries(mergedNavSeriesOptions));\n                        }\n                    });\n                }\n                if (addEvents) {\n                    this.addBaseSeriesEvents();\n                }\n            }\n            /**\n             * Add data events.\n             * For example when main series is updated we need to recalculate extremes\n             *\n             * @private\n             * @function Highcharts.Navigator#addBaseSeriesEvent\n             */\n            addBaseSeriesEvents() {\n                const navigator = this, baseSeries = navigator.baseSeries || [];\n                // Bind modified extremes event to first base's xAxis only.\n                // In event of > 1 base-xAxes, the navigator will ignore those.\n                // Adding this multiple times to the same axis is no problem, as\n                // duplicates should be discarded by the browser.\n                if (baseSeries[0] && baseSeries[0].xAxis) {\n                    baseSeries[0].eventsToUnbind.push(addEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes));\n                }\n                baseSeries.forEach((base) => {\n                    // Link base series show/hide to navigator series visibility\n                    base.eventsToUnbind.push(addEvent(base, 'show', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(true, false);\n                        }\n                    }));\n                    base.eventsToUnbind.push(addEvent(base, 'hide', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(false, false);\n                        }\n                    }));\n                    // Respond to updated data in the base series, unless explicitly\n                    // not adapting to data changes.\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        if (base.xAxis) {\n                            base.eventsToUnbind.push(addEvent(base, 'updatedData', this.updatedDataHandler));\n                        }\n                    }\n                    // Handle series removal\n                    base.eventsToUnbind.push(addEvent(base, 'remove', function () {\n                        if (baseSeries) {\n                            erase(baseSeries, base); // #21043\n                        }\n                        if (this.navigatorSeries) {\n                            erase(navigator.series, this.navigatorSeries);\n                            if (defined(this.navigatorSeries.options)) {\n                                this.navigatorSeries.remove(false);\n                            }\n                            delete this.navigatorSeries;\n                        }\n                    }));\n                });\n            }\n            /**\n             * Get minimum from all base series connected to the navigator\n             * @private\n             * @param {number} currentSeriesMin\n             *        Minium from the current series\n             * @return {number}\n             *         Minimum from all series\n             */\n            getBaseSeriesMin(currentSeriesMin) {\n                return this.baseSeries.reduce(function (min, series) {\n                    // (#10193)\n                    return Math.min(min, series.xData && series.xData.length ?\n                        series.xData[0] : min);\n                }, currentSeriesMin);\n            }\n            /**\n             * Set the navigator x axis extremes to reflect the total. The navigator\n             * extremes should always be the extremes of the union of all series in the\n             * chart as well as the navigator series.\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyNavigatorAxisExtremes\n             */\n            modifyNavigatorAxisExtremes() {\n                const xAxis = this.xAxis;\n                if (typeof xAxis.getExtremes !== 'undefined') {\n                    const unionExtremes = this.getUnionExtremes(true);\n                    if (unionExtremes &&\n                        (unionExtremes.dataMin !== xAxis.min ||\n                            unionExtremes.dataMax !== xAxis.max)) {\n                        xAxis.min = unionExtremes.dataMin;\n                        xAxis.max = unionExtremes.dataMax;\n                    }\n                }\n            }\n            /**\n             * Hook to modify the base axis extremes with information from the Navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyBaseAxisExtremes\n             */\n            modifyBaseAxisExtremes() {\n                const baseXAxis = this, navigator = baseXAxis.chart.navigator, baseExtremes = baseXAxis.getExtremes(), baseMin = baseExtremes.min, baseMax = baseExtremes.max, baseDataMin = baseExtremes.dataMin, baseDataMax = baseExtremes.dataMax, range = baseMax - baseMin, stickToMin = navigator.stickToMin, stickToMax = navigator.stickToMax, overscroll = pick(baseXAxis.ordinal?.convertOverscroll(baseXAxis.options.overscroll), 0), navigatorSeries = navigator.series && navigator.series[0], hasSetExtremes = !!baseXAxis.setExtremes, \n                // When the extremes have been set by range selector button, don't\n                // stick to min or max. The range selector buttons will handle the\n                // extremes. (#5489)\n                unmutable = baseXAxis.eventArgs &&\n                    baseXAxis.eventArgs.trigger === 'rangeSelectorButton';\n                let newMax, newMin;\n                if (!unmutable) {\n                    // If the zoomed range is already at the min, move it to the right\n                    // as new data comes in\n                    if (stickToMin) {\n                        newMin = baseDataMin;\n                        newMax = newMin + range;\n                    }\n                    // If the zoomed range is already at the max, move it to the right\n                    // as new data comes in\n                    if (stickToMax) {\n                        newMax = baseDataMax + overscroll;\n                        // If stickToMin is true, the new min value is set above\n                        if (!stickToMin) {\n                            newMin = Math.max(baseDataMin, // Don't go below data extremes (#13184)\n                            newMax - range, navigator.getBaseSeriesMin(navigatorSeries && navigatorSeries.xData ?\n                                navigatorSeries.xData[0] :\n                                -Number.MAX_VALUE));\n                        }\n                    }\n                    // Update the extremes\n                    if (hasSetExtremes && (stickToMin || stickToMax)) {\n                        if (isNumber(newMin)) {\n                            baseXAxis.min = baseXAxis.userMin = newMin;\n                            baseXAxis.max = baseXAxis.userMax = newMax;\n                        }\n                    }\n                }\n                // Reset\n                navigator.stickToMin =\n                    navigator.stickToMax = null;\n            }\n            /**\n             * Handler for updated data on the base series. When data is modified, the\n             * navigator series must reflect it. This is called from the Chart.redraw\n             * function before axis and series extremes are computed.\n             *\n             * @private\n             * @function Highcharts.Navigator#updateDataHandler\n             */\n            updatedDataHandler() {\n                const navigator = this.chart.navigator, baseSeries = this, navigatorSeries = this.navigatorSeries, shouldStickToMax = navigator.reversedExtremes ?\n                    Math.round(navigator.zoomedMin) === 0 :\n                    Math.round(navigator.zoomedMax) >= Math.round(navigator.size);\n                // If the scrollbar is scrolled all the way to the right, keep right as\n                // new data comes in, unless user set navigator.stickToMax to false.\n                navigator.stickToMax = pick(this.chart.options.navigator &&\n                    this.chart.options.navigator.stickToMax, shouldStickToMax);\n                navigator.stickToMin = navigator.shouldStickToMin(baseSeries, navigator);\n                // Set the navigator series data to the new data of the base series\n                if (navigatorSeries && !navigator.hasNavigatorData) {\n                    navigatorSeries.options.pointStart = baseSeries.xData[0];\n                    navigatorSeries.setData(baseSeries.options.data, false, null, false); // #5414\n                }\n            }\n            /**\n             * Detect if the zoomed area should stick to the minimum, #14742.\n             *\n             * @private\n             * @function Highcharts.Navigator#shouldStickToMin\n             */\n            shouldStickToMin(baseSeries, navigator) {\n                const xDataMin = navigator.getBaseSeriesMin(baseSeries.xData[0]), xAxis = baseSeries.xAxis, max = xAxis.max, min = xAxis.min, range = xAxis.options.range;\n                let stickToMin = true;\n                if (isNumber(max) && isNumber(min)) {\n                    // If range declared, stick to the minimum only if the range\n                    // is smaller than the data set range.\n                    if (range && max - xDataMin > 0) {\n                        stickToMin = max - xDataMin < range;\n                    }\n                    else {\n                        // If the current axis minimum falls outside the new\n                        // updated dataset, we must adjust.\n                        stickToMin = min <= xDataMin;\n                    }\n                }\n                else {\n                    stickToMin = false; // #15864\n                }\n                return stickToMin;\n            }\n            /**\n             * Add chart events, like redrawing navigator, when chart requires that.\n             *\n             * @private\n             * @function Highcharts.Navigator#addChartEvents\n             */\n            addChartEvents() {\n                if (!this.eventsToUnbind) {\n                    this.eventsToUnbind = [];\n                }\n                this.eventsToUnbind.push(\n                // Move the scrollbar after redraw, like after data updata even if\n                // axes don't redraw\n                addEvent(this.chart, 'redraw', function () {\n                    const navigator = this.navigator, xAxis = navigator && (navigator.baseSeries &&\n                        navigator.baseSeries[0] &&\n                        navigator.baseSeries[0].xAxis ||\n                        this.xAxis[0]); // #5709, #13114\n                    if (xAxis) {\n                        navigator.render(xAxis.min, xAxis.max);\n                    }\n                }), \n                // Make room for the navigator, can be placed around the chart:\n                addEvent(this.chart, 'getMargins', function () {\n                    const chart = this, navigator = chart.navigator;\n                    let marginName = navigator.opposite ?\n                        'plotTop' : 'marginBottom';\n                    if (chart.inverted) {\n                        marginName = navigator.opposite ?\n                            'marginRight' : 'plotLeft';\n                    }\n                    chart[marginName] =\n                        (chart[marginName] || 0) + (navigator.navigatorEnabled || !chart.inverted ?\n                            navigator.height + navigator.scrollbarHeight :\n                            0) + navigator.navigatorOptions.margin;\n                }), addEvent(Navigator, 'setRange', function (e) {\n                    this.chart.xAxis[0].setExtremes(e.min, e.max, e.redraw, e.animation, e.eventArguments);\n                }));\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Navigator#destroy\n             */\n            destroy() {\n                // Disconnect events added in addEvents\n                this.removeEvents();\n                if (this.xAxis) {\n                    erase(this.chart.xAxis, this.xAxis);\n                    erase(this.chart.axes, this.xAxis);\n                }\n                if (this.yAxis) {\n                    erase(this.chart.yAxis, this.yAxis);\n                    erase(this.chart.axes, this.yAxis);\n                }\n                // Destroy series\n                (this.series || []).forEach((s) => {\n                    if (s.destroy) {\n                        s.destroy();\n                    }\n                });\n                // Destroy properties\n                [\n                    'series', 'xAxis', 'yAxis', 'shades', 'outline', 'scrollbarTrack',\n                    'scrollbarRifles', 'scrollbarGroup', 'scrollbar', 'navigatorGroup',\n                    'rendered'\n                ].forEach((prop) => {\n                    if (this[prop] && this[prop].destroy) {\n                        this[prop].destroy();\n                    }\n                    this[prop] = null;\n                });\n                // Destroy elements in collection\n                [this.handles].forEach((coll) => {\n                    destroyObjectProperties(coll);\n                });\n                this.navigatorEnabled = false;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Navigator;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Declarations\n         *\n         * */\n        /**\n         * Language object. The language object is global and it can't be set\n         * on each chart initialization. Instead, use `Highcharts.setOptions` to\n         * set it before any chart is initialized.\n         *\n         * ```js\n         * Highcharts.setOptions({\n         *     lang: {\n         *         months: [\n         *             'Janvier', 'FÃ©vrier', 'Mars', 'Avril',\n         *             'Mai', 'Juin', 'Juillet', 'AoÃ»t',\n         *             'Septembre', 'Octobre', 'Novembre', 'DÃ©cembre'\n         *         ],\n         *         weekdays: [\n         *             'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n         *             'Jeudi', 'Vendredi', 'Samedi'\n         *         ]\n         *     }\n         * });\n         * ```\n         *\n         * @optionparent lang\n         */\n        const lang = {\n            /**\n             * The text for the label for the range selector buttons.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorZoom: 'Zoom',\n            /**\n             * The text for the label for the \"from\" input box in the range\n             * selector. Since v9.0, this string is empty as the label is not\n             * rendered by default.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorFrom: '',\n            /**\n             * The text for the label for the \"to\" input box in the range selector.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorTo: 'â†’'\n        };\n        /**\n         * The range selector is a tool for selecting ranges to display within\n         * the chart. It provides buttons to select preconfigured ranges in\n         * the chart, like 1 day, 1 week, 1 month etc. It also provides input\n         * boxes where min and max dates can be manually input.\n         *\n         * @product      highstock gantt\n         * @optionparent rangeSelector\n         */\n        const rangeSelector = {\n            /**\n             * Whether to enable all buttons from the start. By default buttons are\n             * only enabled if the corresponding time range exists on the X axis,\n             * but enabling all buttons allows for dynamically loading different\n             * time ranges.\n             *\n             * @sample {highstock} stock/rangeselector/allbuttonsenabled-true/\n             *         All buttons enabled\n             *\n             * @since     2.0.3\n             */\n            allButtonsEnabled: false,\n            /**\n             * An array of configuration objects for the buttons.\n             *\n             * Defaults to:\n             * ```js\n             * buttons: [{\n             *     type: 'month',\n             *     count: 1,\n             *     text: '1m',\n             *     title: 'View 1 month'\n             * }, {\n             *     type: 'month',\n             *     count: 3,\n             *     text: '3m',\n             *     title: 'View 3 months'\n             * }, {\n             *     type: 'month',\n             *     count: 6,\n             *     text: '6m',\n             *     title: 'View 6 months'\n             * }, {\n             *     type: 'ytd',\n             *     text: 'YTD',\n             *     title: 'View year to date'\n             * }, {\n             *     type: 'year',\n             *     count: 1,\n             *     text: '1y',\n             *     title: 'View 1 year'\n             * }, {\n             *     type: 'all',\n             *     text: 'All',\n             *     title: 'View all'\n             * }]\n             * ```\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by buttons\n             *\n             * @type      {Array<*>}\n             */\n            buttons: void 0,\n            /**\n             * How many units of the defined type the button should span. If `type`\n             * is \"month\" and `count` is 3, the button spans three months.\n             *\n             * @type      {number}\n             * @default   1\n             * @apioption rangeSelector.buttons.count\n             */\n            /**\n             * Fires when clicking on the rangeSelector button. One parameter,\n             * event, is passed to the function, containing common event\n             * information.\n             *\n             * ```js\n             * click: function(e) {\n             *   console.log(this);\n             * }\n             * ```\n             *\n             * Return false to stop default button's click action.\n             *\n             * @sample {highstock} stock/rangeselector/button-click/\n             *         Click event on the button\n             *\n             * @type      {Highcharts.RangeSelectorClickCallbackFunction}\n             * @apioption rangeSelector.buttons.events.click\n             */\n            /**\n             * Additional range (in milliseconds) added to the end of the calculated\n             * time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMax\n             */\n            /**\n             * Additional range (in milliseconds) added to the start of the\n             * calculated time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMin\n             */\n            /**\n             * When buttons apply dataGrouping on a series, by default zooming\n             * in/out will deselect buttons and unset dataGrouping. Enable this\n             * option to keep buttons selected when extremes change.\n             *\n             * @sample {highstock} stock/rangeselector/preserve-datagrouping/\n             *         Different preserveDataGrouping settings\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     6.1.2\n             * @apioption rangeSelector.buttons.preserveDataGrouping\n             */\n            /**\n             * A custom data grouping object for each button.\n             *\n             * @see [series.dataGrouping](#plotOptions.series.dataGrouping)\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by range selector buttons\n             *\n             * @type      {*}\n             * @extends   plotOptions.series.dataGrouping\n             * @apioption rangeSelector.buttons.dataGrouping\n             */\n            /**\n             * The text for the button itself.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.text\n             */\n            /**\n             * Explanation for the button, shown as a tooltip on hover, and used by\n             * assistive technology.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.title\n             */\n            /**\n             * Defined the time span for the button. Can be one of `millisecond`,\n             * `second`, `minute`, `hour`, `day`, `week`, `month`, `year`, `ytd`,\n             * and `all`.\n             *\n             * @type       {Highcharts.RangeSelectorButtonTypeValue}\n             * @apioption  rangeSelector.buttons.type\n             */\n            /**\n             * The space in pixels between the buttons in the range selector.\n             */\n            buttonSpacing: 5,\n            /**\n             * Whether to collapse the range selector buttons into a dropdown when\n             * there is not enough room to show everything in a single row, instead\n             * of dividing the range selector into multiple rows.\n             * Can be one of the following:\n             *  - `always`: Always collapse\n             *  - `responsive`: Only collapse when there is not enough room\n             *  - `never`: Never collapse\n             *\n             * @sample {highstock} stock/rangeselector/dropdown/\n             *         Dropdown option\n             *\n             * @validvalue [\"always\", \"responsive\", \"never\"]\n             * @since 9.0.0\n             */\n            dropdown: 'responsive',\n            /**\n             * Enable or disable the range selector. Default to `true` for stock\n             * charts, using the `stockChart` factory.\n             *\n             * @sample {highstock} stock/rangeselector/enabled/\n             *         Disable the range selector\n             *\n             * @type {boolean|undefined}\n             * @default {highstock} true\n             */\n            enabled: void 0,\n            /**\n             * The vertical alignment of the rangeselector box. Allowed properties\n             * are `top`, `middle`, `bottom`.\n             *\n             * @sample {highstock} stock/rangeselector/vertical-align-middle/\n             *         Middle\n             * @sample {highstock} stock/rangeselector/vertical-align-bottom/\n             *         Bottom\n             *\n             * @type  {Highcharts.VerticalAlignValue}\n             * @since 6.0.0\n             */\n            verticalAlign: 'top',\n            /**\n             * A collection of attributes for the buttons. The object takes SVG\n             * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n             * a collection of CSS properties for the text.\n             *\n             * The object can also be extended with states, so you can set\n             * presentational options for `hover`, `select` or `disabled` button\n             * states.\n             *\n             * CSS styles for the text label.\n             *\n             * In styled mode, the buttons are styled by the\n             * `.highcharts-range-selector-buttons .highcharts-button` rule with its\n             * different states.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.SVGAttributes}\n             */\n            buttonTheme: {\n                /** @ignore */\n                width: 28,\n                /** @ignore */\n                height: 18,\n                /** @ignore */\n                padding: 2,\n                /** @ignore */\n                zIndex: 7 // #484, #852\n            },\n            /**\n             * When the rangeselector is floating, the plot area does not reserve\n             * space for it. This opens for positioning anywhere on the chart.\n             *\n             * @sample {highstock} stock/rangeselector/floating/\n             *         Placing the range selector between the plot area and the\n             *         navigator\n             *\n             * @since 6.0.0\n             */\n            floating: false,\n            /**\n             * The x offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            x: 0,\n            /**\n             * The y offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            y: 0,\n            /**\n             * Deprecated. The height of the range selector. Currently it is\n             * calculated dynamically.\n             *\n             * @deprecated\n             * @type  {number|undefined}\n             * @since 2.1.9\n             */\n            height: void 0, // Reserved space for buttons and input\n            /**\n             * The border color of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.ColorString}\n             * @since     1.3.7\n             */\n            inputBoxBorderColor: 'none',\n            /**\n             * The pixel height of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @since     1.3.7\n             */\n            inputBoxHeight: 17,\n            /**\n             * The pixel width of the date input boxes. When `undefined`, the width\n             * is fitted to the rendered content.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type   {number|undefined}\n             * @since  1.3.7\n             */\n            inputBoxWidth: void 0,\n            /**\n             * The date format in the input boxes when not selected for editing.\n             * Defaults to `%e %b %Y`.\n             *\n             * This is used to determine which type of input to show,\n             * `datetime-local`, `date` or `time` and falling back to `text` when\n             * the browser does not support the input type or the format contains\n             * milliseconds.\n             *\n             * @sample {highstock} stock/rangeselector/input-type/\n             *         Input types\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputDateFormat: '%e %b %Y',\n            /**\n             * A custom callback function to parse values entered in the input boxes\n             * and return a valid JavaScript time as milliseconds since 1970.\n             * The first argument passed is a value to parse,\n             * second is a boolean indicating use of the UTC time.\n             *\n             * This will only get called for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             * @type      {Highcharts.RangeSelectorParseCallbackFunction}\n             * @since     1.3.3\n             */\n            inputDateParser: void 0,\n            /**\n             * The date format in the input boxes when they are selected for\n             * editing. This must be a format that is recognized by JavaScript\n             * Date.parse.\n             *\n             * This will only be used for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputEditDateFormat: '%Y-%m-%d',\n            /**\n             * Enable or disable the date input boxes.\n             */\n            inputEnabled: true,\n            /**\n             * Positioning for the input boxes. Allowed properties are `align`,\n             *  `x` and `y`.\n             *\n             * @since 1.2.4\n             */\n            inputPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'right',\n                /**\n                 * X offset of the input row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the input row.\n                 */\n                y: 0\n            },\n            /**\n             * The space in pixels between the labels and the date input boxes in\n             * the range selector.\n             *\n             * @since 9.0.0\n             */\n            inputSpacing: 5,\n            /**\n             * The index of the button to appear pre-selected. If the selected range\n             * exceeds the total data range and the 'all' option is available,\n             * the 'all' option, showing the full range, is automatically selected.\n             *\n             * @type      {number}\n             */\n            selected: void 0,\n            /**\n             * Positioning for the button row.\n             *\n             * @since 1.2.4\n             */\n            buttonPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'left',\n                /**\n                 * X offset of the button row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the button row.\n                 */\n                y: 0\n            },\n            /**\n             * CSS for the HTML inputs in the range selector.\n             *\n             * In styled mode, the inputs are styled by the\n             * `.highcharts-range-input text` rule in SVG mode, and\n             * `input.highcharts-range-selector` when active.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.CSSObject}\n             * @apioption rangeSelector.inputStyle\n             */\n            inputStyle: {\n                /** @ignore */\n                color: \"#334eff\" /* Palette.highlightColor80 */,\n                /** @ignore */\n                cursor: 'pointer',\n                /** @ignore */\n                fontSize: '0.8em'\n            },\n            /**\n             * CSS styles for the labels - the Zoom, From and To texts.\n             *\n             * In styled mode, the labels are styled by the\n             * `.highcharts-range-label` class.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.CSSObject}\n             */\n            labelStyle: {\n                /** @ignore */\n                color: \"#666666\" /* Palette.neutralColor60 */,\n                /** @ignore */\n                fontSize: '0.8em'\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorDefaults = {\n            lang,\n            rangeSelector\n        };\n\n        return RangeSelectorDefaults;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorComposition.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Stock/RangeSelector/RangeSelectorDefaults.js'], _modules['Core/Utilities.js']], function (D, H, RangeSelectorDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { composed } = H;\n        const { addEvent, defined, extend, isNumber, merge, pick, pushUnique } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const chartDestroyEvents = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let RangeSelectorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the axis min value based on the range option and the current max. For\n         * stock charts this is extended via the {@link RangeSelector} so that if the\n         * selected range is a multiple of months or years, it is compensated for\n         * various month lengths.\n         *\n         * @private\n         * @function Highcharts.Axis#minFromRange\n         * @return {number|undefined}\n         *         The new minimum value.\n         */\n        function axisMinFromRange() {\n            const rangeOptions = this.range, type = rangeOptions.type, max = this.max, time = this.chart.time, \n            // Get the true range from a start date\n            getTrueRange = function (base, count) {\n                const timeName = type === 'year' ?\n                    'FullYear' : 'Month';\n                const date = new time.Date(base);\n                const basePeriod = time.get(timeName, date);\n                time.set(timeName, date, basePeriod + count);\n                if (basePeriod === time.get(timeName, date)) {\n                    time.set('Date', date, 0); // #6537\n                }\n                return date.getTime() - base;\n            };\n            let min, range;\n            if (isNumber(rangeOptions)) {\n                min = max - rangeOptions;\n                range = rangeOptions;\n            }\n            else if (rangeOptions) {\n                min = max + getTrueRange(max, -(rangeOptions.count || 1));\n                // Let the fixedRange reflect initial settings (#5930)\n                if (this.chart) {\n                    this.chart.setFixedRange(max - min);\n                }\n            }\n            const dataMin = pick(this.dataMin, Number.MIN_VALUE);\n            if (!isNumber(min)) {\n                min = dataMin;\n            }\n            if (min <= dataMin) {\n                min = dataMin;\n                if (typeof range === 'undefined') { // #4501\n                    range = getTrueRange(min, rangeOptions.count);\n                }\n                this.newMax = Math.min(min + range, pick(this.dataMax, Number.MAX_VALUE));\n            }\n            if (!isNumber(max)) {\n                min = void 0;\n            }\n            else if (!isNumber(rangeOptions) &&\n                rangeOptions &&\n                rangeOptions._offsetMin) {\n                min += rangeOptions._offsetMin;\n            }\n            return min;\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass, ChartClass, RangeSelectorClass) {\n            RangeSelectorConstructor = RangeSelectorClass;\n            if (pushUnique(composed, 'RangeSelector')) {\n                const chartProto = ChartClass.prototype;\n                AxisClass.prototype.minFromRange = axisMinFromRange;\n                addEvent(ChartClass, 'afterGetContainer', createRangeSelector);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'destroy', onChartDestroy);\n                addEvent(ChartClass, 'getMargins', onChartGetMargins);\n                addEvent(ChartClass, 'redraw', redrawRangeSelector);\n                addEvent(ChartClass, 'update', onChartUpdate);\n                chartProto.callbacks.push(redrawRangeSelector);\n                extend(defaultOptions, { rangeSelector: RangeSelectorDefaults.rangeSelector });\n                extend(defaultOptions.lang, RangeSelectorDefaults.lang);\n            }\n        }\n        /**\n         * Initialize rangeselector for stock charts\n         * @private\n         */\n        function createRangeSelector() {\n            if (this.options.rangeSelector &&\n                this.options.rangeSelector.enabled) {\n                this.rangeSelector = new RangeSelectorConstructor(this);\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartBeforeRender() {\n            const chart = this, rangeSelector = chart.rangeSelector;\n            if (rangeSelector) {\n                if (isNumber(rangeSelector.deferredYTDClick)) {\n                    rangeSelector.clickButton(rangeSelector.deferredYTDClick);\n                    delete rangeSelector.deferredYTDClick;\n                }\n                const verticalAlign = rangeSelector.options.verticalAlign;\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n            }\n        }\n        function redrawRangeSelector() {\n            const chart = this;\n            const rangeSelector = this.rangeSelector;\n            if (!rangeSelector) {\n                return;\n            }\n            let alignTo;\n            const extremes = chart.xAxis[0].getExtremes();\n            const legend = chart.legend;\n            const verticalAlign = (rangeSelector &&\n                rangeSelector.options.verticalAlign);\n            if (isNumber(extremes.min)) {\n                rangeSelector.render(extremes.min, extremes.max);\n            }\n            // Re-align the legend so that it's below the rangeselector\n            if (legend.display &&\n                verticalAlign === 'top' &&\n                verticalAlign === legend.options.verticalAlign) {\n                // Create a new alignment box for the legend.\n                alignTo = merge(chart.spacingBox);\n                if (legend.options.layout === 'vertical') {\n                    alignTo.y = chart.plotTop;\n                }\n                else {\n                    alignTo.y += rangeSelector.getHeight();\n                }\n                legend.group.placed = false; // Don't animate the alignment.\n                legend.align(alignTo);\n            }\n        }\n        /**\n         * Remove resize/afterSetExtremes at chart destroy.\n         * @private\n         */\n        function onChartDestroy() {\n            for (let i = 0, iEnd = chartDestroyEvents.length; i < iEnd; ++i) {\n                const events = chartDestroyEvents[i];\n                if (events[0] === this) {\n                    events[1].forEach((unbind) => unbind());\n                    chartDestroyEvents.splice(i, 1);\n                    return;\n                }\n            }\n        }\n        /**\n         *\n         */\n        function onChartGetMargins() {\n            const rangeSelector = this.rangeSelector;\n            if (rangeSelector) {\n                const rangeSelectorHeight = rangeSelector.getHeight();\n                if (this.extraTopMargin) {\n                    this.plotTop += rangeSelectorHeight;\n                }\n                if (this.extraBottomMargin) {\n                    this.marginBottom += rangeSelectorHeight;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartUpdate(e) {\n            const chart = this, options = e.options, optionsRangeSelector = options.rangeSelector, extraBottomMarginWas = this.extraBottomMargin, extraTopMarginWas = this.extraTopMargin;\n            let rangeSelector = chart.rangeSelector;\n            if (optionsRangeSelector &&\n                optionsRangeSelector.enabled &&\n                !defined(rangeSelector) &&\n                this.options.rangeSelector) {\n                this.options.rangeSelector.enabled = true;\n                this.rangeSelector = rangeSelector = new RangeSelectorConstructor(this);\n            }\n            this.extraBottomMargin = false;\n            this.extraTopMargin = false;\n            if (rangeSelector) {\n                const verticalAlign = (optionsRangeSelector &&\n                    optionsRangeSelector.verticalAlign) || (rangeSelector.options && rangeSelector.options.verticalAlign);\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n                if (this.extraBottomMargin !== extraBottomMarginWas ||\n                    this.extraTopMargin !== extraTopMarginWas) {\n                    this.isDirtyBox = true;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorComposition = {\n            compose\n        };\n\n        return RangeSelectorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/OrdinalAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (Axis, H, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, correctFloat, css, defined, error, isNumber, pick, timeUnits, isString } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Extends the axis with ordinal support.\n         * @private\n         */\n        var OrdinalAxis;\n        (function (OrdinalAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extends the axis with ordinal support.\n             *\n             * @private\n             *\n             * @param AxisClass\n             * Axis class to extend.\n             *\n             * @param ChartClass\n             * Chart class to use.\n             *\n             * @param SeriesClass\n             * Series class to use.\n             */\n            function compose(AxisClass, SeriesClass, ChartClass) {\n                const axisProto = AxisClass.prototype;\n                if (!axisProto.ordinal2lin) {\n                    axisProto.getTimeTicks = getTimeTicks;\n                    axisProto.index2val = index2val;\n                    axisProto.lin2val = lin2val;\n                    axisProto.val2lin = val2lin;\n                    // Record this to prevent overwriting by broken-axis module (#5979)\n                    axisProto.ordinal2lin = axisProto.val2lin;\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'foundExtremes', onAxisFoundExtremes);\n                    addEvent(AxisClass, 'afterSetScale', onAxisAfterSetScale);\n                    addEvent(AxisClass, 'initialAxisTranslation', onAxisInitialAxisTranslation);\n                    addEvent(ChartClass, 'pan', onChartPan);\n                    addEvent(ChartClass, 'touchpan', onChartPan);\n                    addEvent(SeriesClass, 'updatedData', onSeriesUpdatedData);\n                }\n                return AxisClass;\n            }\n            OrdinalAxis.compose = compose;\n            /**\n             * In an ordinal axis, there might be areas with dense concentrations of\n             * points, then large gaps between some. Creating equally distributed\n             * ticks over this entire range may lead to a huge number of ticks that\n             * will later be removed. So instead, break the positions up in\n             * segments, find the tick positions for each segment then concatenize\n             * them. This method is used from both data grouping logic and X axis\n             * tick position logic.\n             * @private\n             */\n            function getTimeTicks(normalizedInterval, min, max, startOfWeek, positions = [], closestDistance = 0, findHigherRanks) {\n                const higherRanks = {}, tickPixelIntervalOption = this.options.tickPixelInterval, time = this.chart.time, \n                // Record all the start positions of a segment, to use when\n                // deciding what's a gap in the data.\n                segmentStarts = [];\n                let end, segmentPositions, hasCrossedHigherRank, info, outsideMax, start = 0, groupPositions = [], lastGroupPosition = -Number.MAX_VALUE;\n                // The positions are not always defined, for example for ordinal\n                // positions when data has regular interval (#1557, #2090)\n                if ((!this.options.ordinal && !this.options.breaks) ||\n                    !positions ||\n                    positions.length < 3 ||\n                    typeof min === 'undefined') {\n                    return time.getTimeTicks.apply(time, arguments);\n                }\n                // Analyze the positions array to split it into segments on gaps\n                // larger than 5 times the closest distance. The closest distance is\n                // already found at this point, so we reuse that instead of\n                // computing it again.\n                const posLength = positions.length;\n                for (end = 0; end < posLength; end++) {\n                    outsideMax = end && positions[end - 1] > max;\n                    if (positions[end] < min) { // Set the last position before min\n                        start = end;\n                    }\n                    if (end === posLength - 1 ||\n                        positions[end + 1] - positions[end] > closestDistance * 5 ||\n                        outsideMax) {\n                        // For each segment, calculate the tick positions from the\n                        // getTimeTicks utility function. The interval will be the\n                        // same regardless of how long the segment is.\n                        if (positions[end] > lastGroupPosition) { // #1475\n                            segmentPositions = time.getTimeTicks(normalizedInterval, positions[start], positions[end], startOfWeek);\n                            // Prevent duplicate groups, for example for multiple\n                            // segments within one larger time frame (#1475)\n                            while (segmentPositions.length &&\n                                segmentPositions[0] <= lastGroupPosition) {\n                                segmentPositions.shift();\n                            }\n                            if (segmentPositions.length) {\n                                lastGroupPosition =\n                                    segmentPositions[segmentPositions.length - 1];\n                            }\n                            segmentStarts.push(groupPositions.length);\n                            groupPositions = groupPositions.concat(segmentPositions);\n                        }\n                        // Set start of next segment\n                        start = end + 1;\n                    }\n                    if (outsideMax) {\n                        break;\n                    }\n                }\n                // Get the grouping info from the last of the segments. The info is\n                // the same for all segments.\n                if (segmentPositions) {\n                    info = segmentPositions.info;\n                    // Optionally identify ticks with higher rank, for example\n                    // when the ticks have crossed midnight.\n                    if (findHigherRanks && info.unitRange <= timeUnits.hour) {\n                        end = groupPositions.length - 1;\n                        // Compare points two by two\n                        for (start = 1; start < end; start++) {\n                            if (time.dateFormat('%d', groupPositions[start]) !==\n                                time.dateFormat('%d', groupPositions[start - 1])) {\n                                higherRanks[groupPositions[start]] = 'day';\n                                hasCrossedHigherRank = true;\n                            }\n                        }\n                        // If the complete array has crossed midnight, we want\n                        // to mark the first positions also as higher rank\n                        if (hasCrossedHigherRank) {\n                            higherRanks[groupPositions[0]] = 'day';\n                        }\n                        info.higherRanks = higherRanks;\n                    }\n                    // Save the info\n                    info.segmentStarts = segmentStarts;\n                    groupPositions.info = info;\n                }\n                else {\n                    error(12, false, this.chart);\n                }\n                // Don't show ticks within a gap in the ordinal axis, where the\n                // space between two points is greater than a portion of the tick\n                // pixel interval\n                if (findHigherRanks && defined(tickPixelIntervalOption)) {\n                    const length = groupPositions.length, translatedArr = [], distances = [];\n                    let itemToRemove, translated, lastTranslated, medianDistance, distance, i = length;\n                    // Find median pixel distance in order to keep a reasonably even\n                    // distance between ticks (#748)\n                    while (i--) {\n                        translated = this.translate(groupPositions[i]);\n                        if (lastTranslated) {\n                            distances[i] = lastTranslated - translated;\n                        }\n                        translatedArr[i] = lastTranslated = translated;\n                    }\n                    distances.sort((a, b) => a - b);\n                    medianDistance = distances[Math.floor(distances.length / 2)];\n                    if (medianDistance < tickPixelIntervalOption * 0.6) {\n                        medianDistance = null;\n                    }\n                    // Now loop over again and remove ticks where needed\n                    i = groupPositions[length - 1] > max ? length - 1 : length; // #817\n                    lastTranslated = void 0;\n                    while (i--) {\n                        translated = translatedArr[i];\n                        distance = Math.abs(lastTranslated - translated);\n                        // #4175 - when axis is reversed, the distance, is negative but\n                        // tickPixelIntervalOption positive, so we need to compare the\n                        // same values\n                        // Remove ticks that are closer than 0.6 times the pixel\n                        // interval from the one to the right, but not if it is close to\n                        // the median distance (#748).\n                        if (lastTranslated &&\n                            distance < tickPixelIntervalOption * 0.8 &&\n                            (medianDistance === null || distance < medianDistance * 0.8)) {\n                            // Is this a higher ranked position with a normal\n                            // position to the right?\n                            if (higherRanks[groupPositions[i]] &&\n                                !higherRanks[groupPositions[i + 1]]) {\n                                // Yes: remove the lower ranked neighbour to the\n                                // right\n                                itemToRemove = i + 1;\n                                lastTranslated = translated; // #709\n                            }\n                            else {\n                                // No: remove this one\n                                itemToRemove = i;\n                            }\n                            groupPositions.splice(itemToRemove, 1);\n                        }\n                        else {\n                            lastTranslated = translated;\n                        }\n                    }\n                }\n                return groupPositions;\n            }\n            /**\n             * Get axis position of given index of the extended ordinal positions.\n             * Used only when panning an ordinal axis.\n             *\n             * @private\n             * @function Highcharts.Axis#index2val\n             * @param {number} index\n             * The index value of searched point\n             */\n            function index2val(index) {\n                const axis = this, ordinal = axis.ordinal, \n                // Context could be changed to extendedOrdinalPositions.\n                ordinalPositions = ordinal.positions;\n                // The visible range contains only equally spaced values.\n                if (!ordinalPositions) {\n                    return index;\n                }\n                let i = ordinalPositions.length - 1, distance;\n                if (index < 0) { // Out of range, in effect panning to the left\n                    index = ordinalPositions[0];\n                }\n                else if (index > i) { // Out of range, panning to the right\n                    index = ordinalPositions[i];\n                }\n                else { // Split it up\n                    i = Math.floor(index);\n                    distance = index - i; // The decimal\n                }\n                if (typeof distance !== 'undefined' &&\n                    typeof ordinalPositions[i] !== 'undefined') {\n                    return ordinalPositions[i] + (distance ?\n                        distance *\n                            (ordinalPositions[i + 1] - ordinalPositions[i]) :\n                        0);\n                }\n                return index;\n            }\n            /**\n             * Translate from linear (internal) to axis value.\n             *\n             * @private\n             * @function Highcharts.Axis#lin2val\n             * @param {number} val\n             * The linear abstracted value.\n             */\n            function lin2val(val) {\n                const axis = this, ordinal = axis.ordinal, localMin = axis.old ? axis.old.min : axis.min, localA = axis.old ? axis.old.transA : axis.transA;\n                // Always use extendedPositions (#19816)\n                const positions = ordinal.getExtendedPositions();\n                // In some cases (especially in early stages of the chart creation) the\n                // getExtendedPositions might return undefined.\n                if (positions && positions.length) {\n                    // Convert back from modivied value to pixels. // #15970\n                    const pixelVal = correctFloat((val - localMin) * localA +\n                        axis.minPixelPadding), index = correctFloat(ordinal.getIndexOfPoint(pixelVal, positions)), mantissa = correctFloat(index % 1);\n                    // Check if the index is inside position array. If true,\n                    // read/approximate value for that exact index.\n                    if (index >= 0 && index <= positions.length - 1) {\n                        const leftNeighbour = positions[Math.floor(index)], rightNeighbour = positions[Math.ceil(index)], distance = rightNeighbour - leftNeighbour;\n                        return positions[Math.floor(index)] + mantissa * distance;\n                    }\n                }\n                // If the value is outside positions array, return initial value\n                return val; // #16784\n            }\n            /**\n             * Internal function to calculate the precise index in ordinalPositions\n             * array.\n             * @private\n             */\n            function getIndexInArray(ordinalPositions, val) {\n                const index = OrdinalAxis.Additions.findIndexOf(ordinalPositions, val, true);\n                if (ordinalPositions[index] === val) {\n                    return index;\n                }\n                const percent = (val - ordinalPositions[index]) /\n                    (ordinalPositions[index + 1] - ordinalPositions[index]);\n                return index + percent;\n            }\n            /**\n            * @private\n            */\n            function onAxisAfterInit() {\n                const axis = this;\n                if (!axis.ordinal) {\n                    axis.ordinal = new OrdinalAxis.Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisFoundExtremes() {\n                const axis = this, { eventArgs, options } = axis;\n                if (axis.isXAxis &&\n                    defined(options.overscroll) &&\n                    options.overscroll !== 0 &&\n                    isNumber(axis.max) &&\n                    isNumber(axis.min)) {\n                    if (axis.options.ordinal && !axis.ordinal.originalOrdinalRange) {\n                        // Calculate the original ordinal range\n                        axis.ordinal.getExtendedPositions(false);\n                    }\n                    if (axis.max === axis.dataMax &&\n                        (\n                        // Panning is an exception. We don't want to apply\n                        // overscroll when panning over the dataMax\n                        eventArgs?.trigger !== 'pan' ||\n                            axis.isInternal) &&\n                        // Scrollbar buttons are the other execption\n                        eventArgs?.trigger !== 'navigator') {\n                        const overscroll = axis.ordinal.convertOverscroll(options.overscroll);\n                        axis.max += overscroll;\n                        // Live data and buttons require translation for the min:\n                        if (!axis.isInternal &&\n                            defined(axis.userMin) &&\n                            eventArgs?.trigger !== 'mousewheel') {\n                            axis.min += overscroll;\n                        }\n                    }\n                }\n            }\n            /**\n             * For ordinal axis, that loads data async, redraw axis after data is\n             * loaded. If we don't do that, axis will have the same extremes as\n             * previously, but ordinal positions won't be calculated. See #10290\n             * @private\n             */\n            function onAxisAfterSetScale() {\n                const axis = this;\n                if (axis.horiz && !axis.isDirty) {\n                    axis.isDirty = axis.isOrdinal &&\n                        axis.chart.navigator &&\n                        !axis.chart.navigator.adaptToUpdatedData;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInitialAxisTranslation() {\n                const axis = this;\n                if (axis.ordinal) {\n                    axis.ordinal.beforeSetTickPositions();\n                    axis.tickInterval = axis.ordinal.postProcessTickInterval(axis.tickInterval);\n                }\n            }\n            /**\n             * Extending the Chart.pan method for ordinal axes\n             * @private\n             */\n            function onChartPan(e) {\n                const chart = this, xAxis = chart.xAxis[0], overscroll = xAxis.ordinal.convertOverscroll(xAxis.options.overscroll), chartX = e.originalEvent.chartX, panning = chart.options.chart.panning;\n                let runBase = false;\n                if (panning &&\n                    panning.type !== 'y' &&\n                    xAxis.options.ordinal &&\n                    xAxis.series.length &&\n                    // On touch devices, let default function handle the pinching\n                    (!e.touches || e.touches.length <= 1)) {\n                    const mouseDownX = chart.mouseDownX, extremes = xAxis.getExtremes(), dataMin = extremes.dataMin, dataMax = extremes.dataMax, min = extremes.min, max = extremes.max, hoverPoints = chart.hoverPoints, closestPointRange = (xAxis.closestPointRange ||\n                        (xAxis.ordinal && xAxis.ordinal.overscrollPointsRange)), pointPixelWidth = (xAxis.translationSlope *\n                        (xAxis.ordinal.slope || closestPointRange)), \n                    // How many ordinal units did we move?\n                    movedUnits = Math.round((mouseDownX - chartX) / pointPixelWidth), \n                    // Get index of all the chart's points\n                    extendedOrdinalPositions = xAxis.ordinal.getExtendedPositions(), extendedAxis = {\n                        ordinal: {\n                            positions: extendedOrdinalPositions,\n                            extendedOrdinalPositions: extendedOrdinalPositions\n                        }\n                    }, index2val = xAxis.index2val, val2lin = xAxis.val2lin;\n                    let trimmedRange, ordinalPositions;\n                    // Make sure panning to the edges does not decrease the zoomed range\n                    if ((min <= dataMin && movedUnits < 0) ||\n                        (max + overscroll >= dataMax && movedUnits > 0)) {\n                        return;\n                    }\n                    // We have an ordinal axis, but the data is equally spaced\n                    if (!extendedAxis.ordinal.positions) {\n                        runBase = true;\n                    }\n                    else if (Math.abs(movedUnits) > 1) {\n                        // Remove active points for shared tooltip\n                        if (hoverPoints) {\n                            hoverPoints.forEach(function (point) {\n                                point.setState();\n                            });\n                        }\n                        // In grouped data series, the last ordinal position represents\n                        // the grouped data, which is to the left of the real data max.\n                        // If we don't compensate for this, we will be allowed to pan\n                        // grouped data series passed the right of the plot area.\n                        ordinalPositions = extendedAxis.ordinal.positions;\n                        if (dataMax >\n                            ordinalPositions[ordinalPositions.length - 1]) {\n                            ordinalPositions.push(dataMax);\n                        }\n                        // Get the new min and max values by getting the ordinal index\n                        // for the current extreme, then add the moved units and\n                        // translate back to values. This happens on the extended\n                        // ordinal positions if the new position is out of range, else\n                        // it happens on the current x axis which is smaller and faster.\n                        chart.setFixedRange(max - min);\n                        trimmedRange = xAxis.navigatorAxis\n                            .toFixedRange(void 0, void 0, index2val.apply(extendedAxis, [\n                            val2lin.apply(extendedAxis, [min, true]) +\n                                movedUnits\n                        ]), index2val.apply(extendedAxis, [\n                            val2lin.apply(extendedAxis, [max, true]) +\n                                movedUnits\n                        ]));\n                        // Apply it if it is within the available data range\n                        if (trimmedRange.min >= Math.min(extremes.dataMin, min) &&\n                            trimmedRange.max <= Math.max(dataMax, max) + overscroll) {\n                            xAxis.setExtremes(trimmedRange.min, trimmedRange.max, true, false, { trigger: 'pan' });\n                        }\n                        chart.mouseDownX = chartX; // Set new reference for next run\n                        css(chart.container, { cursor: 'move' });\n                    }\n                }\n                else {\n                    runBase = true;\n                }\n                // Revert to the linear chart.pan version\n                if (runBase || (panning && /y/.test(panning.type))) {\n                    if (overscroll) {\n                        xAxis.max = xAxis.dataMax + overscroll;\n                    }\n                }\n                else {\n                    e.preventDefault();\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesUpdatedData() {\n                const xAxis = this.xAxis;\n                // Destroy the extended ordinal index on updated data\n                // and destroy extendedOrdinalPositions, #16055.\n                if (xAxis && xAxis.options.ordinal) {\n                    delete xAxis.ordinal.index;\n                    delete xAxis.ordinal.originalOrdinalRange;\n                }\n            }\n            /**\n             * Translate from a linear axis value to the corresponding ordinal axis\n             * position. If there are no gaps in the ordinal axis this will be the\n             * same. The translated value is the value that the point would have if\n             * the axis was linear, using the same min and max.\n             *\n             * @private\n             * @function Highcharts.Axis#val2lin\n             * @param {number} val\n             * The axis value.\n             * @param {boolean} [toIndex]\n             * Whether to return the index in the ordinalPositions or the new value.\n             */\n            function val2lin(val, toIndex) {\n                const axis = this, ordinal = axis.ordinal, ordinalPositions = ordinal.positions;\n                let slope = ordinal.slope, extendedOrdinalPositions;\n                if (!ordinalPositions) {\n                    return val;\n                }\n                const ordinalLength = ordinalPositions.length;\n                let ordinalIndex;\n                // If the searched value is inside visible plotArea, ivastigate the\n                // value basing on ordinalPositions.\n                if (ordinalPositions[0] <= val &&\n                    ordinalPositions[ordinalLength - 1] >= val) {\n                    ordinalIndex = getIndexInArray(ordinalPositions, val);\n                    // Final return value is based on ordinalIndex\n                }\n                else {\n                    extendedOrdinalPositions =\n                        ordinal.getExtendedPositions &&\n                            ordinal.getExtendedPositions();\n                    if (!(extendedOrdinalPositions && extendedOrdinalPositions.length)) {\n                        return val;\n                    }\n                    const length = extendedOrdinalPositions.length;\n                    if (!slope) {\n                        slope =\n                            (extendedOrdinalPositions[length - 1] -\n                                extendedOrdinalPositions[0]) /\n                                length;\n                    }\n                    // `originalPointReference` is equal to the index of first point of\n                    // ordinalPositions in extendedOrdinalPositions.\n                    const originalPositionsReference = getIndexInArray(extendedOrdinalPositions, ordinalPositions[0]);\n                    // If the searched value is outside the visiblePlotArea,\n                    // check if it is inside extendedOrdinalPositions.\n                    if (val >= extendedOrdinalPositions[0] &&\n                        val <=\n                            extendedOrdinalPositions[length - 1]) {\n                        // Return Value\n                        ordinalIndex = getIndexInArray(extendedOrdinalPositions, val) -\n                            originalPositionsReference;\n                    }\n                    else {\n                        if (!toIndex) {\n                            // If the value is outside positions array,\n                            // return initial value, #16784\n                            return val;\n                        }\n                        // Since ordinal.slope is the average distance between 2\n                        // points on visible plotArea, this can be used to calculate\n                        // the approximate position of the point, which is outside\n                        // the extendedOrdinalPositions.\n                        if (val < extendedOrdinalPositions[0]) {\n                            const diff = extendedOrdinalPositions[0] - val, approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                -originalPositionsReference -\n                                    approximateIndexOffset;\n                        }\n                        else {\n                            const diff = val -\n                                extendedOrdinalPositions[length - 1], approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                approximateIndexOffset +\n                                    length -\n                                    originalPositionsReference;\n                        }\n                    }\n                }\n                return toIndex ? ordinalIndex : slope * (ordinalIndex || 0) +\n                    ordinal.offset;\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            /**\n             * @private\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                constructor(axis) {\n                    this.index = {};\n                    this.axis = axis;\n                }\n                /* *\n                *\n                *  Functions\n                *\n                * */\n                /**\n                 * Calculate the ordinal positions before tick positions are calculated.\n                 * @private\n                 */\n                beforeSetTickPositions() {\n                    const axis = this.axis, ordinal = axis.ordinal, extremes = axis.getExtremes(), min = extremes.min, max = extremes.max, hasBreaks = axis.brokenAxis?.hasBreaks, isOrdinal = axis.options.ordinal;\n                    let len, uniqueOrdinalPositions, dist, minIndex, maxIndex, slope, i, ordinalPositions = [], overscrollPointsRange = Number.MAX_VALUE, useOrdinal = false, adjustOrdinalExtremesPoints = false, isBoosted = false;\n                    // Apply the ordinal logic\n                    if (isOrdinal || hasBreaks) { // #4167 YAxis is never ordinal ?\n                        let distanceBetweenPoint = 0;\n                        axis.series.forEach(function (series, i) {\n                            uniqueOrdinalPositions = [];\n                            // For an axis with multiple series, check if the distance\n                            // between points is identical throughout all series.\n                            if (i > 0 &&\n                                series.options.id !== 'highcharts-navigator-series' &&\n                                series.processedXData.length > 1) {\n                                adjustOrdinalExtremesPoints =\n                                    distanceBetweenPoint !== series.processedXData[1] -\n                                        series.processedXData[0];\n                            }\n                            distanceBetweenPoint =\n                                series.processedXData[1] - series.processedXData[0];\n                            if (series.boosted) {\n                                isBoosted = series.boosted;\n                            }\n                            if (series.reserveSpace() &&\n                                (series\n                                    .takeOrdinalPosition !== false || hasBreaks)) {\n                                // Concatenate the processed X data into the existing\n                                // positions, or the empty array\n                                ordinalPositions = ordinalPositions.concat(series.processedXData);\n                                len = ordinalPositions.length;\n                                // Remove duplicates (#1588)\n                                ordinalPositions.sort(function (a, b) {\n                                    // Without a custom function it is sorted as strings\n                                    return a - b;\n                                });\n                                overscrollPointsRange = Math.min(overscrollPointsRange, pick(\n                                // Check for a single-point series:\n                                series.closestPointRange, overscrollPointsRange));\n                                if (len) {\n                                    i = 0;\n                                    while (i < len - 1) {\n                                        if (ordinalPositions[i] !==\n                                            ordinalPositions[i + 1]) {\n                                            uniqueOrdinalPositions.push(ordinalPositions[i + 1]);\n                                        }\n                                        i++;\n                                    }\n                                    // Check first item:\n                                    if (uniqueOrdinalPositions[0] !==\n                                        ordinalPositions[0]) {\n                                        uniqueOrdinalPositions.unshift(ordinalPositions[0]);\n                                    }\n                                    ordinalPositions = uniqueOrdinalPositions;\n                                }\n                            }\n                        });\n                        if (!axis.ordinal.originalOrdinalRange) {\n                            // Calculate current originalOrdinalRange\n                            axis.ordinal.originalOrdinalRange =\n                                (ordinalPositions.length - 1) * overscrollPointsRange;\n                        }\n                        // If the distance between points is not identical throughout\n                        // all series, remove the first and last ordinal position to\n                        // avoid enabling ordinal logic when it is not needed, #17405.\n                        // Only for boosted series because changes are negligible.\n                        if (adjustOrdinalExtremesPoints && isBoosted) {\n                            ordinalPositions.pop();\n                            ordinalPositions.shift();\n                        }\n                        // Cache the length\n                        len = ordinalPositions.length;\n                        // Check if we really need the overhead of mapping axis data\n                        // against the ordinal positions. If the series consist of\n                        // evenly spaced data any way, we don't need any ordinal logic.\n                        if (len > 2) { // Two points have equal distance by default\n                            dist = ordinalPositions[1] - ordinalPositions[0];\n                            i = len - 1;\n                            while (i-- && !useOrdinal) {\n                                if (ordinalPositions[i + 1] - ordinalPositions[i] !==\n                                    dist) {\n                                    useOrdinal = true;\n                                }\n                            }\n                            // When zooming in on a week, prevent axis padding for\n                            // weekends even though the data within the week is evenly\n                            // spaced.\n                            if (!axis.options.keepOrdinalPadding &&\n                                (ordinalPositions[0] - min > dist ||\n                                    (max -\n                                        ordinalPositions[ordinalPositions.length - 1]) > dist)) {\n                                useOrdinal = true;\n                            }\n                        }\n                        else if (axis.options.overscroll) {\n                            if (len === 2) {\n                                // Exactly two points, distance for overscroll is fixed:\n                                overscrollPointsRange =\n                                    ordinalPositions[1] - ordinalPositions[0];\n                            }\n                            else if (len === 1) {\n                                // We have just one point, closest distance is unknown.\n                                // Assume then it is last point and overscrolled range:\n                                overscrollPointsRange = axis.ordinal.convertOverscroll(axis.options.overscroll);\n                                ordinalPositions = [\n                                    ordinalPositions[0],\n                                    ordinalPositions[0] + overscrollPointsRange\n                                ];\n                            }\n                            else {\n                                // In case of zooming in on overscrolled range, stick to\n                                // the old range:\n                                overscrollPointsRange = ordinal.overscrollPointsRange;\n                            }\n                        }\n                        // Record the slope and offset to compute the linear values from\n                        // the array index. Since the ordinal positions may exceed the\n                        // current range, get the start and end positions within it\n                        // (#719, #665b)\n                        if (useOrdinal || axis.forceOrdinal) {\n                            if (axis.options.overscroll) {\n                                ordinal.overscrollPointsRange = overscrollPointsRange;\n                                ordinalPositions = ordinalPositions.concat(ordinal.getOverscrollPositions());\n                            }\n                            // Register\n                            ordinal.positions = ordinalPositions;\n                            // This relies on the ordinalPositions being set. Use\n                            // Math.max and Math.min to prevent padding on either sides\n                            // of the data.\n                            minIndex = axis.ordinal2lin(// #5979\n                            Math.max(min, ordinalPositions[0]), true);\n                            maxIndex = Math.max(axis.ordinal2lin(Math.min(max, ordinalPositions[ordinalPositions.length - 1]), true), 1); // #3339\n                            // Set the slope and offset of the values compared to the\n                            // indices in the ordinal positions.\n                            ordinal.slope = slope =\n                                (max - min) / (maxIndex - minIndex);\n                            ordinal.offset = min - (minIndex * slope);\n                        }\n                        else {\n                            ordinal.overscrollPointsRange = pick(axis.closestPointRange, ordinal.overscrollPointsRange);\n                            ordinal.positions = axis.ordinal.slope = ordinal.offset =\n                                void 0;\n                        }\n                    }\n                    axis.isOrdinal = isOrdinal && useOrdinal; // #3818, #4196, #4926\n                    ordinal.groupIntervalFactor = null; // Reset for next run\n                }\n                /**\n                 * Faster way of using the Array.indexOf method.\n                 * Works for sorted arrays only with unique values.\n                 *\n                 * @param {Array} sortedArray\n                 *        The sorted array inside which we are looking for.\n                 * @param {number} key\n                 *        The key to being found.\n                 * @param {boolean} indirectSearch\n                 *        In case of lack of the point in the array, should return\n                 *        value be equal to -1 or the closest smaller index.\n                 *  @private\n                 */\n                static findIndexOf(sortedArray, key, indirectSearch) {\n                    let start = 0, end = sortedArray.length - 1, middle;\n                    while (start < end) {\n                        middle = Math.ceil((start + end) / 2);\n                        // Key found as the middle element.\n                        if (sortedArray[middle] <= key) {\n                            // Continue searching to the right.\n                            start = middle;\n                        }\n                        else {\n                            // Continue searching to the left.\n                            end = middle - 1;\n                        }\n                    }\n                    if (sortedArray[start] === key) {\n                        return start;\n                    }\n                    // Key could not be found.\n                    return !indirectSearch ? -1 : start;\n                }\n                /**\n                 * Get the ordinal positions for the entire data set. This is necessary\n                 * in chart panning because we need to find out what points or data\n                 * groups are available outside the visible range. When a panning\n                 * operation starts, if an index for the given grouping does not exists,\n                 * it is created and cached. This index is deleted on updated data, so\n                 * it will be regenerated the next time a panning operation starts.\n                 * @private\n                 */\n                getExtendedPositions(withOverscroll = true) {\n                    const ordinal = this, axis = ordinal.axis, axisProto = axis.constructor.prototype, chart = axis.chart, grouping = axis.series[0]?.currentDataGrouping, key = grouping ?\n                        grouping.count + grouping.unitName :\n                        'raw', overscroll = withOverscroll ?\n                        axis.ordinal.convertOverscroll(axis.options.overscroll) : 0, extremes = axis.getExtremes();\n                    let fakeAxis, fakeSeries = void 0, ordinalIndex = ordinal.index;\n                    // If this is the first time, or the ordinal index is deleted by\n                    // updatedData,\n                    // create it.\n                    if (!ordinalIndex) {\n                        ordinalIndex = ordinal.index = {};\n                    }\n                    if (!ordinalIndex[key]) {\n                        // Create a fake axis object where the extended ordinal\n                        // positions are emulated\n                        fakeAxis = {\n                            series: [],\n                            chart: chart,\n                            forceOrdinal: false,\n                            getExtremes: function () {\n                                return {\n                                    min: extremes.dataMin,\n                                    max: extremes.dataMax + overscroll\n                                };\n                            },\n                            applyGrouping: axisProto.applyGrouping,\n                            getGroupPixelWidth: axisProto.getGroupPixelWidth,\n                            getTimeTicks: axisProto.getTimeTicks,\n                            options: {\n                                ordinal: true\n                            },\n                            ordinal: {\n                                getGroupIntervalFactor: this.getGroupIntervalFactor\n                            },\n                            ordinal2lin: axisProto.ordinal2lin, // #6276\n                            getIndexOfPoint: axisProto.getIndexOfPoint,\n                            val2lin: axisProto.val2lin // #2590\n                        };\n                        fakeAxis.ordinal.axis = fakeAxis;\n                        // Add the fake series to hold the full data, then apply\n                        // processData to it\n                        axis.series.forEach(function (series) {\n                            fakeSeries = {\n                                xAxis: fakeAxis,\n                                xData: series.xData.slice(),\n                                chart: chart,\n                                groupPixelWidth: series.groupPixelWidth,\n                                destroyGroupedData: H.noop,\n                                getProcessedData: Series.prototype.getProcessedData,\n                                applyGrouping: Series.prototype.applyGrouping,\n                                reserveSpace: Series.prototype.reserveSpace,\n                                visible: series.visible\n                            };\n                            if (withOverscroll) {\n                                fakeSeries.xData = fakeSeries.xData.concat(ordinal.getOverscrollPositions());\n                            }\n                            fakeSeries.options = {\n                                dataGrouping: grouping ? {\n                                    firstAnchor: series.options.dataGrouping?.firstAnchor,\n                                    anchor: series.options.dataGrouping?.anchor,\n                                    lastAnchor: series.options.dataGrouping?.firstAnchor,\n                                    enabled: true,\n                                    forced: true,\n                                    // Doesn't matter which, use the fastest\n                                    approximation: 'open',\n                                    units: [[\n                                            grouping.unitName,\n                                            [grouping.count]\n                                        ]]\n                                } : {\n                                    enabled: false\n                                }\n                            };\n                            fakeAxis.series.push(fakeSeries);\n                            series.processData.apply(fakeSeries);\n                        });\n                        fakeAxis.applyGrouping({ hasExtremesChanged: true });\n                        // Force to use the ordinal when points are evenly spaced (e.g.\n                        // weeks), #3825.\n                        if ((fakeSeries?.closestPointRange !==\n                            fakeSeries?.basePointRange) &&\n                            fakeSeries.currentDataGrouping) {\n                            fakeAxis.forceOrdinal = true;\n                        }\n                        // Run beforeSetTickPositions to compute the ordinalPositions\n                        axis.ordinal.beforeSetTickPositions.apply({ axis: fakeAxis });\n                        if (!axis.ordinal.originalOrdinalRange &&\n                            fakeAxis.ordinal.originalOrdinalRange) {\n                            axis.ordinal.originalOrdinalRange =\n                                fakeAxis.ordinal.originalOrdinalRange;\n                        }\n                        // Cache it\n                        ordinalIndex[key] = fakeAxis.ordinal.positions;\n                    }\n                    return ordinalIndex[key];\n                }\n                /**\n                 * Find the factor to estimate how wide the plot area would have been if\n                 * ordinal gaps were included. This value is used to compute an imagined\n                 * plot width in order to establish the data grouping interval.\n                 *\n                 * A real world case is the intraday-candlestick example. Without this\n                 * logic, it would show the correct data grouping when viewing a range\n                 * within each day, but once moving the range to include the gap between\n                 * two days, the interval would include the cut-away night hours and the\n                 * data grouping would be wrong. So the below method tries to compensate\n                 * by identifying the most common point interval, in this case days.\n                 *\n                 * An opposite case is presented in issue #718. We have a long array of\n                 * daily data, then one point is appended one hour after the last point.\n                 * We expect the data grouping not to change.\n                 *\n                 * In the future, if we find cases where this estimation doesn't work\n                 * optimally, we might need to add a second pass to the data grouping\n                 * logic, where we do another run with a greater interval if the number\n                 * of data groups is more than a certain fraction of the desired group\n                 * count.\n                 * @private\n                 */\n                getGroupIntervalFactor(xMin, xMax, series) {\n                    const ordinal = this, processedXData = series.processedXData, len = processedXData.length, distances = [];\n                    let median, i, groupIntervalFactor = ordinal.groupIntervalFactor;\n                    // Only do this computation for the first series, let the other\n                    // inherit it (#2416)\n                    if (!groupIntervalFactor) {\n                        // Register all the distances in an array\n                        for (i = 0; i < len - 1; i++) {\n                            distances[i] = (processedXData[i + 1] -\n                                processedXData[i]);\n                        }\n                        // Sort them and find the median\n                        distances.sort(function (a, b) {\n                            return a - b;\n                        });\n                        median = distances[Math.floor(len / 2)];\n                        // Compensate for series that don't extend through the entire\n                        // axis extent. #1675.\n                        xMin = Math.max(xMin, processedXData[0]);\n                        xMax = Math.min(xMax, processedXData[len - 1]);\n                        ordinal.groupIntervalFactor = groupIntervalFactor =\n                            (len * median) / (xMax - xMin);\n                    }\n                    // Return the factor needed for data grouping\n                    return groupIntervalFactor;\n                }\n                /**\n                 * Get index of point inside the ordinal positions array.\n                 *\n                 * @private\n                 * @param {number} val\n                 * The pixel value of a point.\n                 *\n                 * @param {Array<number>} [ordinalArray]\n                 * An array of all points available on the axis for the given data set.\n                 * Either ordinalPositions if the value is inside the plotArea or\n                 * extendedOrdinalPositions if not.\n                 */\n                getIndexOfPoint(val, ordinalArray) {\n                    const ordinal = this, axis = ordinal.axis;\n                    let firstPointVal = 0;\n                    // Check whether the series has at least one point inside the chart\n                    const hasPointsInside = function (series) {\n                        const { min, max } = axis;\n                        if (defined(min) && defined(max)) {\n                            return series.points.some((point) => point.x >= min && point.x <= max);\n                        }\n                        return false;\n                    };\n                    let firstPointX;\n                    // When more series assign to axis, find the smallest one, #15987.\n                    axis.series.forEach((series) => {\n                        const firstPoint = series.points?.[0];\n                        if (defined(firstPoint?.plotX) &&\n                            (firstPoint.plotX < firstPointX ||\n                                !defined(firstPointX)) &&\n                            hasPointsInside(series)) {\n                            firstPointX = firstPoint.plotX;\n                            firstPointVal = firstPoint.x;\n                        }\n                    });\n                    // If undefined, give a default value\n                    firstPointX ?? (firstPointX = axis.minPixelPadding);\n                    // Distance in pixels between two points on the ordinal axis in the\n                    // current zoom.\n                    const ordinalPointPixelInterval = axis.translationSlope * (ordinal.slope ||\n                        axis.closestPointRange ||\n                        ordinal.overscrollPointsRange), \n                    // `toValue` for the first point.\n                    shiftIndex = correctFloat((val - firstPointX) / ordinalPointPixelInterval);\n                    return Additions.findIndexOf(ordinalArray, firstPointVal, true) + shiftIndex;\n                }\n                /**\n                 * Get ticks for an ordinal axis within a range where points don't\n                 * exist. It is required when overscroll is enabled. We can't base on\n                 * points, because we may not have any, so we use approximated\n                 * pointRange and generate these ticks between Axis.dataMax,\n                 * Axis.dataMax + Axis.overscroll evenly spaced. Used in panning and\n                 * navigator scrolling.\n                 * @private\n                 */\n                getOverscrollPositions() {\n                    const ordinal = this, axis = ordinal.axis, extraRange = ordinal.convertOverscroll(axis.options.overscroll), distance = ordinal.overscrollPointsRange, positions = [];\n                    let max = axis.dataMax;\n                    if (defined(distance)) {\n                        // Max + pointRange because we need to scroll to the last\n                        while (max <= axis.dataMax + extraRange) {\n                            max += distance;\n                            positions.push(max);\n                        }\n                    }\n                    return positions;\n                }\n                /**\n                 * Make the tick intervals closer because the ordinal gaps make the\n                 * ticks spread out or cluster.\n                 * @private\n                 */\n                postProcessTickInterval(tickInterval) {\n                    // Problem: https://jsfiddle.net/highcharts/FQm4E/1/. This is a case\n                    // where this algorithm doesn't work optimally. In this case, the\n                    // tick labels are spread out per week, but all the gaps reside\n                    // within weeks. So we have a situation where the labels are courser\n                    // than the ordinal gaps, and thus the tick interval should not be\n                    // altered.\n                    const ordinal = this, axis = ordinal.axis, ordinalSlope = ordinal.slope;\n                    let ret;\n                    if (ordinalSlope) {\n                        if (!axis.options.breaks) {\n                            ret = (tickInterval /\n                                (ordinalSlope / axis.closestPointRange));\n                        }\n                        else {\n                            ret = axis.closestPointRange || tickInterval; // #7275\n                        }\n                    }\n                    else {\n                        ret = tickInterval;\n                    }\n                    return ret;\n                }\n                /**\n                 * If overscroll is pixel or pecentage value, convert it to axis range.\n                 *\n                 * @private\n                 * @param {number | string} overscroll\n                 * Overscroll value in axis range, pixels or percentage value.\n                 * @return {number}\n                 * Overscroll value in axis range.\n                 */\n                convertOverscroll(overscroll = 0) {\n                    const ordinal = this, axis = ordinal.axis, calculateOverscroll = function (overscrollPercentage) {\n                        return pick(ordinal.originalOrdinalRange, defined(axis.dataMax) && defined(axis.dataMin) ?\n                            axis.dataMax - axis.dataMin : 0) * overscrollPercentage;\n                    };\n                    if (isString(overscroll)) {\n                        const overscrollValue = parseInt(overscroll, 10);\n                        if (/%$/.test(overscroll)) {\n                            // If overscroll is percentage\n                            return calculateOverscroll(overscrollValue / 100);\n                        }\n                        if (/px/.test(overscroll)) {\n                            // If overscroll is pixels, it is limited to 90% of the axis\n                            // length to prevent division by zero\n                            const limitedOverscrollValue = Math.min(overscrollValue, axis.len * 0.9), pixelToPercent = limitedOverscrollValue / axis.len;\n                            return calculateOverscroll(pixelToPercent / (1 - pixelToPercent));\n                        }\n                        // If overscroll is a string but not pixels or percentage,\n                        // return 0 as no overscroll\n                        return 0;\n                    }\n                    return overscroll;\n                }\n            }\n            OrdinalAxis.Additions = Additions;\n        })(OrdinalAxis || (OrdinalAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OrdinalAxis;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelector.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Stock/RangeSelector/RangeSelectorComposition.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js'], _modules['Core/Axis/OrdinalAxis.js']], function (Axis, D, H, RangeSelectorComposition, SVGElement, U, OrdinalAxis) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, createElement, css, defined, destroyObjectProperties, discardElement, extend, fireEvent, isNumber, merge, objectEach, pad, pick, pInt, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the preferred input type based on a date format string.\n         *\n         * @private\n         * @function preferredInputType\n         */\n        function preferredInputType(format) {\n            const ms = format.indexOf('%L') !== -1;\n            if (ms) {\n                return 'text';\n            }\n            const date = ['a', 'A', 'd', 'e', 'w', 'b', 'B', 'm', 'o', 'y', 'Y']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            const time = ['H', 'k', 'I', 'l', 'M', 'S']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            if (date && time) {\n                return 'datetime-local';\n            }\n            if (date) {\n                return 'date';\n            }\n            if (time) {\n                return 'time';\n            }\n            return 'text';\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The range selector.\n         *\n         * @private\n         * @class\n         * @name Highcharts.RangeSelector\n         * @param {Highcharts.Chart} chart\n         */\n        class RangeSelector {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass, ChartClass) {\n                RangeSelectorComposition.compose(AxisClass, ChartClass, RangeSelector);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                this.buttonOptions = RangeSelector.prototype.defaultButtons;\n                this.initialButtonGroupWidth = 0;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * The method to run when one of the buttons in the range selectors is\n             * clicked\n             *\n             * @private\n             * @function Highcharts.RangeSelector#clickButton\n             * @param {number} i\n             *        The index of the button\n             * @param {boolean} [redraw]\n             */\n            clickButton(i, redraw) {\n                const rangeSelector = this, chart = rangeSelector.chart, rangeOptions = rangeSelector.buttonOptions[i], baseAxis = chart.xAxis[0], unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || baseAxis || {}, type = rangeOptions.type, dataGrouping = rangeOptions.dataGrouping;\n                let dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, newMin, newMax = baseAxis && Math.round(Math.min(baseAxis.max, pick(dataMax, baseAxis.max))), // #1568\n                baseXAxisOptions, range = rangeOptions._range, rangeMin, ctx, ytdExtremes, addOffsetMin = true;\n                // Chart has no data, base series is removed\n                if (dataMin === null || dataMax === null) {\n                    return;\n                }\n                rangeSelector.setSelected(i);\n                // Apply dataGrouping associated to button\n                if (dataGrouping) {\n                    this.forcedDataGrouping = true;\n                    Axis.prototype.setDataGrouping.call(baseAxis || { chart: this.chart }, dataGrouping, false);\n                    this.frozenStates = rangeOptions.preserveDataGrouping;\n                }\n                // Apply range\n                if (type === 'month' || type === 'year') {\n                    if (!baseAxis) {\n                        // This is set to the user options and picked up later when the\n                        // axis is instantiated so that we know the min and max.\n                        range = rangeOptions;\n                    }\n                    else {\n                        ctx = {\n                            range: rangeOptions,\n                            max: newMax,\n                            chart: chart,\n                            dataMin: dataMin,\n                            dataMax: dataMax\n                        };\n                        newMin = baseAxis.minFromRange.call(ctx);\n                        if (isNumber(ctx.newMax)) {\n                            newMax = ctx.newMax;\n                        }\n                        // #15799: offsetMin is added in minFromRange so that it works\n                        // with pre-selected buttons as well\n                        addOffsetMin = false;\n                    }\n                    // Fixed times like minutes, hours, days\n                }\n                else if (range) {\n                    newMin = Math.max(newMax - range, dataMin);\n                    newMax = Math.min(newMin + range, dataMax);\n                    addOffsetMin = false;\n                }\n                else if (type === 'ytd') {\n                    // On user clicks on the buttons, or a delayed action running from\n                    // the beforeRender event (below), the baseAxis is defined.\n                    if (baseAxis) {\n                        // When \"ytd\" is the pre-selected button for the initial view,\n                        // its calculation is delayed and rerun in the beforeRender\n                        // event (below). When the series are initialized, but before\n                        // the chart is rendered, we have access to the xData array\n                        // (#942).\n                        if (typeof dataMax === 'undefined' ||\n                            typeof dataMin === 'undefined') {\n                            dataMin = Number.MAX_VALUE;\n                            dataMax = Number.MIN_VALUE;\n                            chart.series.forEach((series) => {\n                                // Reassign it to the last item\n                                const xData = series.xData;\n                                if (xData) {\n                                    dataMin = Math.min(xData[0], dataMin);\n                                    dataMax = Math.max(xData[xData.length - 1], dataMax);\n                                }\n                            });\n                            redraw = false;\n                        }\n                        ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC);\n                        newMin = rangeMin = ytdExtremes.min;\n                        newMax = ytdExtremes.max;\n                        // \"ytd\" is pre-selected. We don't yet have access to processed\n                        // point and extremes data (things like pointStart and pointInterval\n                        // are missing), so we delay the process (#942)\n                    }\n                    else {\n                        rangeSelector.deferredYTDClick = i;\n                        return;\n                    }\n                }\n                else if (type === 'all' && baseAxis) {\n                    // If the navigator exist and the axis range is declared reset that\n                    // range and from now on only use the range set by a user, #14742.\n                    if (chart.navigator && chart.navigator.baseSeries[0]) {\n                        chart.navigator.baseSeries[0].xAxis.options.range = void 0;\n                    }\n                    newMin = dataMin;\n                    newMax = dataMax;\n                }\n                if (addOffsetMin && rangeOptions._offsetMin && defined(newMin)) {\n                    newMin += rangeOptions._offsetMin;\n                }\n                if (rangeOptions._offsetMax && defined(newMax)) {\n                    newMax += rangeOptions._offsetMax;\n                }\n                if (this.dropdown) {\n                    this.dropdown.selectedIndex = i + 1;\n                }\n                // Update the chart\n                if (!baseAxis) {\n                    // Axis not yet instantiated. Temporarily set min and range\n                    // options and axes once defined and remove them on\n                    // chart load (#4317 & #20529).\n                    baseXAxisOptions = splat(chart.options.xAxis)[0];\n                    const axisRangeUpdateEvent = addEvent(chart, 'afterGetAxes', function () {\n                        const xAxis = chart.xAxis[0];\n                        xAxis.range = xAxis.options.range = range;\n                        xAxis.min = xAxis.options.min = rangeMin;\n                    });\n                    addEvent(chart, 'load', function resetMinAndRange() {\n                        const xAxis = chart.xAxis[0];\n                        chart.setFixedRange(rangeOptions._range);\n                        xAxis.options.range = baseXAxisOptions.range;\n                        xAxis.options.min = baseXAxisOptions.min;\n                        axisRangeUpdateEvent(); // Remove event\n                    });\n                }\n                else {\n                    // Existing axis object. Set extremes after render time.\n                    baseAxis.setExtremes(newMin, newMax, pick(redraw, true), void 0, // Auto animation\n                    {\n                        trigger: 'rangeSelectorButton',\n                        rangeSelectorButton: rangeOptions\n                    });\n                    chart.setFixedRange(rangeOptions._range);\n                }\n                fireEvent(this, 'afterBtnClick');\n            }\n            /**\n             * Set the selected option. This method only sets the internal flag, it\n             * doesn't update the buttons or the actual zoomed range.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setSelected\n             * @param {number} [selected]\n             */\n            setSelected(selected) {\n                this.selected = this.options.selected = selected;\n            }\n            /**\n             * Initialize the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#init\n             * @param {Highcharts.Chart} chart\n             */\n            init(chart) {\n                const rangeSelector = this, options = chart.options.rangeSelector, buttonOptions = (options.buttons || rangeSelector.defaultButtons.slice()), selectedOption = options.selected, blurInputs = function () {\n                    const minInput = rangeSelector.minInput, maxInput = rangeSelector.maxInput;\n                    // #3274 in some case blur is not defined\n                    if (minInput && !!minInput.blur) {\n                        fireEvent(minInput, 'blur');\n                    }\n                    if (maxInput && !!maxInput.blur) {\n                        fireEvent(maxInput, 'blur');\n                    }\n                };\n                rangeSelector.chart = chart;\n                rangeSelector.options = options;\n                rangeSelector.buttons = [];\n                rangeSelector.buttonOptions = buttonOptions;\n                this.eventsToUnbind = [];\n                this.eventsToUnbind.push(addEvent(chart.container, 'mousedown', blurInputs));\n                this.eventsToUnbind.push(addEvent(chart, 'resize', blurInputs));\n                // Extend the buttonOptions with actual range\n                buttonOptions.forEach(rangeSelector.computeButtonRange);\n                // Zoomed range based on a pre-selected button index\n                if (typeof selectedOption !== 'undefined' &&\n                    buttonOptions[selectedOption]) {\n                    this.clickButton(selectedOption, false);\n                }\n                this.eventsToUnbind.push(addEvent(chart, 'load', function () {\n                    // If a data grouping is applied to the current button, release it\n                    // when extremes change\n                    if (chart.xAxis && chart.xAxis[0]) {\n                        addEvent(chart.xAxis[0], 'setExtremes', function (e) {\n                            if (isNumber(this.max) &&\n                                isNumber(this.min) &&\n                                this.max - this.min !== chart.fixedRange &&\n                                e.trigger !== 'rangeSelectorButton' &&\n                                e.trigger !== 'updatedData' &&\n                                rangeSelector.forcedDataGrouping &&\n                                !rangeSelector.frozenStates) {\n                                this.setDataGrouping(false, false);\n                            }\n                        });\n                    }\n                }));\n                this.createElements();\n            }\n            /**\n             * Dynamically update the range selector buttons after a new range has been\n             * set\n             *\n             * @private\n             * @function Highcharts.RangeSelector#updateButtonStates\n             */\n            updateButtonStates() {\n                const rangeSelector = this, chart = this.chart, dropdown = this.dropdown, dropdownLabel = this.dropdownLabel, baseAxis = chart.xAxis[0], actualRange = Math.round(baseAxis.max - baseAxis.min), hasNoData = !baseAxis.hasVisibleSeries, day = 24 * 36e5, // A single day in milliseconds\n                unionExtremes = (chart.scroller &&\n                    chart.scroller.getUnionExtremes()) || baseAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC), ytdMin = ytdExtremes.min, ytdMax = ytdExtremes.max, selected = rangeSelector.selected, allButtonsEnabled = rangeSelector.options.allButtonsEnabled, buttonStates = new Array(rangeSelector.buttonOptions.length)\n                    .fill(0), selectedExists = isNumber(selected), buttons = rangeSelector.buttons;\n                let isSelectedTooGreat = false, selectedIndex = null;\n                rangeSelector.buttonOptions.forEach((rangeOptions, i) => {\n                    const range = rangeOptions._range, type = rangeOptions.type, count = rangeOptions.count || 1, offsetRange = rangeOptions._offsetMax -\n                        rangeOptions._offsetMin, isSelected = i === selected, \n                    // Disable buttons where the range exceeds what is allowed i;\n                    // the current view\n                    isTooGreatRange = range >\n                        dataMax - dataMin, \n                    // Disable buttons where the range is smaller than the minimum\n                    // range\n                    isTooSmallRange = range < baseAxis.minRange;\n                    // Do not select the YTD button if not explicitly told so\n                    let isYTDButNotSelected = false, \n                    // Disable the All button if we're already showing all\n                    isSameRange = range === actualRange;\n                    if (isSelected && isTooGreatRange) {\n                        isSelectedTooGreat = true;\n                    }\n                    if (baseAxis.isOrdinal &&\n                        baseAxis.ordinal?.positions &&\n                        range &&\n                        actualRange < range) {\n                        // Handle ordinal ranges\n                        const positions = baseAxis.ordinal.positions, prevOrdinalPosition = OrdinalAxis.Additions.findIndexOf(positions, baseAxis.min, true), nextOrdinalPosition = Math.min(OrdinalAxis.Additions.findIndexOf(positions, baseAxis.max, true) + 1, positions.length - 1);\n                        if (positions[nextOrdinalPosition] -\n                            positions[prevOrdinalPosition] > range) {\n                            isSameRange = true;\n                        }\n                    }\n                    else if (\n                    // Months and years have variable range so we check the extremes\n                    (type === 'month' || type === 'year') &&\n                        (actualRange + 36e5 >=\n                            { month: 28, year: 365 }[type] * day * count - offsetRange) &&\n                        (actualRange - 36e5 <=\n                            { month: 31, year: 366 }[type] * day * count + offsetRange)) {\n                        isSameRange = true;\n                    }\n                    else if (type === 'ytd') {\n                        isSameRange = (ytdMax - ytdMin + offsetRange) === actualRange;\n                        isYTDButNotSelected = !isSelected;\n                    }\n                    else if (type === 'all') {\n                        isSameRange = (baseAxis.max - baseAxis.min >=\n                            dataMax - dataMin);\n                    }\n                    // The new zoom area happens to match the range for a button - mark\n                    // it selected. This happens when scrolling across an ordinal gap.\n                    // It can be seen in the intraday demos when selecting 1h and scroll\n                    // across the night gap.\n                    const disable = (!allButtonsEnabled &&\n                        !(isSelectedTooGreat && type === 'all') &&\n                        (isTooGreatRange ||\n                            isTooSmallRange ||\n                            hasNoData));\n                    const select = ((isSelectedTooGreat && type === 'all') ||\n                        (isYTDButNotSelected ? false : isSameRange) ||\n                        (isSelected && rangeSelector.frozenStates));\n                    if (disable) {\n                        buttonStates[i] = 3;\n                    }\n                    else if (select) {\n                        if (!selectedExists || i === selected) {\n                            selectedIndex = i;\n                        }\n                    }\n                });\n                if (selectedIndex !== null) {\n                    buttonStates[selectedIndex] = 2;\n                    rangeSelector.setSelected(selectedIndex);\n                }\n                else {\n                    rangeSelector.setSelected();\n                    if (dropdownLabel) {\n                        dropdownLabel.setState(0);\n                        dropdownLabel.attr({\n                            text: (defaultOptions.lang.rangeSelectorZoom || '') + ' â–¾'\n                        });\n                    }\n                }\n                for (let i = 0; i < buttonStates.length; i++) {\n                    const state = buttonStates[i];\n                    const button = buttons[i];\n                    if (button.state !== state) {\n                        button.setState(state);\n                        if (dropdown) {\n                            dropdown.options[i + 1].disabled = (state === 3);\n                            if (state === 2) {\n                                if (dropdownLabel) {\n                                    dropdownLabel.setState(2);\n                                    dropdownLabel.attr({\n                                        text: rangeSelector.buttonOptions[i].text + ' â–¾'\n                                    });\n                                }\n                                dropdown.selectedIndex = i + 1;\n                            }\n                            const bbox = dropdownLabel.getBBox();\n                            css(dropdown, {\n                                width: `${bbox.width}px`,\n                                height: `${bbox.height}px`\n                            });\n                        }\n                    }\n                }\n            }\n            /**\n             * Compute and cache the range for an individual button\n             *\n             * @private\n             * @function Highcharts.RangeSelector#computeButtonRange\n             * @param {Highcharts.RangeSelectorButtonsOptions} rangeOptions\n             */\n            computeButtonRange(rangeOptions) {\n                const type = rangeOptions.type, count = rangeOptions.count || 1, \n                // These time intervals have a fixed number of milliseconds, as\n                // opposed to month, ytd and year\n                fixedTimes = {\n                    millisecond: 1,\n                    second: 1000,\n                    minute: 60 * 1000,\n                    hour: 3600 * 1000,\n                    day: 24 * 3600 * 1000,\n                    week: 7 * 24 * 3600 * 1000\n                };\n                // Store the range on the button object\n                if (fixedTimes[type]) {\n                    rangeOptions._range = fixedTimes[type] * count;\n                }\n                else if (type === 'month' || type === 'year') {\n                    rangeOptions._range = {\n                        month: 30,\n                        year: 365\n                    }[type] * 24 * 36e5 * count;\n                }\n                rangeOptions._offsetMin = pick(rangeOptions.offsetMin, 0);\n                rangeOptions._offsetMax = pick(rangeOptions.offsetMax, 0);\n                rangeOptions._range +=\n                    rangeOptions._offsetMax - rangeOptions._offsetMin;\n            }\n            /**\n             * Get the unix timestamp of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getInputValue\n             */\n            getInputValue(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                const options = this.chart.options\n                    .rangeSelector;\n                const time = this.chart.time;\n                if (input) {\n                    return ((input.type === 'text' && options.inputDateParser) ||\n                        this.defaultInputDateParser)(input.value, time.useUTC, time);\n                }\n                return 0;\n            }\n            /**\n             * Set the internal and displayed value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputValue\n             */\n            setInputValue(name, inputTime) {\n                const options = this.options, time = this.chart.time, input = name === 'min' ? this.minInput : this.maxInput, dateBox = name === 'min' ? this.minDateBox : this.maxDateBox;\n                if (input) {\n                    const hcTimeAttr = input.getAttribute('data-hc-time');\n                    let updatedTime = defined(hcTimeAttr) ? Number(hcTimeAttr) : void 0;\n                    if (defined(inputTime)) {\n                        const previousTime = updatedTime;\n                        if (defined(previousTime)) {\n                            input.setAttribute('data-hc-time-previous', previousTime);\n                        }\n                        input.setAttribute('data-hc-time', inputTime);\n                        updatedTime = inputTime;\n                    }\n                    input.value = time.dateFormat((this.inputTypeFormats[input.type] ||\n                        options.inputEditDateFormat), updatedTime);\n                    if (dateBox) {\n                        dateBox.attr({\n                            text: time.dateFormat(options.inputDateFormat, updatedTime)\n                        });\n                    }\n                }\n            }\n            /**\n             * Set the min and max value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputExtremes\n             */\n            setInputExtremes(name, min, max) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    const format = this.inputTypeFormats[input.type];\n                    const time = this.chart.time;\n                    if (format) {\n                        const newMin = time.dateFormat(format, min);\n                        if (input.min !== newMin) {\n                            input.min = newMin;\n                        }\n                        const newMax = time.dateFormat(format, max);\n                        if (input.max !== newMax) {\n                            input.max = newMax;\n                        }\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#showInput\n             * @param {string} name\n             */\n            showInput(name) {\n                const dateBox = name === 'min' ? this.minDateBox : this.maxDateBox, input = name === 'min' ? this.minInput : this.maxInput;\n                if (input && dateBox && this.inputGroup) {\n                    const isTextInput = input.type === 'text', { translateX = 0, translateY = 0 } = this.inputGroup, { x = 0, width = 0, height = 0 } = dateBox, { inputBoxWidth } = this.options;\n                    css(input, {\n                        width: isTextInput ?\n                            ((width + (inputBoxWidth ? -2 : 20)) + 'px') :\n                            'auto',\n                        height: (height - 2) + 'px',\n                        border: '2px solid silver'\n                    });\n                    if (isTextInput && inputBoxWidth) {\n                        css(input, {\n                            left: (translateX + x) + 'px',\n                            top: translateY + 'px'\n                        });\n                        // Inputs of types date, time or datetime-local should be centered\n                        // on top of the dateBox\n                    }\n                    else {\n                        css(input, {\n                            left: Math.min(Math.round(x +\n                                translateX -\n                                (input.offsetWidth - width) / 2), this.chart.chartWidth - input.offsetWidth) + 'px',\n                            top: (translateY - (input.offsetHeight - height) / 2) + 'px'\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideInput\n             * @param {string} name\n             */\n            hideInput(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    css(input, {\n                        top: '-9999em',\n                        border: 0,\n                        width: '1px',\n                        height: '1px'\n                    });\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#defaultInputDateParser\n             */\n            defaultInputDateParser(inputDate, useUTC, time) {\n                const hasTimezone = (str) => str.length > 6 &&\n                    (str.lastIndexOf('-') === str.length - 6 ||\n                        str.lastIndexOf('+') === str.length - 6);\n                let input = inputDate.split('/').join('-').split(' ').join('T');\n                if (input.indexOf('T') === -1) {\n                    input += 'T00:00';\n                }\n                if (useUTC) {\n                    input += 'Z';\n                }\n                else if (H.isSafari && !hasTimezone(input)) {\n                    const offset = new Date(input).getTimezoneOffset() / 60;\n                    input += offset <= 0 ? `+${pad(-offset)}:00` : `-${pad(offset)}:00`;\n                }\n                let date = Date.parse(input);\n                // If the value isn't parsed directly to a value by the\n                // browser's Date.parse method, try\n                // parsing it a different way\n                if (!isNumber(date)) {\n                    const parts = inputDate.split('-');\n                    date = Date.UTC(pInt(parts[0]), pInt(parts[1]) - 1, pInt(parts[2]));\n                }\n                if (time && useUTC && isNumber(date)) {\n                    date += time.getTimezoneOffset(date);\n                }\n                return date;\n            }\n            /**\n             * Draw either the 'from' or the 'to' HTML input box of the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#drawInput\n             */\n            drawInput(name) {\n                const { chart, div, inputGroup } = this;\n                const rangeSelector = this, chartStyle = chart.renderer.style || {}, renderer = chart.renderer, options = chart.options.rangeSelector, lang = defaultOptions.lang, isMin = name === 'min';\n                /**\n                 * @private\n                 */\n                function updateExtremes(name) {\n                    const { maxInput, minInput } = rangeSelector, chartAxis = chart.xAxis[0], unionExtremes = chart.scroller?.getUnionExtremes() || chartAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, currentExtreme = chart.xAxis[0].getExtremes()[name];\n                    let value = rangeSelector.getInputValue(name);\n                    if (isNumber(value) && value !== currentExtreme) {\n                        // Validate the extremes. If it goes beyond the data min or\n                        // max, use the actual data extreme (#2438).\n                        if (isMin && maxInput && isNumber(dataMin)) {\n                            if (value > Number(maxInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value < dataMin) {\n                                value = dataMin;\n                            }\n                        }\n                        else if (minInput && isNumber(dataMax)) {\n                            if (value < Number(minInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value > dataMax) {\n                                value = dataMax;\n                            }\n                        }\n                        // Set the extremes\n                        if (typeof value !== 'undefined') { // @todo typeof undefined\n                            chartAxis.setExtremes(isMin ? value : chartAxis.min, isMin ? chartAxis.max : value, void 0, void 0, { trigger: 'rangeSelectorInput' });\n                        }\n                    }\n                }\n                // Create the text label\n                const text = lang[isMin ? 'rangeSelectorFrom' : 'rangeSelectorTo'] || '';\n                const label = renderer\n                    .label(text, 0)\n                    .addClass('highcharts-range-label')\n                    .attr({\n                    padding: text ? 2 : 0,\n                    height: text ? options.inputBoxHeight : 0\n                })\n                    .add(inputGroup);\n                // Create an SVG label that shows updated date ranges and records click\n                // events that bring in the HTML input.\n                const dateBox = renderer\n                    .label('', 0)\n                    .addClass('highcharts-range-input')\n                    .attr({\n                    padding: 2,\n                    width: options.inputBoxWidth,\n                    height: options.inputBoxHeight,\n                    'text-align': 'center'\n                })\n                    .on('click', function () {\n                    // If it is already focused, the onfocus event doesn't fire\n                    // (#3713)\n                    rangeSelector.showInput(name);\n                    rangeSelector[name + 'Input'].focus();\n                });\n                if (!chart.styledMode) {\n                    dateBox.attr({\n                        stroke: options.inputBoxBorderColor,\n                        'stroke-width': 1\n                    });\n                }\n                dateBox.add(inputGroup);\n                // Create the HTML input element. This is rendered as 1x1 pixel then set\n                // to the right size when focused.\n                const input = createElement('input', {\n                    name: name,\n                    className: 'highcharts-range-selector'\n                }, void 0, div);\n                // #14788: Setting input.type to an unsupported type throws in IE, so\n                // we need to use setAttribute instead\n                input.setAttribute('type', preferredInputType(options.inputDateFormat || '%e %b %Y'));\n                if (!chart.styledMode) {\n                    // Styles\n                    label.css(merge(chartStyle, options.labelStyle));\n                    dateBox.css(merge({\n                        color: \"#333333\" /* Palette.neutralColor80 */\n                    }, chartStyle, options.inputStyle));\n                    css(input, extend({\n                        position: 'absolute',\n                        border: 0,\n                        boxShadow: '0 0 15px rgba(0,0,0,0.3)',\n                        width: '1px', // Chrome needs a pixel to see it\n                        height: '1px',\n                        padding: 0,\n                        textAlign: 'center',\n                        fontSize: chartStyle.fontSize,\n                        fontFamily: chartStyle.fontFamily,\n                        top: '-9999em' // #4798\n                    }, options.inputStyle));\n                }\n                // Blow up the input box\n                input.onfocus = () => {\n                    rangeSelector.showInput(name);\n                };\n                // Hide away the input box\n                input.onblur = () => {\n                    // Update extremes only when inputs are active\n                    if (input === H.doc.activeElement) { // Only when focused\n                        // Update also when no `change` event is triggered, like when\n                        // clicking inside the SVG (#4710)\n                        updateExtremes(name);\n                    }\n                    // #10404 - move hide and blur outside focus\n                    rangeSelector.hideInput(name);\n                    rangeSelector.setInputValue(name);\n                    input.blur(); // #4606\n                };\n                let keyDown = false;\n                // Handle changes in the input boxes\n                input.onchange = () => {\n                    // Update extremes and blur input when clicking date input calendar\n                    if (!keyDown) {\n                        updateExtremes(name);\n                        rangeSelector.hideInput(name);\n                        input.blur();\n                    }\n                };\n                input.onkeypress = (event) => {\n                    // IE does not fire onchange on enter\n                    if (event.keyCode === 13) {\n                        updateExtremes(name);\n                    }\n                };\n                input.onkeydown = (event) => {\n                    keyDown = true;\n                    // Arrow keys\n                    if (event.key === 'ArrowUp' ||\n                        event.key === 'ArrowDown' ||\n                        event.key === 'Tab') {\n                        updateExtremes(name);\n                    }\n                };\n                input.onkeyup = () => {\n                    keyDown = false;\n                };\n                return { dateBox, input, label };\n            }\n            /**\n             * Get the position of the range selector buttons and inputs. This can be\n             * overridden from outside for custom positioning.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getPosition\n             */\n            getPosition() {\n                const chart = this.chart, options = chart.options.rangeSelector, top = options.verticalAlign === 'top' ?\n                    chart.plotTop - chart.axisOffset[0] :\n                    0; // Set offset only for verticalAlign top\n                return {\n                    buttonTop: top + options.buttonPosition.y,\n                    inputTop: top + options.inputPosition.y - 10\n                };\n            }\n            /**\n             * Get the extremes of YTD. Will choose dataMax if its value is lower than\n             * the current timestamp. Will choose dataMin if its value is higher than\n             * the timestamp for the start of current year.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getYTDExtremes\n             * @return {*}\n             * Returns min and max for the YTD\n             */\n            getYTDExtremes(dataMax, dataMin, useUTC) {\n                const time = this.chart.time, now = new time.Date(dataMax), year = time.get('FullYear', now), startOfYear = useUTC ?\n                    time.Date.UTC(year, 0, 1) : // eslint-disable-line new-cap\n                    +new time.Date(year, 0, 1), min = Math.max(dataMin, startOfYear), ts = now.getTime();\n                return {\n                    max: Math.min(dataMax || ts, ts),\n                    min\n                };\n            }\n            createElements() {\n                const chart = this.chart, renderer = chart.renderer, container = chart.container, chartOptions = chart.options, options = chartOptions.rangeSelector, inputEnabled = options.inputEnabled, inputsZIndex = pick(chartOptions.chart.style?.zIndex, 0) + 1;\n                if (options.enabled === false) {\n                    return;\n                }\n                this.group = renderer.g('range-selector-group')\n                    .attr({\n                    zIndex: 7\n                })\n                    .add();\n                this.div = createElement('div', void 0, {\n                    position: 'relative',\n                    height: 0,\n                    zIndex: inputsZIndex\n                });\n                if (this.buttonOptions.length) {\n                    this.renderButtons();\n                }\n                // First create a wrapper outside the container in order to make\n                // the inputs work and make export correct\n                if (container.parentNode) {\n                    container.parentNode.insertBefore(this.div, container);\n                }\n                if (inputEnabled) {\n                    // Create the group to keep the inputs\n                    this.inputGroup = renderer.g('input-group').add(this.group);\n                    const minElems = this.drawInput('min');\n                    this.minDateBox = minElems.dateBox;\n                    this.minLabel = minElems.label;\n                    this.minInput = minElems.input;\n                    const maxElems = this.drawInput('max');\n                    this.maxDateBox = maxElems.dateBox;\n                    this.maxLabel = maxElems.label;\n                    this.maxInput = maxElems.input;\n                }\n            }\n            /**\n             * Render the range selector including the buttons and the inputs. The first\n             * time render is called, the elements are created and positioned. On\n             * subsequent calls, they are moved and updated.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#render\n             * @param {number} [min]\n             *        X axis minimum\n             * @param {number} [max]\n             *        X axis maximum\n             */\n            render(min, max) {\n                const chart = this.chart, chartOptions = chart.options, options = chartOptions.rangeSelector, \n                // Place inputs above the container\n                inputEnabled = options.inputEnabled;\n                if (options.enabled === false) {\n                    return;\n                }\n                if (inputEnabled) {\n                    // Set or reset the input values\n                    this.setInputValue('min', min);\n                    this.setInputValue('max', max);\n                    const unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chart.xAxis[0] || {};\n                    if (defined(unionExtremes.dataMin) &&\n                        defined(unionExtremes.dataMax)) {\n                        const minRange = chart.xAxis[0].minRange || 0;\n                        this.setInputExtremes('min', unionExtremes.dataMin, Math.min(unionExtremes.dataMax, this.getInputValue('max')) - minRange);\n                        this.setInputExtremes('max', Math.max(unionExtremes.dataMin, this.getInputValue('min')) + minRange, unionExtremes.dataMax);\n                    }\n                    // Reflow\n                    if (this.inputGroup) {\n                        let x = 0;\n                        [\n                            this.minLabel,\n                            this.minDateBox,\n                            this.maxLabel,\n                            this.maxDateBox\n                        ].forEach((label) => {\n                            if (label) {\n                                const { width } = label.getBBox();\n                                if (width) {\n                                    label.attr({ x });\n                                    x += width + options.inputSpacing;\n                                }\n                            }\n                        });\n                    }\n                }\n                this.alignElements();\n                this.updateButtonStates();\n            }\n            /**\n             * Render the range buttons. This only runs the first time, later the\n             * positioning is laid out in alignElements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#renderButtons\n             */\n            renderButtons() {\n                const { buttons, chart, options } = this;\n                const lang = defaultOptions.lang;\n                const renderer = chart.renderer;\n                const buttonTheme = merge(options.buttonTheme);\n                const states = buttonTheme && buttonTheme.states;\n                // Prevent the button from resetting the width when the button state\n                // changes since we need more control over the width when collapsing\n                // the buttons\n                const width = buttonTheme.width || 28;\n                delete buttonTheme.width;\n                delete buttonTheme.states;\n                this.buttonGroup = renderer.g('range-selector-buttons').add(this.group);\n                const dropdown = this.dropdown = createElement('select', void 0, {\n                    position: 'absolute',\n                    padding: 0,\n                    border: 0,\n                    cursor: 'pointer',\n                    opacity: 0.0001\n                }, this.div);\n                // Create a label for dropdown select element\n                const userButtonTheme = chart.userOptions.rangeSelector?.buttonTheme;\n                this.dropdownLabel = renderer.button('', 0, 0, () => { }, merge(buttonTheme, {\n                    'stroke-width': pick(buttonTheme['stroke-width'], 0),\n                    width: 'auto',\n                    paddingLeft: pick(options.buttonTheme.paddingLeft, userButtonTheme?.padding, 8),\n                    paddingRight: pick(options.buttonTheme.paddingRight, userButtonTheme?.padding, 8)\n                }), states && states.hover, states && states.select, states && states.disabled)\n                    .hide()\n                    .add(this.group);\n                // Prevent page zoom on iPhone\n                addEvent(dropdown, 'touchstart', () => {\n                    dropdown.style.fontSize = '16px';\n                });\n                // Forward events from select to button\n                const mouseOver = H.isMS ? 'mouseover' : 'mouseenter', mouseOut = H.isMS ? 'mouseout' : 'mouseleave';\n                addEvent(dropdown, mouseOver, () => {\n                    fireEvent(this.dropdownLabel.element, mouseOver);\n                });\n                addEvent(dropdown, mouseOut, () => {\n                    fireEvent(this.dropdownLabel.element, mouseOut);\n                });\n                addEvent(dropdown, 'change', () => {\n                    const button = this.buttons[dropdown.selectedIndex - 1];\n                    fireEvent(button.element, 'click');\n                });\n                this.zoomText = renderer\n                    .label(lang.rangeSelectorZoom || '', 0)\n                    .attr({\n                    padding: options.buttonTheme.padding,\n                    height: options.buttonTheme.height,\n                    paddingLeft: 0,\n                    paddingRight: 0\n                })\n                    .add(this.buttonGroup);\n                if (!this.chart.styledMode) {\n                    this.zoomText.css(options.labelStyle);\n                    buttonTheme['stroke-width'] = pick(buttonTheme['stroke-width'], 0);\n                }\n                createElement('option', {\n                    textContent: this.zoomText.textStr,\n                    disabled: true\n                }, void 0, dropdown);\n                this.buttonOptions.forEach((rangeOptions, i) => {\n                    createElement('option', {\n                        textContent: rangeOptions.title || rangeOptions.text\n                    }, void 0, dropdown);\n                    buttons[i] = renderer\n                        .button(rangeOptions.text, 0, 0, (e) => {\n                        // Extract events from button object and call\n                        const buttonEvents = (rangeOptions.events && rangeOptions.events.click);\n                        let callDefaultEvent;\n                        if (buttonEvents) {\n                            callDefaultEvent =\n                                buttonEvents.call(rangeOptions, e);\n                        }\n                        if (callDefaultEvent !== false) {\n                            this.clickButton(i);\n                        }\n                        this.isActive = true;\n                    }, buttonTheme, states && states.hover, states && states.select, states && states.disabled)\n                        .attr({\n                        'text-align': 'center',\n                        width\n                    })\n                        .add(this.buttonGroup);\n                    if (rangeOptions.title) {\n                        buttons[i].attr('title', rangeOptions.title);\n                    }\n                });\n            }\n            /**\n             * Align the elements horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignElements\n             */\n            alignElements() {\n                const { buttonGroup, buttons, chart, group, inputGroup, options, zoomText } = this;\n                const chartOptions = chart.options;\n                const navButtonOptions = (chartOptions.exporting &&\n                    chartOptions.exporting.enabled !== false &&\n                    chartOptions.navigation &&\n                    chartOptions.navigation.buttonOptions);\n                const { buttonPosition, inputPosition, verticalAlign } = options;\n                // Get the X offset required to avoid overlapping with the exporting\n                // button. This is used both by the buttonGroup and the inputGroup.\n                const getXOffsetForExportButton = (group, position) => {\n                    if (navButtonOptions &&\n                        this.titleCollision(chart) &&\n                        verticalAlign === 'top' &&\n                        position.align === 'right' && ((position.y -\n                        group.getBBox().height - 12) <\n                        ((navButtonOptions.y || 0) +\n                            (navButtonOptions.height || 0) +\n                            chart.spacing[0]))) {\n                        return -40;\n                    }\n                    return 0;\n                };\n                let plotLeft = chart.plotLeft;\n                if (group && buttonPosition && inputPosition) {\n                    let translateX = buttonPosition.x - chart.spacing[3];\n                    if (buttonGroup) {\n                        this.positionButtons();\n                        if (!this.initialButtonGroupWidth) {\n                            let width = 0;\n                            if (zoomText) {\n                                width += zoomText.getBBox().width + 5;\n                            }\n                            buttons.forEach((button, i) => {\n                                width += button.width || 0;\n                                if (i !== buttons.length - 1) {\n                                    width += options.buttonSpacing;\n                                }\n                            });\n                            this.initialButtonGroupWidth = width;\n                        }\n                        plotLeft -= chart.spacing[3];\n                        // Detect collision between button group and exporting\n                        const xOffsetForExportButton = getXOffsetForExportButton(buttonGroup, buttonPosition);\n                        this.alignButtonGroup(xOffsetForExportButton);\n                        if (this.buttonGroup?.translateY) {\n                            this.dropdownLabel\n                                .attr({ y: this.buttonGroup.translateY });\n                        }\n                        // Skip animation\n                        group.placed = buttonGroup.placed = chart.hasLoaded;\n                    }\n                    let xOffsetForExportButton = 0;\n                    if (inputGroup) {\n                        // Detect collision between the input group and exporting button\n                        xOffsetForExportButton = getXOffsetForExportButton(inputGroup, inputPosition);\n                        if (inputPosition.align === 'left') {\n                            translateX = plotLeft;\n                        }\n                        else if (inputPosition.align === 'right') {\n                            translateX = -Math.max(chart.axisOffset[1], -xOffsetForExportButton);\n                        }\n                        // Update the alignment to the updated spacing box\n                        inputGroup.align({\n                            y: inputPosition.y,\n                            width: inputGroup.getBBox().width,\n                            align: inputPosition.align,\n                            // Fix wrong getBBox() value on right align\n                            x: inputPosition.x + translateX - 2\n                        }, true, chart.spacingBox);\n                        // Skip animation\n                        inputGroup.placed = chart.hasLoaded;\n                    }\n                    this.handleCollision(xOffsetForExportButton);\n                    // Vertical align\n                    group.align({\n                        verticalAlign\n                    }, true, chart.spacingBox);\n                    const alignTranslateY = group.alignAttr.translateY;\n                    // Set position\n                    let groupHeight = group.getBBox().height + 20; // # 20 padding\n                    let translateY = 0;\n                    // Calculate bottom position\n                    if (verticalAlign === 'bottom') {\n                        const legendOptions = chart.legend && chart.legend.options;\n                        const legendHeight = (legendOptions &&\n                            legendOptions.verticalAlign === 'bottom' &&\n                            legendOptions.enabled &&\n                            !legendOptions.floating ?\n                            (chart.legend.legendHeight +\n                                pick(legendOptions.margin, 10)) :\n                            0);\n                        groupHeight = groupHeight + legendHeight - 20;\n                        translateY = (alignTranslateY -\n                            groupHeight -\n                            (options.floating ? 0 : options.y) -\n                            (chart.titleOffset ? chart.titleOffset[2] : 0) -\n                            10 // 10 spacing\n                        );\n                    }\n                    if (verticalAlign === 'top') {\n                        if (options.floating) {\n                            translateY = 0;\n                        }\n                        if (chart.titleOffset && chart.titleOffset[0]) {\n                            translateY = chart.titleOffset[0];\n                        }\n                        translateY += ((chart.margin[0] - chart.spacing[0]) || 0);\n                    }\n                    else if (verticalAlign === 'middle') {\n                        if (inputPosition.y === buttonPosition.y) {\n                            translateY = alignTranslateY;\n                        }\n                        else if (inputPosition.y || buttonPosition.y) {\n                            if (inputPosition.y < 0 ||\n                                buttonPosition.y < 0) {\n                                translateY -= Math.min(inputPosition.y, buttonPosition.y);\n                            }\n                            else {\n                                translateY = alignTranslateY - groupHeight;\n                            }\n                        }\n                    }\n                    group.translate(options.x, options.y + Math.floor(translateY));\n                    // Translate HTML inputs\n                    const { minInput, maxInput, dropdown } = this;\n                    if (options.inputEnabled && minInput && maxInput) {\n                        minInput.style.marginTop = group.translateY + 'px';\n                        maxInput.style.marginTop = group.translateY + 'px';\n                    }\n                    if (dropdown) {\n                        dropdown.style.marginTop = group.translateY + 'px';\n                    }\n                }\n            }\n            /**\n             * Align the button group horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignButtonGroup\n             * @param {number} xOffsetForExportButton\n             * @param {number} [width]\n             */\n            alignButtonGroup(xOffsetForExportButton, width) {\n                const { chart, options, buttonGroup } = this;\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft - chart.spacing[3];\n                let translateX = buttonPosition.x - chart.spacing[3];\n                if (buttonPosition.align === 'right') {\n                    translateX += xOffsetForExportButton - plotLeft; // #13014\n                }\n                else if (buttonPosition.align === 'center') {\n                    translateX -= plotLeft / 2;\n                }\n                if (buttonGroup) {\n                    // Align button group\n                    buttonGroup.align({\n                        y: buttonPosition.y,\n                        width: pick(width, this.initialButtonGroupWidth),\n                        align: buttonPosition.align,\n                        x: translateX\n                    }, true, chart.spacingBox);\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#positionButtons\n             */\n            positionButtons() {\n                const { buttons, chart, options, zoomText } = this;\n                const verb = chart.hasLoaded ? 'animate' : 'attr';\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft;\n                let buttonLeft = plotLeft;\n                if (zoomText && zoomText.visibility !== 'hidden') {\n                    // #8769, allow dynamically updating margins\n                    zoomText[verb]({\n                        x: pick(plotLeft + buttonPosition.x, plotLeft)\n                    });\n                    // Button start position\n                    buttonLeft += buttonPosition.x +\n                        zoomText.getBBox().width + 5;\n                }\n                for (let i = 0, iEnd = this.buttonOptions.length; i < iEnd; ++i) {\n                    if (buttons[i].visibility !== 'hidden') {\n                        buttons[i][verb]({ x: buttonLeft });\n                        // Increase the button position for the next button\n                        buttonLeft += (buttons[i].width || 0) + options.buttonSpacing;\n                    }\n                    else {\n                        buttons[i][verb]({ x: plotLeft });\n                    }\n                }\n            }\n            /**\n             * Handle collision between the button group and the input group\n             *\n             * @private\n             * @function Highcharts.RangeSelector#handleCollision\n             *\n             * @param  {number} xOffsetForExportButton\n             *                  The X offset of the group required to make room for the\n             *                  exporting button\n             */\n            handleCollision(xOffsetForExportButton) {\n                const { chart, buttonGroup, inputGroup } = this;\n                const { buttonPosition, dropdown, inputPosition } = this.options;\n                const maxButtonWidth = () => {\n                    let buttonWidth = 0;\n                    this.buttons.forEach((button) => {\n                        const bBox = button.getBBox();\n                        if (bBox.width > buttonWidth) {\n                            buttonWidth = bBox.width;\n                        }\n                    });\n                    return buttonWidth;\n                };\n                const groupsOverlap = (buttonGroupWidth) => {\n                    if (inputGroup?.alignOptions && buttonGroup) {\n                        const inputGroupX = (inputGroup.alignAttr.translateX +\n                            inputGroup.alignOptions.x -\n                            xOffsetForExportButton +\n                            // `getBBox` for detecing left margin\n                            inputGroup.getBBox().x +\n                            // 2px padding to not overlap input and label\n                            2);\n                        const inputGroupWidth = inputGroup.alignOptions.width || 0;\n                        const buttonGroupX = buttonGroup.alignAttr.translateX +\n                            buttonGroup.getBBox().x;\n                        return (buttonGroupX + buttonGroupWidth > inputGroupX) &&\n                            (inputGroupX + inputGroupWidth > buttonGroupX) &&\n                            (buttonPosition.y <\n                                (inputPosition.y +\n                                    inputGroup.getBBox().height));\n                    }\n                    return false;\n                };\n                const moveInputsDown = () => {\n                    if (inputGroup && buttonGroup) {\n                        inputGroup.attr({\n                            translateX: inputGroup.alignAttr.translateX + (chart.axisOffset[1] >= -xOffsetForExportButton ?\n                                0 :\n                                -xOffsetForExportButton),\n                            translateY: inputGroup.alignAttr.translateY +\n                                buttonGroup.getBBox().height + 10\n                        });\n                    }\n                };\n                if (buttonGroup) {\n                    if (dropdown === 'always') {\n                        this.collapseButtons();\n                        if (groupsOverlap(maxButtonWidth())) {\n                            // Move the inputs down if there is still a collision\n                            // after collapsing the buttons\n                            moveInputsDown();\n                        }\n                        return;\n                    }\n                    if (dropdown === 'never') {\n                        this.expandButtons();\n                    }\n                }\n                // Detect collision\n                if (inputGroup && buttonGroup) {\n                    if ((inputPosition.align === buttonPosition.align) ||\n                        // 20 is minimal spacing between elements\n                        groupsOverlap(this.initialButtonGroupWidth + 20)) {\n                        if (dropdown === 'responsive') {\n                            this.collapseButtons();\n                            if (groupsOverlap(maxButtonWidth())) {\n                                moveInputsDown();\n                            }\n                        }\n                        else {\n                            moveInputsDown();\n                        }\n                    }\n                    else if (dropdown === 'responsive') {\n                        this.expandButtons();\n                    }\n                }\n                else if (buttonGroup && dropdown === 'responsive') {\n                    if (this.initialButtonGroupWidth > chart.plotWidth) {\n                        this.collapseButtons();\n                    }\n                    else {\n                        this.expandButtons();\n                    }\n                }\n            }\n            /**\n             * Collapse the buttons and show the select element.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#collapseButtons\n             * @param {number} xOffsetForExportButton\n             */\n            collapseButtons() {\n                const { buttons, zoomText } = this;\n                if (this.isCollapsed === true) {\n                    return;\n                }\n                this.isCollapsed = true;\n                zoomText.hide();\n                buttons.forEach((button) => void button.hide());\n                this.showDropdown();\n            }\n            /**\n             * Show all the buttons and hide the select element.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#expandButtons\n             */\n            expandButtons() {\n                const { buttons, zoomText } = this;\n                if (this.isCollapsed === false) {\n                    return;\n                }\n                this.isCollapsed = false;\n                this.hideDropdown();\n                zoomText.show();\n                buttons.forEach((button) => void button.show());\n                this.positionButtons();\n            }\n            /**\n             * Position the select element on top of the button.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#showDropdown\n             */\n            showDropdown() {\n                const { buttonGroup, chart, dropdownLabel, dropdown } = this;\n                if (buttonGroup && dropdown) {\n                    const { translateX = 0, translateY = 0 } = buttonGroup, left = chart.plotLeft + translateX, top = translateY;\n                    dropdownLabel\n                        .attr({ x: left, y: top })\n                        .show();\n                    css(dropdown, {\n                        left: left + 'px',\n                        top: top + 'px',\n                        visibility: 'inherit'\n                    });\n                    this.hasVisibleDropdown = true;\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideDropdown\n             */\n            hideDropdown() {\n                const { dropdown } = this;\n                if (dropdown) {\n                    this.dropdownLabel.hide();\n                    css(dropdown, {\n                        visibility: 'hidden',\n                        width: '1px',\n                        height: '1px'\n                    });\n                    this.hasVisibleDropdown = false;\n                }\n            }\n            /**\n             * Extracts height of range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getHeight\n             * @return {number}\n             * Returns rangeSelector height\n             */\n            getHeight() {\n                const rangeSelector = this, options = rangeSelector.options, rangeSelectorGroup = rangeSelector.group, inputPosition = options.inputPosition, buttonPosition = options.buttonPosition, yPosition = options.y, buttonPositionY = buttonPosition.y, inputPositionY = inputPosition.y;\n                let rangeSelectorHeight = 0;\n                if (options.height) {\n                    return options.height;\n                }\n                // Align the elements before we read the height in case we're switching\n                // between wrapped and non-wrapped layout\n                this.alignElements();\n                rangeSelectorHeight = rangeSelectorGroup ?\n                    // 13px to keep back compatibility\n                    (rangeSelectorGroup.getBBox(true).height) + 13 +\n                        yPosition :\n                    0;\n                const minPosition = Math.min(inputPositionY, buttonPositionY);\n                if ((inputPositionY < 0 && buttonPositionY < 0) ||\n                    (inputPositionY > 0 && buttonPositionY > 0)) {\n                    rangeSelectorHeight += Math.abs(minPosition);\n                }\n                return rangeSelectorHeight;\n            }\n            /**\n             * Detect collision with title or subtitle\n             *\n             * @private\n             * @function Highcharts.RangeSelector#titleCollision\n             * @return {boolean}\n             * Returns collision status\n             */\n            titleCollision(chart) {\n                return !(chart.options.title.text ||\n                    chart.options.subtitle.text);\n            }\n            /**\n             * Update the range selector with new options\n             *\n             * @private\n             * @function Highcharts.RangeSelector#update\n             * @param {Highcharts.RangeSelectorOptions} options\n             */\n            update(options, redraw = true) {\n                const chart = this.chart;\n                merge(true, chart.options.rangeSelector, options);\n                this.destroy();\n                this.init(chart);\n                if (redraw) {\n                    this.render();\n                }\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#destroy\n             */\n            destroy() {\n                const rSelector = this, minInput = rSelector.minInput, maxInput = rSelector.maxInput;\n                if (rSelector.eventsToUnbind) {\n                    rSelector.eventsToUnbind.forEach((unbind) => unbind());\n                    rSelector.eventsToUnbind = void 0;\n                }\n                // Destroy elements in collections\n                destroyObjectProperties(rSelector.buttons);\n                // Clear input element events\n                if (minInput) {\n                    minInput.onfocus = minInput.onblur = minInput.onchange = null;\n                }\n                if (maxInput) {\n                    maxInput.onfocus = maxInput.onblur = maxInput.onchange = null;\n                }\n                // Destroy HTML and SVG elements\n                objectEach(rSelector, function (val, key) {\n                    if (val && key !== 'chart') {\n                        if (val instanceof SVGElement) {\n                            // SVGElement\n                            val.destroy();\n                        }\n                        else if (val instanceof window.HTMLElement) {\n                            // HTML element\n                            discardElement(val);\n                        }\n                    }\n                    if (val !== RangeSelector.prototype[key]) {\n                        rSelector[key] = null;\n                    }\n                }, this);\n            }\n        }\n        extend(RangeSelector.prototype, {\n            /**\n             * The default buttons for pre-selecting time frames.\n             * @private\n             */\n            defaultButtons: [{\n                    type: 'month',\n                    count: 1,\n                    text: '1m',\n                    title: 'View 1 month'\n                }, {\n                    type: 'month',\n                    count: 3,\n                    text: '3m',\n                    title: 'View 3 months'\n                }, {\n                    type: 'month',\n                    count: 6,\n                    text: '6m',\n                    title: 'View 6 months'\n                }, {\n                    type: 'ytd',\n                    text: 'YTD',\n                    title: 'View year to date'\n                }, {\n                    type: 'year',\n                    count: 1,\n                    text: '1y',\n                    title: 'View 1 year'\n                }, {\n                    type: 'all',\n                    text: 'All',\n                    title: 'View all'\n                }],\n            /**\n             * The date formats to use when setting min, max and value on date inputs.\n             * @private\n             */\n            inputTypeFormats: {\n                'datetime-local': '%Y-%m-%dT%H:%M:%S',\n                'date': '%Y-%m-%d',\n                'time': '%H:%M:%S'\n            }\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Define the time span for the button\n         *\n         * @typedef {\"all\"|\"day\"|\"hour\"|\"millisecond\"|\"minute\"|\"month\"|\"second\"|\"week\"|\"year\"|\"ytd\"} Highcharts.RangeSelectorButtonTypeValue\n         */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.RangeSelectorClickCallbackFunction\n         *\n         * @param {global.Event} e\n         *        Event arguments.\n         *\n         * @param {boolean|undefined}\n         *        Return false to cancel the default button event.\n         */\n        /**\n         * Callback function to parse values entered in the input boxes and return a\n         * valid JavaScript time as milliseconds since 1970.\n         *\n         * @callback Highcharts.RangeSelectorParseCallbackFunction\n         *\n         * @param {string} value\n         *        Input value to parse.\n         *\n         * @return {number}\n         *         Parsed JavaScript time value.\n         */\n        (''); // Keeps doclets above in JS file\n\n        return RangeSelector;\n    });\n    _registerModule(_modules, 'Series/PathUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const getLinkPath = {\n            'default': getDefaultPath,\n            straight: getStraightPath,\n            curved: getCurvedPath\n        };\n        /**\n         *\n         */\n        function getDefaultPath(pathParams) {\n            const { x1, y1, x2, y2, width = 0, inverted = false, radius, parentVisible } = pathParams;\n            const path = [\n                ['M', x1, y1],\n                ['L', x1, y1],\n                ['C', x1, y1, x1, y2, x1, y2],\n                ['L', x1, y2],\n                ['C', x1, y1, x1, y2, x1, y2],\n                ['L', x1, y2]\n            ];\n            return parentVisible ?\n                applyRadius([\n                    ['M', x1, y1],\n                    ['L', x1 + width * (inverted ? -0.5 : 0.5), y1],\n                    ['L', x1 + width * (inverted ? -0.5 : 0.5), y2],\n                    ['L', x2, y2]\n                ], radius) :\n                path;\n        }\n        /**\n         *\n         */\n        function getStraightPath(pathParams) {\n            const { x1, y1, x2, y2, width = 0, inverted = false, parentVisible } = pathParams;\n            return parentVisible ? [\n                ['M', x1, y1],\n                ['L', x1 + width * (inverted ? -1 : 1), y2],\n                ['L', x2, y2]\n            ] : [\n                ['M', x1, y1],\n                ['L', x1, y2],\n                ['L', x1, y2]\n            ];\n        }\n        /**\n         *\n         */\n        function getCurvedPath(pathParams) {\n            const { x1, y1, x2, y2, offset = 0, width = 0, inverted = false, parentVisible } = pathParams;\n            return parentVisible ?\n                [\n                    ['M', x1, y1],\n                    [\n                        'C',\n                        x1 + offset,\n                        y1,\n                        x1 - offset + width * (inverted ? -1 : 1),\n                        y2,\n                        x1 + width * (inverted ? -1 : 1),\n                        y2\n                    ],\n                    ['L', x2, y2]\n                ] :\n                [\n                    ['M', x1, y1],\n                    ['C', x1, y1, x1, y2, x1, y2],\n                    ['L', x2, y2]\n                ];\n        }\n        /**\n         * General function to apply corner radius to a path\n         * @private\n         */\n        function applyRadius(path, r) {\n            const d = [];\n            for (let i = 0; i < path.length; i++) {\n                const x = path[i][1];\n                const y = path[i][2];\n                if (typeof x === 'number' && typeof y === 'number') {\n                    // MoveTo\n                    if (i === 0) {\n                        d.push(['M', x, y]);\n                    }\n                    else if (i === path.length - 1) {\n                        d.push(['L', x, y]);\n                        // CurveTo\n                    }\n                    else if (r) {\n                        const prevSeg = path[i - 1];\n                        const nextSeg = path[i + 1];\n                        if (prevSeg && nextSeg) {\n                            const x1 = prevSeg[1], y1 = prevSeg[2], x2 = nextSeg[1], y2 = nextSeg[2];\n                            // Only apply to breaks\n                            if (typeof x1 === 'number' &&\n                                typeof x2 === 'number' &&\n                                typeof y1 === 'number' &&\n                                typeof y2 === 'number' &&\n                                x1 !== x2 &&\n                                y1 !== y2) {\n                                const directionX = x1 < x2 ? 1 : -1, directionY = y1 < y2 ? 1 : -1;\n                                d.push([\n                                    'L',\n                                    x - directionX * Math.min(Math.abs(x - x1), r),\n                                    y - directionY * Math.min(Math.abs(y - y1), r)\n                                ], [\n                                    'C',\n                                    x,\n                                    y,\n                                    x,\n                                    y,\n                                    x + directionX * Math.min(Math.abs(x - x2), r),\n                                    y + directionY * Math.min(Math.abs(y - y2), r)\n                                ]);\n                            }\n                        }\n                        // LineTo\n                    }\n                    else {\n                        d.push(['L', x, y]);\n                    }\n                }\n            }\n            return d;\n        }\n        const PathUtilities = {\n            applyRadius,\n            getLinkPath\n        };\n\n        return PathUtilities;\n    });\n    _registerModule(_modules, 'Gantt/PathfinderAlgorithms.js', [_modules['Series/PathUtilities.js'], _modules['Core/Utilities.js']], function (PathUtilities, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Author: Ã˜ystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const { min, max, abs } = Math;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get index of last obstacle before xMin. Employs a type of binary search, and\n         * thus requires that obstacles are sorted by xMin value.\n         *\n         * @private\n         * @function findLastObstacleBefore\n         *\n         * @param {Array<object>} obstacles\n         *        Array of obstacles to search in.\n         *\n         * @param {number} xMin\n         *        The xMin threshold.\n         *\n         * @param {number} [startIx]\n         *        Starting index to search from. Must be within array range.\n         *\n         * @return {number}\n         *         The index of the last obstacle element before xMin.\n         */\n        function findLastObstacleBefore(obstacles, xMin, startIx) {\n            const min = xMin - 0.0000001; // Make sure we include all obstacles at xMin\n            let left = startIx || 0, // Left limit\n            right = obstacles.length - 1, // Right limit\n            cursor, cmp;\n            while (left <= right) {\n                cursor = (right + left) >> 1;\n                cmp = min - obstacles[cursor].xMin;\n                if (cmp > 0) {\n                    left = cursor + 1;\n                }\n                else if (cmp < 0) {\n                    right = cursor - 1;\n                }\n                else {\n                    return cursor;\n                }\n            }\n            return left > 0 ? left - 1 : 0;\n        }\n        /**\n         * Test if a point lays within an obstacle.\n         *\n         * @private\n         * @function pointWithinObstacle\n         *\n         * @param {Object} obstacle\n         *        Obstacle to test.\n         *\n         * @param {Highcharts.Point} point\n         *        Point with x/y props.\n         *\n         * @return {boolean}\n         *         Whether point is within the obstacle or not.\n         */\n        function pointWithinObstacle(obstacle, point) {\n            return (point.x <= obstacle.xMax &&\n                point.x >= obstacle.xMin &&\n                point.y <= obstacle.yMax &&\n                point.y >= obstacle.yMin);\n        }\n        /**\n         * Find the index of an obstacle that wraps around a point.\n         * Returns -1 if not found.\n         *\n         * @private\n         * @function findObstacleFromPoint\n         *\n         * @param {Array<object>} obstacles\n         *        Obstacles to test.\n         *\n         * @param {Highcharts.Point} point\n         *        Point with x/y props.\n         *\n         * @return {number}\n         *         Ix of the obstacle in the array, or -1 if not found.\n         */\n        function findObstacleFromPoint(obstacles, point) {\n            let i = findLastObstacleBefore(obstacles, point.x + 1) + 1;\n            while (i--) {\n                if (obstacles[i].xMax >= point.x &&\n                    // Optimization using lazy evaluation\n                    pointWithinObstacle(obstacles[i], point)) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        /**\n         * Get SVG path array from array of line segments.\n         *\n         * @private\n         * @function pathFromSegments\n         *\n         * @param {Array<object>} segments\n         *        The segments to build the path from.\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         SVG path array as accepted by the SVG Renderer.\n         */\n        function pathFromSegments(segments) {\n            const path = [];\n            if (segments.length) {\n                path.push(['M', segments[0].start.x, segments[0].start.y]);\n                for (let i = 0; i < segments.length; ++i) {\n                    path.push(['L', segments[i].end.x, segments[i].end.y]);\n                }\n            }\n            return path;\n        }\n        /**\n         * Limits obstacle max/mins in all directions to bounds. Modifies input\n         * obstacle.\n         *\n         * @private\n         * @function limitObstacleToBounds\n         *\n         * @param {Object} obstacle\n         *        Obstacle to limit.\n         *\n         * @param {Object} bounds\n         *        Bounds to use as limit.\n         *\n         * @return {void}\n         */\n        function limitObstacleToBounds(obstacle, bounds) {\n            obstacle.yMin = max(obstacle.yMin, bounds.yMin);\n            obstacle.yMax = min(obstacle.yMax, bounds.yMax);\n            obstacle.xMin = max(obstacle.xMin, bounds.xMin);\n            obstacle.xMax = min(obstacle.xMax, bounds.xMax);\n        }\n        /**\n         * Get an SVG path from a starting coordinate to an ending coordinate.\n         * Draws a straight line.\n         *\n         * @function Highcharts.Pathfinder.algorithms.straight\n         *\n         * @param {Highcharts.PositionObject} start\n         *        Starting coordinate, object with x/y props.\n         *\n         * @param {Highcharts.PositionObject} end\n         *        Ending coordinate, object with x/y props.\n         *\n         * @return {Object}\n         *         An object with the SVG path in Array form as accepted by the SVG\n         *         renderer, as well as an array of new obstacles making up this\n         *         path.\n         */\n        function straight(start, end) {\n            return {\n                path: [\n                    ['M', start.x, start.y],\n                    ['L', end.x, end.y]\n                ],\n                obstacles: [{ start: start, end: end }]\n            };\n        }\n        /**\n         * Find a path from a starting coordinate to an ending coordinate, using\n         * right angles only, and taking only starting/ending obstacle into\n         * consideration.\n         *\n         * @function Highcharts.Pathfinder.algorithms.simpleConnect\n         *\n         * @param {Highcharts.PositionObject} start\n         *        Starting coordinate, object with x/y props.\n         *\n         * @param {Highcharts.PositionObject} end\n         *        Ending coordinate, object with x/y props.\n         *\n         * @param {Object} options\n         *        Options for the algorithm:\n         *        - chartObstacles: Array of chart obstacles to avoid\n         *        - startDirectionX: Optional. True if starting in the X direction.\n         *          If not provided, the algorithm starts in the direction that is\n         *          the furthest between start/end.\n         *\n         * @return {Object}\n         *         An object with the SVG path in Array form as accepted by the SVG\n         *         renderer, as well as an array of new obstacles making up this\n         *         path.\n         */\n        const simpleConnect = function (start, end, options) {\n            const segments = [], chartObstacles = options.chartObstacles, startObstacleIx = findObstacleFromPoint(chartObstacles, start), endObstacleIx = findObstacleFromPoint(chartObstacles, end);\n            let endSegment, dir = pick(options.startDirectionX, abs(end.x - start.x) > abs(end.y - start.y)) ? 'x' : 'y', startObstacle, endObstacle, waypoint, useMax, endPoint;\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Return a clone of a point with a property set from a target object,\n             * optionally with an offset\n             * @private\n             */\n            function copyFromPoint(from, fromKey, to, toKey, offset) {\n                const point = {\n                    x: from.x,\n                    y: from.y\n                };\n                point[fromKey] = to[toKey || fromKey] + (offset || 0);\n                return point;\n            }\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Return waypoint outside obstacle.\n             * @private\n             */\n            function getMeOut(obstacle, point, direction) {\n                const useMax = abs(point[direction] - obstacle[direction + 'Min']) >\n                    abs(point[direction] - obstacle[direction + 'Max']);\n                return copyFromPoint(point, direction, obstacle, direction + (useMax ? 'Max' : 'Min'), useMax ? 1 : -1);\n            }\n            // Pull out end point\n            if (endObstacleIx > -1) {\n                endObstacle = chartObstacles[endObstacleIx];\n                waypoint = getMeOut(endObstacle, end, dir);\n                endSegment = {\n                    start: waypoint,\n                    end: end\n                };\n                endPoint = waypoint;\n            }\n            else {\n                endPoint = end;\n            }\n            // If an obstacle envelops the start point, add a segment to get out,\n            // and around it.\n            if (startObstacleIx > -1) {\n                startObstacle = chartObstacles[startObstacleIx];\n                waypoint = getMeOut(startObstacle, start, dir);\n                segments.push({\n                    start: start,\n                    end: waypoint\n                });\n                // If we are going back again, switch direction to get around start\n                // obstacle.\n                if (\n                // Going towards max from start:\n                waypoint[dir] >= start[dir] ===\n                    // Going towards min to end:\n                    waypoint[dir] >= endPoint[dir]) {\n                    dir = dir === 'y' ? 'x' : 'y';\n                    useMax = start[dir] < end[dir];\n                    segments.push({\n                        start: waypoint,\n                        end: copyFromPoint(waypoint, dir, startObstacle, dir + (useMax ? 'Max' : 'Min'), useMax ? 1 : -1)\n                    });\n                    // Switch direction again\n                    dir = dir === 'y' ? 'x' : 'y';\n                }\n            }\n            // We are around the start obstacle. Go towards the end in one\n            // direction.\n            const prevWaypoint = segments.length ?\n                segments[segments.length - 1].end :\n                start;\n            waypoint = copyFromPoint(prevWaypoint, dir, endPoint);\n            segments.push({\n                start: prevWaypoint,\n                end: waypoint\n            });\n            // Final run to end point in the other direction\n            dir = dir === 'y' ? 'x' : 'y';\n            const waypoint2 = copyFromPoint(waypoint, dir, endPoint);\n            segments.push({\n                start: waypoint,\n                end: waypoint2\n            });\n            // Finally add the endSegment\n            segments.push(endSegment);\n            const path = PathUtilities.applyRadius(pathFromSegments(segments), options.radius);\n            return {\n                path,\n                obstacles: segments\n            };\n        };\n        simpleConnect.requiresObstacles = true;\n        /**\n         * Find a path from a starting coordinate to an ending coordinate, taking\n         * obstacles into consideration. Might not always find the optimal path,\n         * but is fast, and usually good enough.\n         *\n         * @function Highcharts.Pathfinder.algorithms.fastAvoid\n         *\n         * @param {Highcharts.PositionObject} start\n         *        Starting coordinate, object with x/y props.\n         *\n         * @param {Highcharts.PositionObject} end\n         *        Ending coordinate, object with x/y props.\n         *\n         * @param {Object} options\n         *        Options for the algorithm.\n         *        - chartObstacles:  Array of chart obstacles to avoid\n         *        - lineObstacles:   Array of line obstacles to jump over\n         *        - obstacleMetrics: Object with metrics of chartObstacles cached\n         *        - hardBounds:      Hard boundaries to not cross\n         *        - obstacleOptions: Options for the obstacles, including margin\n         *        - startDirectionX: Optional. True if starting in the X direction.\n         *                           If not provided, the algorithm starts in the\n         *                           direction that is the furthest between\n         *                           start/end.\n         *\n         * @return {Object}\n         *         An object with the SVG path in Array form as accepted by the SVG\n         *         renderer, as well as an array of new obstacles making up this\n         *         path.\n         */\n        function fastAvoid(start, end, options) {\n            /*\n                Algorithm rules/description\n                - Find initial direction\n                - Determine soft/hard max for each direction.\n                - Move along initial direction until obstacle.\n                - Change direction.\n                - If hitting obstacle, first try to change length of previous line\n                    before changing direction again.\n\n                Soft min/max x = start/destination x +/- widest obstacle + margin\n                Soft min/max y = start/destination y +/- tallest obstacle + margin\n\n                @todo:\n                    - Make retrospective, try changing prev segment to reduce\n                        corners\n                    - Fix logic for breaking out of end-points - not always picking\n                        the best direction currently\n                    - When going around the end obstacle we should not always go the\n                        shortest route, rather pick the one closer to the end point\n            */\n            const dirIsX = pick(options.startDirectionX, abs(end.x - start.x) > abs(end.y - start.y)), dir = dirIsX ? 'x' : 'y', endSegments = [], \n            // Boundaries to stay within. If beyond soft boundary, prefer to\n            // change direction ASAP. If at hard max, always change immediately.\n            metrics = options.obstacleMetrics, softMinX = min(start.x, end.x) - metrics.maxWidth - 10, softMaxX = max(start.x, end.x) + metrics.maxWidth + 10, softMinY = min(start.y, end.y) - metrics.maxHeight - 10, softMaxY = max(start.y, end.y) + metrics.maxHeight + 10;\n            let segments, useMax, extractedEndPoint, forceObstacleBreak = false, // Used in clearPathTo to keep track of\n            // when to force break through an obstacle.\n            // Obstacles\n            chartObstacles = options.chartObstacles, endObstacleIx = findLastObstacleBefore(chartObstacles, softMaxX);\n            const startObstacleIx = findLastObstacleBefore(chartObstacles, softMinX);\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * How far can you go between two points before hitting an obstacle?\n             * Does not work for diagonal lines (because it doesn't have to).\n             * @private\n             */\n            function pivotPoint(fromPoint, toPoint, directionIsX) {\n                const searchDirection = fromPoint.x < toPoint.x ? 1 : -1;\n                let firstPoint, lastPoint, highestPoint, lowestPoint;\n                if (fromPoint.x < toPoint.x) {\n                    firstPoint = fromPoint;\n                    lastPoint = toPoint;\n                }\n                else {\n                    firstPoint = toPoint;\n                    lastPoint = fromPoint;\n                }\n                if (fromPoint.y < toPoint.y) {\n                    lowestPoint = fromPoint;\n                    highestPoint = toPoint;\n                }\n                else {\n                    lowestPoint = toPoint;\n                    highestPoint = fromPoint;\n                }\n                // Go through obstacle range in reverse if toPoint is before\n                // fromPoint in the X-dimension.\n                let i = searchDirection < 0 ?\n                    // Searching backwards, start at last obstacle before last point\n                    min(findLastObstacleBefore(chartObstacles, lastPoint.x), chartObstacles.length - 1) :\n                    // Forwards. Since we're not sorted by xMax, we have to look\n                    // at all obstacles.\n                    0;\n                // Go through obstacles in this X range\n                while (chartObstacles[i] && (searchDirection > 0 && chartObstacles[i].xMin <= lastPoint.x ||\n                    searchDirection < 0 && chartObstacles[i].xMax >= firstPoint.x)) {\n                    // If this obstacle is between from and to points in a straight\n                    // line, pivot at the intersection.\n                    if (chartObstacles[i].xMin <= lastPoint.x &&\n                        chartObstacles[i].xMax >= firstPoint.x &&\n                        chartObstacles[i].yMin <= highestPoint.y &&\n                        chartObstacles[i].yMax >= lowestPoint.y) {\n                        if (directionIsX) {\n                            return {\n                                y: fromPoint.y,\n                                x: fromPoint.x < toPoint.x ?\n                                    chartObstacles[i].xMin - 1 :\n                                    chartObstacles[i].xMax + 1,\n                                obstacle: chartObstacles[i]\n                            };\n                        }\n                        // Else ...\n                        return {\n                            x: fromPoint.x,\n                            y: fromPoint.y < toPoint.y ?\n                                chartObstacles[i].yMin - 1 :\n                                chartObstacles[i].yMax + 1,\n                            obstacle: chartObstacles[i]\n                        };\n                    }\n                    i += searchDirection;\n                }\n                return toPoint;\n            }\n            /**\n             * Decide in which direction to dodge or get out of an obstacle.\n             * Considers desired direction, which way is shortest, soft and hard\n             * bounds.\n             *\n             * (? Returns a string, either xMin, xMax, yMin or yMax.)\n             *\n             * @private\n             * @function\n             *\n             * @param {Object} obstacle\n             *        Obstacle to dodge/escape.\n             *\n             * @param {Object} fromPoint\n             *        Point with x/y props that's dodging/escaping.\n             *\n             * @param {Object} toPoint\n             *        Goal point.\n             *\n             * @param {boolean} dirIsX\n             *        Dodge in X dimension.\n             *\n             * @param {Object} bounds\n             *        Hard and soft boundaries.\n             *\n             * @return {boolean}\n             *         Use max or not.\n             */\n            function getDodgeDirection(obstacle, fromPoint, toPoint, dirIsX, bounds) {\n                const softBounds = bounds.soft, hardBounds = bounds.hard, dir = dirIsX ? 'x' : 'y', toPointMax = { x: fromPoint.x, y: fromPoint.y }, toPointMin = { x: fromPoint.x, y: fromPoint.y }, maxOutOfSoftBounds = obstacle[dir + 'Max'] >=\n                    softBounds[dir + 'Max'], minOutOfSoftBounds = obstacle[dir + 'Min'] <=\n                    softBounds[dir + 'Min'], maxOutOfHardBounds = obstacle[dir + 'Max'] >=\n                    hardBounds[dir + 'Max'], minOutOfHardBounds = obstacle[dir + 'Min'] <=\n                    hardBounds[dir + 'Min'], \n                // Find out if we should prefer one direction over the other if\n                // we can choose freely\n                minDistance = abs(obstacle[dir + 'Min'] - fromPoint[dir]), maxDistance = abs(obstacle[dir + 'Max'] - fromPoint[dir]);\n                let // If it's a small difference, pick the one leading towards dest\n                // point. Otherwise pick the shortest distance\n                useMax = abs(minDistance - maxDistance) < 10 ?\n                    fromPoint[dir] < toPoint[dir] :\n                    maxDistance < minDistance;\n                // Check if we hit any obstacles trying to go around in either\n                // direction.\n                toPointMin[dir] = obstacle[dir + 'Min'];\n                toPointMax[dir] = obstacle[dir + 'Max'];\n                const minPivot = pivotPoint(fromPoint, toPointMin, dirIsX)[dir] !==\n                    toPointMin[dir], maxPivot = pivotPoint(fromPoint, toPointMax, dirIsX)[dir] !==\n                    toPointMax[dir];\n                useMax = minPivot ?\n                    (maxPivot ? useMax : true) :\n                    (maxPivot ? false : useMax);\n                // `useMax` now contains our preferred choice, bounds not taken into\n                // account. If both or neither direction is out of bounds we want to\n                // use this.\n                // Deal with soft bounds\n                useMax = minOutOfSoftBounds ?\n                    (maxOutOfSoftBounds ? useMax : true) : // Out on min\n                    (maxOutOfSoftBounds ? false : useMax); // Not out on min\n                // Deal with hard bounds\n                useMax = minOutOfHardBounds ?\n                    (maxOutOfHardBounds ? useMax : true) : // Out on min\n                    (maxOutOfHardBounds ? false : useMax); // Not out on min\n                return useMax;\n            }\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Find a clear path between point.\n             * @private\n             */\n            function clearPathTo(fromPoint, toPoint, dirIsX) {\n                // Don't waste time if we've hit goal\n                if (fromPoint.x === toPoint.x && fromPoint.y === toPoint.y) {\n                    return [];\n                }\n                const dir = dirIsX ? 'x' : 'y', obstacleMargin = options.obstacleOptions.margin, bounds = {\n                    soft: {\n                        xMin: softMinX,\n                        xMax: softMaxX,\n                        yMin: softMinY,\n                        yMax: softMaxY\n                    },\n                    hard: options.hardBounds\n                };\n                let pivot, segments, waypoint, waypointUseMax, envelopingObstacle, secondEnvelopingObstacle, envelopWaypoint;\n                // If fromPoint is inside an obstacle we have a problem. Break out\n                // by just going to the outside of this obstacle. We prefer to go to\n                // the nearest edge in the chosen direction.\n                envelopingObstacle =\n                    findObstacleFromPoint(chartObstacles, fromPoint);\n                if (envelopingObstacle > -1) {\n                    envelopingObstacle = chartObstacles[envelopingObstacle];\n                    waypointUseMax = getDodgeDirection(envelopingObstacle, fromPoint, toPoint, dirIsX, bounds);\n                    // Cut obstacle to hard bounds to make sure we stay within\n                    limitObstacleToBounds(envelopingObstacle, options.hardBounds);\n                    envelopWaypoint = dirIsX ? {\n                        y: fromPoint.y,\n                        x: envelopingObstacle[waypointUseMax ? 'xMax' : 'xMin'] +\n                            (waypointUseMax ? 1 : -1)\n                    } : {\n                        x: fromPoint.x,\n                        y: envelopingObstacle[waypointUseMax ? 'yMax' : 'yMin'] +\n                            (waypointUseMax ? 1 : -1)\n                    };\n                    // If we crashed into another obstacle doing this, we put the\n                    // waypoint between them instead\n                    secondEnvelopingObstacle = findObstacleFromPoint(chartObstacles, envelopWaypoint);\n                    if (secondEnvelopingObstacle > -1) {\n                        secondEnvelopingObstacle = chartObstacles[secondEnvelopingObstacle];\n                        // Cut obstacle to hard bounds\n                        limitObstacleToBounds(secondEnvelopingObstacle, options.hardBounds);\n                        // Modify waypoint to lay between obstacles\n                        envelopWaypoint[dir] = waypointUseMax ? max(envelopingObstacle[dir + 'Max'] - obstacleMargin + 1, (secondEnvelopingObstacle[dir + 'Min'] +\n                            envelopingObstacle[dir + 'Max']) / 2) :\n                            min((envelopingObstacle[dir + 'Min'] + obstacleMargin - 1), ((secondEnvelopingObstacle[dir + 'Max'] +\n                                envelopingObstacle[dir + 'Min']) / 2));\n                        // We are not going anywhere. If this happens for the first\n                        // time, do nothing. Otherwise, try to go to the extreme of\n                        // the obstacle pair in the current direction.\n                        if (fromPoint.x === envelopWaypoint.x &&\n                            fromPoint.y === envelopWaypoint.y) {\n                            if (forceObstacleBreak) {\n                                envelopWaypoint[dir] = waypointUseMax ?\n                                    max(envelopingObstacle[dir + 'Max'], secondEnvelopingObstacle[dir + 'Max']) + 1 :\n                                    min(envelopingObstacle[dir + 'Min'], secondEnvelopingObstacle[dir + 'Min']) - 1;\n                            }\n                            // Toggle on if off, and the opposite\n                            forceObstacleBreak = !forceObstacleBreak;\n                        }\n                        else {\n                            // This point is not identical to previous.\n                            // Clear break trigger.\n                            forceObstacleBreak = false;\n                        }\n                    }\n                    segments = [{\n                            start: fromPoint,\n                            end: envelopWaypoint\n                        }];\n                }\n                else { // If not enveloping, use standard pivot calculation\n                    pivot = pivotPoint(fromPoint, {\n                        x: dirIsX ? toPoint.x : fromPoint.x,\n                        y: dirIsX ? fromPoint.y : toPoint.y\n                    }, dirIsX);\n                    segments = [{\n                            start: fromPoint,\n                            end: {\n                                x: pivot.x,\n                                y: pivot.y\n                            }\n                        }];\n                    // Pivot before goal, use a waypoint to dodge obstacle\n                    if (pivot[dirIsX ? 'x' : 'y'] !== toPoint[dirIsX ? 'x' : 'y']) {\n                        // Find direction of waypoint\n                        waypointUseMax = getDodgeDirection(pivot.obstacle, pivot, toPoint, !dirIsX, bounds);\n                        // Cut waypoint to hard bounds\n                        limitObstacleToBounds(pivot.obstacle, options.hardBounds);\n                        waypoint = {\n                            x: dirIsX ?\n                                pivot.x :\n                                pivot.obstacle[waypointUseMax ? 'xMax' : 'xMin'] +\n                                    (waypointUseMax ? 1 : -1),\n                            y: dirIsX ?\n                                pivot.obstacle[waypointUseMax ? 'yMax' : 'yMin'] +\n                                    (waypointUseMax ? 1 : -1) :\n                                pivot.y\n                        };\n                        // We're changing direction here, store that to make sure we\n                        // also change direction when adding the last segment array\n                        // after handling waypoint.\n                        dirIsX = !dirIsX;\n                        segments = segments.concat(clearPathTo({\n                            x: pivot.x,\n                            y: pivot.y\n                        }, waypoint, dirIsX));\n                    }\n                }\n                // Get segments for the other direction too\n                // Recursion is our friend\n                segments = segments.concat(clearPathTo(segments[segments.length - 1].end, toPoint, !dirIsX));\n                return segments;\n            }\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Extract point to outside of obstacle in whichever direction is\n             * closest. Returns new point outside obstacle.\n             * @private\n             */\n            function extractFromObstacle(obstacle, point, goalPoint) {\n                const dirIsX = min(obstacle.xMax - point.x, point.x - obstacle.xMin) <\n                    min(obstacle.yMax - point.y, point.y - obstacle.yMin), bounds = {\n                    soft: options.hardBounds,\n                    hard: options.hardBounds\n                }, useMax = getDodgeDirection(obstacle, point, goalPoint, dirIsX, bounds);\n                return dirIsX ? {\n                    y: point.y,\n                    x: obstacle[useMax ? 'xMax' : 'xMin'] + (useMax ? 1 : -1)\n                } : {\n                    x: point.x,\n                    y: obstacle[useMax ? 'yMax' : 'yMin'] + (useMax ? 1 : -1)\n                };\n            }\n            // Cut the obstacle array to soft bounds for optimization in large\n            // datasets.\n            chartObstacles =\n                chartObstacles.slice(startObstacleIx, endObstacleIx + 1);\n            // If an obstacle envelops the end point, move it out of there and add\n            // a little segment to where it was.\n            if ((endObstacleIx = findObstacleFromPoint(chartObstacles, end)) > -1) {\n                extractedEndPoint = extractFromObstacle(chartObstacles[endObstacleIx], end, start);\n                endSegments.push({\n                    end: end,\n                    start: extractedEndPoint\n                });\n                end = extractedEndPoint;\n            }\n            // If it's still inside one or more obstacles, get out of there by\n            // force-moving towards the start point.\n            while ((endObstacleIx = findObstacleFromPoint(chartObstacles, end)) > -1) {\n                useMax = end[dir] - start[dir] < 0;\n                extractedEndPoint = {\n                    x: end.x,\n                    y: end.y\n                };\n                extractedEndPoint[dir] = chartObstacles[endObstacleIx][useMax ? dir + 'Max' : dir + 'Min'] + (useMax ? 1 : -1);\n                endSegments.push({\n                    end: end,\n                    start: extractedEndPoint\n                });\n                end = extractedEndPoint;\n            }\n            // Find the path\n            segments = clearPathTo(start, end, dirIsX);\n            // Add the end-point segments\n            segments = segments.concat(endSegments.reverse());\n            return {\n                path: pathFromSegments(segments),\n                obstacles: segments\n            };\n        }\n        fastAvoid.requiresObstacles = true;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        // Define the available pathfinding algorithms.\n        // Algorithms take up to 3 arguments: starting point, ending point, and an\n        // options object.\n        const algorithms = {\n            fastAvoid,\n            straight,\n            simpleConnect\n        };\n\n        return algorithms;\n    });\n    _registerModule(_modules, 'Gantt/ConnectorsDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Ã˜ystein Moseng, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Defaults\n         *\n         * */\n        /*\n         @todo:\n             - Document how to write your own algorithms\n             - Consider adding a Point.pathTo method that wraps creating a connection\n               and rendering it\n        */\n        const connectorsDefaults = {\n            /**\n             * The Pathfinder module allows you to define connections between any two\n             * points, represented as lines - optionally with markers for the start\n             * and/or end points. Multiple algorithms are available for calculating how\n             * the connecting lines are drawn.\n             *\n             * Connector functionality requires Highcharts Gantt to be loaded. In Gantt\n             * charts, the connectors are used to draw dependencies between tasks.\n             *\n             * @see [dependency](series.gantt.data.dependency)\n             *\n             * @sample gantt/pathfinder/demo\n             *         Pathfinder connections\n             *\n             * @declare      Highcharts.ConnectorsOptions\n             * @product      gantt\n             * @optionparent connectors\n             */\n            connectors: {\n                /**\n                 * Enable connectors for this chart. Requires Highcharts Gantt.\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @since     6.2.0\n                 * @apioption connectors.enabled\n                 */\n                /**\n                 * Set the default dash style for this chart's connecting lines.\n                 *\n                 * @type      {string}\n                 * @default   solid\n                 * @since     6.2.0\n                 * @apioption connectors.dashStyle\n                 */\n                /**\n                 * Set the default color for this chart's Pathfinder connecting lines.\n                 * Defaults to the color of the point being connected.\n                 *\n                 * @type      {Highcharts.ColorString}\n                 * @since     6.2.0\n                 * @apioption connectors.lineColor\n                 */\n                /**\n                 * Set the default pathfinder margin to use, in pixels. Some Pathfinder\n                 * algorithms attempt to avoid obstacles, such as other points in the\n                 * chart. These algorithms use this margin to determine how close lines\n                 * can be to an obstacle. The default is to compute this automatically\n                 * from the size of the obstacles in the chart.\n                 *\n                 * To draw connecting lines close to existing points, set this to a low\n                 * number. For more space around existing points, set this number\n                 * higher.\n                 *\n                 * @sample gantt/pathfinder/algorithm-margin\n                 *         Small algorithmMargin\n                 *\n                 * @type      {number}\n                 * @since     6.2.0\n                 * @apioption connectors.algorithmMargin\n                 */\n                /**\n                 * Set the default pathfinder algorithm to use for this chart. It is\n                 * possible to define your own algorithms by adding them to the\n                 * Highcharts.Pathfinder.prototype.algorithms object before the chart\n                 * has been created.\n                 *\n                 * The default algorithms are as follows:\n                 *\n                 * `straight`:      Draws a straight line between the connecting\n                 *                  points. Does not avoid other points when drawing.\n                 *\n                 * `simpleConnect`: Finds a path between the points using right angles\n                 *                  only. Takes only starting/ending points into\n                 *                  account, and will not avoid other points.\n                 *\n                 * `fastAvoid`:     Finds a path between the points using right angles\n                 *                  only. Will attempt to avoid other points, but its\n                 *                  focus is performance over accuracy. Works well with\n                 *                  less dense datasets.\n                 *\n                 * Default value: `straight` is used as default for most series types,\n                 * while `simpleConnect` is used as default for Gantt series, to show\n                 * dependencies between points.\n                 *\n                 * @sample gantt/pathfinder/demo\n                 *         Different types used\n                 *\n                 * @type    {Highcharts.PathfinderTypeValue}\n                 * @default undefined\n                 * @since   6.2.0\n                 */\n                type: 'straight',\n                /**\n                 * The corner radius for the connector line.\n                 *\n                 * @since 11.2.0\n                 */\n                radius: 0,\n                /**\n                 * Set the default pixel width for this chart's Pathfinder connecting\n                 * lines.\n                 *\n                 * @since 6.2.0\n                 */\n                lineWidth: 1,\n                /**\n                 * Marker options for this chart's Pathfinder connectors. Note that\n                 * this option is overridden by the `startMarker` and `endMarker`\n                 * options.\n                 *\n                 * @declare Highcharts.ConnectorsMarkerOptions\n                 * @since   6.2.0\n                 */\n                marker: {\n                    /**\n                     * Set the radius of the connector markers. The default is\n                     * automatically computed based on the algorithmMargin setting.\n                     *\n                     * Setting marker.width and marker.height will override this\n                     * setting.\n                     *\n                     * @type      {number}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.radius\n                     */\n                    /**\n                     * Set the width of the connector markers. If not supplied, this\n                     * is inferred from the marker radius.\n                     *\n                     * @type      {number}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.width\n                     */\n                    /**\n                     * Set the height of the connector markers. If not supplied, this\n                     * is inferred from the marker radius.\n                     *\n                     * @type      {number}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.height\n                     */\n                    /**\n                     * Set the color of the connector markers. By default this is the\n                     * same as the connector color.\n                     *\n                     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.color\n                     */\n                    /**\n                     * Set the line/border color of the connector markers. By default\n                     * this is the same as the marker color.\n                     *\n                     * @type      {Highcharts.ColorString}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.lineColor\n                     */\n                    /**\n                     * Enable markers for the connectors.\n                     */\n                    enabled: false,\n                    /**\n                     * Horizontal alignment of the markers relative to the points.\n                     *\n                     * @type {Highcharts.AlignValue}\n                     */\n                    align: 'center',\n                    /**\n                     * Vertical alignment of the markers relative to the points.\n                     *\n                     * @type {Highcharts.VerticalAlignValue}\n                     */\n                    verticalAlign: 'middle',\n                    /**\n                     * Whether or not to draw the markers inside the points.\n                     */\n                    inside: false,\n                    /**\n                     * Set the line/border width of the pathfinder markers.\n                     */\n                    lineWidth: 1\n                },\n                /**\n                 * Marker options specific to the start markers for this chart's\n                 * Pathfinder connectors. Overrides the generic marker options.\n                 *\n                 * @declare Highcharts.ConnectorsStartMarkerOptions\n                 * @extends connectors.marker\n                 * @since   6.2.0\n                 */\n                startMarker: {\n                    /**\n                     * Set the symbol of the connector start markers.\n                     */\n                    symbol: 'diamond'\n                },\n                /**\n                 * Marker options specific to the end markers for this chart's\n                 * Pathfinder connectors. Overrides the generic marker options.\n                 *\n                 * @declare Highcharts.ConnectorsEndMarkerOptions\n                 * @extends connectors.marker\n                 * @since   6.2.0\n                 */\n                endMarker: {\n                    /**\n                     * Set the symbol of the connector end markers.\n                     */\n                    symbol: 'arrow-filled'\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Override Pathfinder connector options for a series. Requires Highcharts Gantt\n         * to be loaded.\n         *\n         * @declare   Highcharts.SeriesConnectorsOptionsObject\n         * @extends   connectors\n         * @since     6.2.0\n         * @excluding enabled, algorithmMargin\n         * @product   gantt\n         * @apioption plotOptions.series.connectors\n         */\n        /**\n         * Connect to a point. This option can be either a string, referring to the ID\n         * of another point, or an object, or an array of either. If the option is an\n         * array, each element defines a connection.\n         *\n         * @sample gantt/pathfinder/demo\n         *         Different connection types\n         *\n         * @declare   Highcharts.XrangePointConnectorsOptionsObject\n         * @type      {string|Array<string|*>|*}\n         * @extends   plotOptions.series.connectors\n         * @since     6.2.0\n         * @excluding enabled\n         * @product   gantt\n         * @requires  highcharts-gantt\n         * @apioption series.xrange.data.connect\n         */\n        /**\n         * The ID of the point to connect to.\n         *\n         * @type      {string}\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption series.xrange.data.connect.to\n         */\n        ''; // Keeps doclets above in JS file\n\n        return connectorsDefaults;\n    });\n    _registerModule(_modules, 'Gantt/PathfinderComposition.js', [_modules['Gantt/ConnectorsDefaults.js'], _modules['Core/Defaults.js'], _modules['Core/Utilities.js']], function (ConnectorsDefaults, D, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Ã˜ystein Moseng, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setOptions } = D;\n        const { defined, error, merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get point bounding box using plotX/plotY and shapeArgs. If using\n         * graphic.getBBox() directly, the bbox will be affected by animation.\n         *\n         * @private\n         * @function\n         *\n         * @param {Highcharts.Point} point\n         *        The point to get BB of.\n         *\n         * @return {Highcharts.Dictionary<number>|null}\n         *         Result xMax, xMin, yMax, yMin.\n         */\n        function getPointBB(point) {\n            const shapeArgs = point.shapeArgs;\n            // Prefer using shapeArgs (columns)\n            if (shapeArgs) {\n                return {\n                    xMin: shapeArgs.x || 0,\n                    xMax: (shapeArgs.x || 0) + (shapeArgs.width || 0),\n                    yMin: shapeArgs.y || 0,\n                    yMax: (shapeArgs.y || 0) + (shapeArgs.height || 0)\n                };\n            }\n            // Otherwise use plotX/plotY and bb\n            const bb = point.graphic && point.graphic.getBBox();\n            return bb ? {\n                xMin: point.plotX - bb.width / 2,\n                xMax: point.plotX + bb.width / 2,\n                yMin: point.plotY - bb.height / 2,\n                yMax: point.plotY + bb.height / 2\n            } : null;\n        }\n        /**\n         * Warn if using legacy options. Copy the options over. Note that this will\n         * still break if using the legacy options in chart.update, addSeries etc.\n         * @private\n         */\n        function warnLegacy(chart) {\n            if (chart.options.pathfinder ||\n                chart.series.reduce(function (acc, series) {\n                    if (series.options) {\n                        merge(true, (series.options.connectors = series.options.connectors ||\n                            {}), series.options.pathfinder);\n                    }\n                    return acc || series.options && series.options.pathfinder;\n                }, false)) {\n                merge(true, (chart.options.connectors = chart.options.connectors || {}), chart.options.pathfinder);\n                error('WARNING: Pathfinder options have been renamed. ' +\n                    'Use \"chart.connectors\" or \"series.connectors\" instead.');\n            }\n        }\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ConnectionComposition;\n        (function (ConnectionComposition) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            function compose(ChartClass, PathfinderClass, PointClass) {\n                const pointProto = PointClass.prototype;\n                if (!pointProto.getPathfinderAnchorPoint) {\n                    // Initialize Pathfinder for charts\n                    ChartClass.prototype.callbacks.push(function (chart) {\n                        const options = chart.options;\n                        if (options.connectors.enabled !== false) {\n                            warnLegacy(chart);\n                            this.pathfinder = new PathfinderClass(this);\n                            this.pathfinder.update(true); // First draw, defer render\n                        }\n                    });\n                    pointProto.getMarkerVector = pointGetMarkerVector;\n                    pointProto.getPathfinderAnchorPoint = pointGetPathfinderAnchorPoint;\n                    pointProto.getRadiansToVector = pointGetRadiansToVector;\n                    // Set default Pathfinder options\n                    setOptions(ConnectorsDefaults);\n                }\n            }\n            ConnectionComposition.compose = compose;\n            /**\n             * Get coordinates of anchor point for pathfinder connection.\n             *\n             * @private\n             * @function Highcharts.Point#getPathfinderAnchorPoint\n             *\n             * @param {Highcharts.ConnectorsMarkerOptions} markerOptions\n             *        Connection options for position on point.\n             *\n             * @return {Highcharts.PositionObject}\n             *         An object with x/y properties for the position. Coordinates are\n             *         in plot values, not relative to point.\n             */\n            function pointGetPathfinderAnchorPoint(markerOptions) {\n                const bb = getPointBB(this);\n                let x, y;\n                switch (markerOptions.align) { // eslint-disable-line default-case\n                    case 'right':\n                        x = 'xMax';\n                        break;\n                    case 'left':\n                        x = 'xMin';\n                }\n                switch (markerOptions.verticalAlign) { // eslint-disable-line default-case\n                    case 'top':\n                        y = 'yMin';\n                        break;\n                    case 'bottom':\n                        y = 'yMax';\n                }\n                return {\n                    x: x ? bb[x] : (bb.xMin + bb.xMax) / 2,\n                    y: y ? bb[y] : (bb.yMin + bb.yMax) / 2\n                };\n            }\n            /**\n             * Utility to get the angle from one point to another.\n             *\n             * @private\n             * @function Highcharts.Point#getRadiansToVector\n             *\n             * @param {Highcharts.PositionObject} v1\n             *        The first vector, as an object with x/y properties.\n             *\n             * @param {Highcharts.PositionObject} v2\n             *        The second vector, as an object with x/y properties.\n             *\n             * @return {number}\n             *         The angle in degrees\n             */\n            function pointGetRadiansToVector(v1, v2) {\n                let box;\n                if (!defined(v2)) {\n                    box = getPointBB(this);\n                    if (box) {\n                        v2 = {\n                            x: (box.xMin + box.xMax) / 2,\n                            y: (box.yMin + box.yMax) / 2\n                        };\n                    }\n                }\n                return Math.atan2(v2.y - v1.y, v1.x - v2.x);\n            }\n            /**\n             * Utility to get the position of the marker, based on the path angle and\n             * the marker's radius.\n             *\n             * @private\n             * @function Highcharts.Point#getMarkerVector\n             *\n             * @param {number} radians\n             *        The angle in radians from the point center to another vector.\n             *\n             * @param {number} markerRadius\n             *        The radius of the marker, to calculate the additional distance to\n             *        the center of the marker.\n             *\n             * @param {Object} anchor\n             *        The anchor point of the path and marker as an object with x/y\n             *        properties.\n             *\n             * @return {Object}\n             *         The marker vector as an object with x/y properties.\n             */\n            function pointGetMarkerVector(radians, markerRadius, anchor) {\n                const twoPI = Math.PI * 2.0, bb = getPointBB(this), rectWidth = bb.xMax - bb.xMin, rectHeight = bb.yMax - bb.yMin, rAtan = Math.atan2(rectHeight, rectWidth), rectHalfWidth = rectWidth / 2.0, rectHalfHeight = rectHeight / 2.0, rectHorizontalCenter = bb.xMin + rectHalfWidth, rectVerticalCenter = bb.yMin + rectHalfHeight, edgePoint = {\n                    x: rectHorizontalCenter,\n                    y: rectVerticalCenter\n                };\n                let theta = radians, tanTheta = 1, leftOrRightRegion = false, xFactor = 1, yFactor = 1;\n                while (theta < -Math.PI) {\n                    theta += twoPI;\n                }\n                while (theta > Math.PI) {\n                    theta -= twoPI;\n                }\n                tanTheta = Math.tan(theta);\n                if ((theta > -rAtan) && (theta <= rAtan)) {\n                    // Right side\n                    yFactor = -1;\n                    leftOrRightRegion = true;\n                }\n                else if (theta > rAtan && theta <= (Math.PI - rAtan)) {\n                    // Top side\n                    yFactor = -1;\n                }\n                else if (theta > (Math.PI - rAtan) || theta <= -(Math.PI - rAtan)) {\n                    // Left side\n                    xFactor = -1;\n                    leftOrRightRegion = true;\n                }\n                else {\n                    // Bottom side\n                    xFactor = -1;\n                }\n                // Correct the edgePoint according to the placement of the marker\n                if (leftOrRightRegion) {\n                    edgePoint.x += xFactor * (rectHalfWidth);\n                    edgePoint.y += yFactor * (rectHalfWidth) * tanTheta;\n                }\n                else {\n                    edgePoint.x += xFactor * (rectHeight / (2.0 * tanTheta));\n                    edgePoint.y += yFactor * (rectHalfHeight);\n                }\n                if (anchor.x !== rectHorizontalCenter) {\n                    edgePoint.x = anchor.x;\n                }\n                if (anchor.y !== rectVerticalCenter) {\n                    edgePoint.y = anchor.y;\n                }\n                return {\n                    x: edgePoint.x + (markerRadius * Math.cos(theta)),\n                    y: edgePoint.y - (markerRadius * Math.sin(theta))\n                };\n            }\n        })(ConnectionComposition || (ConnectionComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ConnectionComposition;\n    });\n    _registerModule(_modules, 'Gantt/Pathfinder.js', [_modules['Gantt/Connection.js'], _modules['Gantt/PathfinderAlgorithms.js'], _modules['Gantt/PathfinderComposition.js'], _modules['Core/Series/Point.js'], _modules['Core/Utilities.js']], function (Connection, PathfinderAlgorithms, PathfinderComposition, Point, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Ã˜ystein Moseng, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, defined, pick, splat } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const max = Math.max, min = Math.min;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get point bounding box using plotX/plotY and shapeArgs. If using\n         * graphic.getBBox() directly, the bbox will be affected by animation.\n         *\n         * @private\n         * @function\n         *\n         * @param {Highcharts.Point} point\n         *        The point to get BB of.\n         *\n         * @return {Highcharts.Dictionary<number>|null}\n         *         Result xMax, xMin, yMax, yMin.\n         */\n        function getPointBB(point) {\n            const shapeArgs = point.shapeArgs;\n            // Prefer using shapeArgs (columns)\n            if (shapeArgs) {\n                return {\n                    xMin: shapeArgs.x || 0,\n                    xMax: (shapeArgs.x || 0) + (shapeArgs.width || 0),\n                    yMin: shapeArgs.y || 0,\n                    yMax: (shapeArgs.y || 0) + (shapeArgs.height || 0)\n                };\n            }\n            // Otherwise use plotX/plotY and bb\n            const bb = point.graphic && point.graphic.getBBox();\n            return bb ? {\n                xMin: point.plotX - bb.width / 2,\n                xMax: point.plotX + bb.width / 2,\n                yMin: point.plotY - bb.height / 2,\n                yMax: point.plotY + bb.height / 2\n            } : null;\n        }\n        /**\n         * Compute smallest distance between two rectangles.\n         * @private\n         */\n        function calculateObstacleDistance(a, b, bbMargin) {\n            // Count the distance even if we are slightly off\n            const margin = pick(bbMargin, 10), yOverlap = a.yMax + margin > b.yMin - margin &&\n                a.yMin - margin < b.yMax + margin, xOverlap = a.xMax + margin > b.xMin - margin &&\n                a.xMin - margin < b.xMax + margin, xDistance = yOverlap ? (a.xMin > b.xMax ? a.xMin - b.xMax : b.xMin - a.xMax) : Infinity, yDistance = xOverlap ? (a.yMin > b.yMax ? a.yMin - b.yMax : b.yMin - a.yMax) : Infinity;\n            // If the rectangles collide, try recomputing with smaller margin.\n            // If they collide anyway, discard the obstacle.\n            if (xOverlap && yOverlap) {\n                return (margin ?\n                    calculateObstacleDistance(a, b, Math.floor(margin / 2)) :\n                    Infinity);\n            }\n            return min(xDistance, yDistance);\n        }\n        /**\n         * Calculate margin to place around obstacles for the pathfinder in pixels.\n         * Returns a minimum of 1 pixel margin.\n         *\n         * @private\n         * @function\n         *\n         * @param {Array<object>} obstacles\n         *        Obstacles to calculate margin from.\n         *\n         * @return {number}\n         *         The calculated margin in pixels. At least 1.\n         */\n        function calculateObstacleMargin(obstacles) {\n            const len = obstacles.length, distances = [];\n            let onstacleDistance;\n            // Go over all obstacles and compare them to the others.\n            for (let i = 0; i < len; ++i) {\n                // Compare to all obstacles ahead. We will already have compared this\n                // obstacle to the ones before.\n                for (let j = i + 1; j < len; ++j) {\n                    onstacleDistance =\n                        calculateObstacleDistance(obstacles[i], obstacles[j]);\n                    // TODO: Magic number 80\n                    if (onstacleDistance < 80) { // Ignore large distances\n                        distances.push(onstacleDistance);\n                    }\n                }\n            }\n            // Ensure we always have at least one value, even in very spacious charts\n            distances.push(80);\n            return max(Math.floor(distances.sort(function (a, b) {\n                return (a - b);\n            })[\n            // Discard first 10% of the relevant distances, and then grab\n            // the smallest one.\n            Math.floor(distances.length / 10)] / 2 - 1 // Divide the distance by 2 and subtract 1.\n            ), 1 // 1 is the minimum margin\n            );\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Pathfinder class.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Pathfinder\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart to operate on.\n         */\n        class Pathfinder {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(ChartClass, PointClass) {\n                PathfinderComposition.compose(ChartClass, Pathfinder, PointClass);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initialize the Pathfinder object.\n             *\n             * @function Highcharts.Pathfinder#init\n             *\n             * @param {Highcharts.Chart} chart\n             *        The chart context.\n             */\n            init(chart) {\n                // Initialize pathfinder with chart context\n                this.chart = chart;\n                // Init connection reference list\n                this.connections = [];\n                // Recalculate paths/obstacles on chart redraw\n                addEvent(chart, 'redraw', function () {\n                    this.pathfinder.update();\n                });\n            }\n            /**\n             * Update Pathfinder connections from scratch.\n             *\n             * @function Highcharts.Pathfinder#update\n             *\n             * @param {boolean} [deferRender]\n             *        Whether or not to defer rendering of connections until\n             *        series.afterAnimate event has fired. Used on first render.\n             */\n            update(deferRender) {\n                const chart = this.chart, pathfinder = this, oldConnections = pathfinder.connections;\n                // Rebuild pathfinder connections from options\n                pathfinder.connections = [];\n                chart.series.forEach(function (series) {\n                    if (series.visible && !series.options.isInternal) {\n                        series.points.forEach(function (point) {\n                            const ganttPointOptions = point.options;\n                            // For Gantt series the connect could be\n                            // defined as a dependency\n                            if (ganttPointOptions && ganttPointOptions.dependency) {\n                                ganttPointOptions.connect = ganttPointOptions\n                                    .dependency;\n                            }\n                            const connects = (point.options?.connect &&\n                                splat(point.options.connect));\n                            let to;\n                            if (point.visible && point.isInside !== false && connects) {\n                                connects.forEach(function (connect) {\n                                    to = chart.get(typeof connect === 'string' ?\n                                        connect : connect.to);\n                                    if (to instanceof Point &&\n                                        to.series.visible &&\n                                        to.visible &&\n                                        to.isInside !== false) {\n                                        // Add new connection\n                                        pathfinder.connections.push(new Connection(point, // From\n                                        to, typeof connect === 'string' ?\n                                            {} :\n                                            connect));\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n                // Clear connections that should not be updated, and move old info over\n                // to new connections.\n                for (let j = 0, k, found, lenOld = oldConnections.length, lenNew = pathfinder.connections.length; j < lenOld; ++j) {\n                    found = false;\n                    const oldCon = oldConnections[j];\n                    for (k = 0; k < lenNew; ++k) {\n                        const newCon = pathfinder.connections[k];\n                        if ((oldCon.options && oldCon.options.type) ===\n                            (newCon.options && newCon.options.type) &&\n                            oldCon.fromPoint === newCon.fromPoint &&\n                            oldCon.toPoint === newCon.toPoint) {\n                            newCon.graphics = oldCon.graphics;\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        oldCon.destroy();\n                    }\n                }\n                // Clear obstacles to force recalculation. This must be done on every\n                // redraw in case positions have changed. Recalculation is handled in\n                // Connection.getPath on demand.\n                delete this.chartObstacles;\n                delete this.lineObstacles;\n                // Draw the pending connections\n                pathfinder.renderConnections(deferRender);\n            }\n            /**\n             * Draw the chart's connecting paths.\n             *\n             * @function Highcharts.Pathfinder#renderConnections\n             *\n             * @param {boolean} [deferRender]\n             *        Whether or not to defer render until series animation is finished.\n             *        Used on first render.\n             */\n            renderConnections(deferRender) {\n                if (deferRender) {\n                    // Render after series are done animating\n                    this.chart.series.forEach(function (series) {\n                        const render = function () {\n                            // Find pathfinder connections belonging to this series\n                            // that haven't rendered, and render them now.\n                            const pathfinder = series.chart.pathfinder, conns = pathfinder && pathfinder.connections || [];\n                            conns.forEach(function (connection) {\n                                if (connection.fromPoint &&\n                                    connection.fromPoint.series === series) {\n                                    connection.render();\n                                }\n                            });\n                            if (series.pathfinderRemoveRenderEvent) {\n                                series.pathfinderRemoveRenderEvent();\n                                delete series.pathfinderRemoveRenderEvent;\n                            }\n                        };\n                        if (series.options.animation === false) {\n                            render();\n                        }\n                        else {\n                            series.pathfinderRemoveRenderEvent = addEvent(series, 'afterAnimate', render);\n                        }\n                    });\n                }\n                else {\n                    // Go through connections and render them\n                    this.connections.forEach(function (connection) {\n                        connection.render();\n                    });\n                }\n            }\n            /**\n             * Get obstacles for the points in the chart. Does not include connecting\n             * lines from Pathfinder. Applies algorithmMargin to the obstacles.\n             *\n             * @function Highcharts.Pathfinder#getChartObstacles\n             *\n             * @param {Object} options\n             *        Options for the calculation. Currently only\n             *        `options.algorithmMargin`.\n             *\n             * @param {number} options.algorithmMargin\n             *        The algorithm margin to use for the obstacles.\n\n            * @return {Array<object>}\n             *         An array of calculated obstacles. Each obstacle is defined as an\n             *         object with xMin, xMax, yMin and yMax properties.\n             */\n            getChartObstacles(options) {\n                const series = this.chart.series, margin = pick(options.algorithmMargin, 0);\n                let obstacles = [], calculatedMargin;\n                for (let i = 0, sLen = series.length; i < sLen; ++i) {\n                    if (series[i].visible && !series[i].options.isInternal) {\n                        for (let j = 0, pLen = series[i].points.length, bb, point; j < pLen; ++j) {\n                            point = series[i].points[j];\n                            if (point.visible) {\n                                bb = getPointBB(point);\n                                if (bb) {\n                                    obstacles.push({\n                                        xMin: bb.xMin - margin,\n                                        xMax: bb.xMax + margin,\n                                        yMin: bb.yMin - margin,\n                                        yMax: bb.yMax + margin\n                                    });\n                                }\n                            }\n                        }\n                    }\n                }\n                // Sort obstacles by xMin for optimization\n                obstacles = obstacles.sort(function (a, b) {\n                    return a.xMin - b.xMin;\n                });\n                // Add auto-calculated margin if the option is not defined\n                if (!defined(options.algorithmMargin)) {\n                    calculatedMargin =\n                        options.algorithmMargin =\n                            calculateObstacleMargin(obstacles);\n                    obstacles.forEach(function (obstacle) {\n                        obstacle.xMin -= calculatedMargin;\n                        obstacle.xMax += calculatedMargin;\n                        obstacle.yMin -= calculatedMargin;\n                        obstacle.yMax += calculatedMargin;\n                    });\n                }\n                return obstacles;\n            }\n            /**\n             * Utility function to get metrics for obstacles:\n             * - Widest obstacle width\n             * - Tallest obstacle height\n             *\n             * @function Highcharts.Pathfinder#getObstacleMetrics\n             *\n             * @param {Array<object>} obstacles\n             *        An array of obstacles to inspect.\n             *\n             * @return {Object}\n             *         The calculated metrics, as an object with maxHeight and maxWidth\n             *         properties.\n             */\n            getObstacleMetrics(obstacles) {\n                let maxWidth = 0, maxHeight = 0, width, height, i = obstacles.length;\n                while (i--) {\n                    width = obstacles[i].xMax - obstacles[i].xMin;\n                    height = obstacles[i].yMax - obstacles[i].yMin;\n                    if (maxWidth < width) {\n                        maxWidth = width;\n                    }\n                    if (maxHeight < height) {\n                        maxHeight = height;\n                    }\n                }\n                return {\n                    maxHeight: maxHeight,\n                    maxWidth: maxWidth\n                };\n            }\n            /**\n             * Utility to get which direction to start the pathfinding algorithm\n             * (X vs Y), calculated from a set of marker options.\n             *\n             * @function Highcharts.Pathfinder#getAlgorithmStartDirection\n             *\n             * @param {Highcharts.ConnectorsMarkerOptions} markerOptions\n             *        Marker options to calculate from.\n             *\n             * @return {boolean}\n             *         Returns true for X, false for Y, and undefined for autocalculate.\n             */\n            getAlgorithmStartDirection(markerOptions) {\n                const xCenter = markerOptions.align !== 'left' &&\n                    markerOptions.align !== 'right', yCenter = markerOptions.verticalAlign !== 'top' &&\n                    markerOptions.verticalAlign !== 'bottom';\n                return xCenter ?\n                    (yCenter ? void 0 : false) : // When x is centered\n                    (yCenter ? true : void 0); // When x is off-center\n            }\n        }\n        /**\n         * @name Highcharts.Pathfinder#algorithms\n         * @type {Highcharts.Dictionary<Function>}\n         */\n        Pathfinder.prototype.algorithms = PathfinderAlgorithms;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The default pathfinder algorithm to use for a chart. It is possible to define\n         * your own algorithms by adding them to the\n         * `Highcharts.Pathfinder.prototype.algorithms`\n         * object before the chart has been created.\n         *\n         * The default algorithms are as follows:\n         *\n         * `straight`:      Draws a straight line between the connecting\n         *                  points. Does not avoid other points when drawing.\n         *\n         * `simpleConnect`: Finds a path between the points using right angles\n         *                  only. Takes only starting/ending points into\n         *                  account, and will not avoid other points.\n         *\n         * `fastAvoid`:     Finds a path between the points using right angles\n         *                  only. Will attempt to avoid other points, but its\n         *                  focus is performance over accuracy. Works well with\n         *                  less dense datasets.\n         *\n         * @typedef {\"fastAvoid\"|\"simpleConnect\"|\"straight\"|string} Highcharts.PathfinderTypeValue\n         */\n        ''; // Keeps doclets above in JS file\n\n        return Pathfinder;\n    });\n    _registerModule(_modules, 'masters/modules/pathfinder.src.js', [_modules['Core/Globals.js'], _modules['Gantt/Pathfinder.js'], _modules['Extensions/ArrowSymbols.js']], function (Highcharts, Pathfinder, ArrowSymbols) {\n\n        const G = Highcharts;\n        G.Pathfinder = G.Pathfinder || Pathfinder;\n        ArrowSymbols.compose(G.SVGRenderer);\n        G.Pathfinder.compose(G.Chart, G.Point);\n\n        return Highcharts;\n    });\n    _registerModule(_modules, 'Extensions/StaticScale.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016-2024 Torstein Honsi, Lars Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, defined, isNumber, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /** @private */\n        function compose(AxisClass, ChartClass) {\n            const chartProto = ChartClass.prototype;\n            if (!chartProto.adjustHeight) {\n                addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                chartProto.adjustHeight = chartAdjustHeight;\n                addEvent(ChartClass, 'render', chartProto.adjustHeight);\n            }\n        }\n        /** @private */\n        function onAxisAfterSetOptions() {\n            const chartOptions = this.chart.options.chart;\n            if (!this.horiz &&\n                isNumber(this.options.staticScale) &&\n                (!chartOptions.height ||\n                    (chartOptions.scrollablePlotArea &&\n                        chartOptions.scrollablePlotArea.minHeight))) {\n                this.staticScale = this.options.staticScale;\n            }\n        }\n        /** @private */\n        function chartAdjustHeight() {\n            const chart = this;\n            if (chart.redrawTrigger !== 'adjustHeight') {\n                for (const axis of (chart.axes || [])) {\n                    const chart = axis.chart, animate = !!chart.initiatedScale &&\n                        chart.options.animation, staticScale = axis.options.staticScale;\n                    if (axis.staticScale && defined(axis.min)) {\n                        let height = pick(axis.brokenAxis && axis.brokenAxis.unitLength, axis.max + axis.tickInterval - axis.min) * staticScale;\n                        // Minimum height is 1 x staticScale.\n                        height = Math.max(height, staticScale);\n                        const diff = height - chart.plotHeight;\n                        if (!chart.scrollablePixelsY && Math.abs(diff) >= 1) {\n                            chart.plotHeight = height;\n                            chart.redrawTrigger = 'adjustHeight';\n                            chart.setSize(void 0, chart.chartHeight + diff, animate);\n                        }\n                        // Make sure clip rects have the right height before initial\n                        // animation.\n                        axis.series.forEach(function (series) {\n                            const clipRect = series.sharedClipKey &&\n                                chart.sharedClips[series.sharedClipKey];\n                            if (clipRect) {\n                                clipRect.attr(chart.inverted ? {\n                                    width: chart.plotHeight\n                                } : {\n                                    height: chart.plotHeight\n                                });\n                            }\n                        });\n                    }\n                }\n                this.initiatedScale = true;\n            }\n            this.redrawTrigger = null;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const StaticScale = {\n            compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * For vertical axes only. Setting the static scale ensures that each tick unit\n         * is translated into a fixed pixel height. For example, setting the static\n         * scale to 24 results in each Y axis category taking up 24 pixels, and the\n         * height of the chart adjusts. Adding or removing items will make the chart\n         * resize.\n         *\n         * @sample gantt/xrange-series/demo/\n         *         X-range series with static scale\n         *\n         * @type      {number}\n         * @default   50\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption yAxis.staticScale\n         */\n        ''; // Keeps doclets above in JS file\n\n        return StaticScale;\n    });\n    _registerModule(_modules, 'masters/modules/static-scale.src.js', [_modules['Core/Globals.js'], _modules['Extensions/StaticScale.js']], function (Highcharts, StaticScale) {\n\n        const G = Highcharts;\n        StaticScale.compose(G.Axis, G.Chart);\n\n        return Highcharts;\n    });\n    _registerModule(_modules, 'Series/XRange/XRangeSeriesDefaults.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2024 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { correctFloat, isNumber, isObject } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The X-range series displays ranges on the X axis, typically time\n         * intervals with a start and end date.\n         *\n         * @sample {highcharts} highcharts/demo/x-range/\n         *         X-range\n         * @sample {highcharts} highcharts/css/x-range/\n         *         Styled mode X-range\n         * @sample {highcharts} highcharts/chart/inverted-xrange/\n         *         Inverted X-range\n         *\n         * @extends      plotOptions.column\n         * @since        6.0.0\n         * @product      highcharts highstock gantt\n         * @excluding    boostThreshold, crisp, cropThreshold, depth, edgeColor,\n         *               edgeWidth, findNearestPointBy, getExtremesFromAll,\n         *               negativeColor, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, softThreshold,\n         *               stacking, threshold, data, dataSorting, boostBlending\n         * @requires     modules/xrange\n         * @optionparent plotOptions.xrange\n         */\n        const XRangeSeriesDefaults = {\n            /**\n             * A partial fill for each point, typically used to visualize how much\n             * of a task is performed. The partial fill object can be set either on\n             * series or point level.\n             *\n             * @sample {highcharts} highcharts/demo/x-range\n             *         X-range with partial fill\n             *\n             * @product   highcharts highstock gantt\n             * @apioption plotOptions.xrange.partialFill\n             */\n            /**\n             * The fill color to be used for partial fills. Defaults to a darker\n             * shade of the point color.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highcharts highstock gantt\n             * @apioption plotOptions.xrange.partialFill.fill\n             */\n            /**\n             * A partial fill for each point, typically used to visualize how much\n             * of a task is performed. See [completed](series.gantt.data.completed).\n             *\n             * @sample gantt/demo/progress-indicator\n             *         Gantt with progress indicator\n             *\n             * @product   gantt\n             * @apioption plotOptions.gantt.partialFill\n             */\n            /**\n             * In an X-range series, this option makes all points of the same Y-axis\n             * category the same color.\n             */\n            colorByPoint: true,\n            dataLabels: {\n                formatter: function () {\n                    let amount = this.point.partialFill;\n                    if (isObject(amount)) {\n                        amount = amount.amount;\n                    }\n                    if (isNumber(amount) && amount > 0) {\n                        return correctFloat(amount * 100) + '%';\n                    }\n                },\n                inside: true,\n                verticalAlign: 'middle',\n                style: {\n                    whiteSpace: 'nowrap'\n                }\n            },\n            tooltip: {\n                headerFormat: '<span style=\"font-size: 0.8em\">{point.x} - {point.x2}</span><br/>',\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.yCategory}</b><br/>'\n            },\n            borderRadius: 3,\n            pointRange: 0\n        };\n        /* *\n         *\n         *  Export Default\n         *\n         * */\n        /* *\n         *\n         * API Options\n         *\n         * */\n        /**\n         * An `xrange` series. If the [type](#series.xrange.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.xrange\n         * @excluding boostThreshold, crisp, cropThreshold, depth, edgeColor, edgeWidth,\n         *            findNearestPointBy, getExtremesFromAll, negativeColor,\n         *            pointInterval, pointIntervalUnit, pointPlacement, pointRange,\n         *            pointStart, softThreshold, stacking, threshold, dataSorting,\n         *            boostBlending\n         * @product   highcharts highstock gantt\n         * @requires  modules/xrange\n         * @apioption series.xrange\n         */\n        /**\n         * An array of data points for the series. For the `xrange` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of objects with named values. The objects are point configuration\n         *    objects as seen below.\n         *    ```js\n         *    data: [{\n         *        x: Date.UTC(2017, 0, 1),\n         *        x2: Date.UTC(2017, 0, 3),\n         *        name: \"Test\",\n         *        y: 0,\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: Date.UTC(2017, 0, 4),\n         *        x2: Date.UTC(2017, 0, 5),\n         *        name: \"Deploy\",\n         *        y: 1,\n         *        color: \"#FF0000\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @declare   Highcharts.XrangePointOptionsObject\n         * @type      {Array<*>}\n         * @extends   series.line.data\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data\n         */\n        /**\n         * The starting X value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.x\n         */\n        /**\n         * The ending X value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.x2\n         */\n        /**\n         * The Y value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.y\n         */\n        /**\n         * A partial fill for each point, typically used to visualize how much of\n         * a task is performed. The partial fill object can be set either on series\n         * or point level.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range with partial fill\n         *\n         * @declare   Highcharts.XrangePointPartialFillOptionsObject\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill\n         */\n        /**\n         * The amount of the X-range point to be filled. Values can be 0-1 and are\n         * converted to percentages in the default data label formatter.\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill.amount\n         */\n        /**\n         * The fill color to be used for partial fills. Defaults to a darker shade\n         * of the point color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill.fill\n         */\n        (''); // Adds doclets above to transpiled file\n\n        return XRangeSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/XRange/XRangePoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2024 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: { pointClass: ColumnPoint } } } = SeriesRegistry.seriesTypes;\n        const { extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class XRangePoint extends ColumnPoint {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Return color of a point based on its category.\n             *\n             * @private\n             * @function getColorByCategory\n             *\n             * @param {object} series\n             *        The series which the point belongs to.\n             *\n             * @param {object} point\n             *        The point to calculate its color for.\n             *\n             * @return {object}\n             *         Returns an object containing the properties color and colorIndex.\n             */\n            static getColorByCategory(series, point) {\n                const colors = series.options.colors || series.chart.options.colors, colorCount = colors ?\n                    colors.length :\n                    series.chart.options.chart.colorCount, colorIndex = point.y % colorCount, color = colors && colors[colorIndex];\n                return {\n                    colorIndex: colorIndex,\n                    color: color\n                };\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            resolveColor() {\n                const series = this.series;\n                if (series.options.colorByPoint && !this.options.color) {\n                    const colorByPoint = XRangePoint.getColorByCategory(series, this);\n                    if (!series.chart.styledMode) {\n                        this.color = colorByPoint.color;\n                    }\n                    if (!this.options.colorIndex) {\n                        this.colorIndex = colorByPoint.colorIndex;\n                    }\n                }\n                else {\n                    this.color = this.options.color || series.color;\n                }\n            }\n            /**\n             * Extend init to have y default to 0.\n             *\n             * @private\n             */\n            constructor(series, options) {\n                super(series, options);\n                if (!this.y) {\n                    this.y = 0;\n                }\n            }\n            /**\n             * @private\n             */\n            setState() {\n                super.setState.apply(this, arguments);\n                this.series.drawPoint(this, this.series.getAnimationVerb());\n            }\n            /**\n             * Add x2 and yCategory to the available properties for tooltip formats.\n             *\n             * @private\n             */\n            getLabelConfig() {\n                const cfg = super.getLabelConfig.call(this), yCats = this.series.yAxis.categories;\n                cfg.x2 = this.x2;\n                cfg.yCategory = this.yCategory = yCats && yCats[this.y];\n                // Use 'category' as 'key' to ensure tooltip datetime formatting.\n                // Use 'name' only when 'category' is undefined.\n                cfg.key = this.category || this.name;\n                return cfg;\n            }\n            /**\n             * @private\n             */\n            isValid() {\n                return typeof this.x === 'number' &&\n                    typeof this.x2 === 'number';\n            }\n        }\n        extend(XRangePoint.prototype, {\n            ttBelow: false,\n            tooltipDateKeys: ['x', 'x2']\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * The ending X value of the range point.\n         * @name Highcharts.Point#x2\n         * @type {number|undefined}\n         * @requires modules/xrange\n         */\n        /**\n         * Extend applyOptions so that `colorByPoint` for x-range means that one\n         * color is applied per Y axis category.\n         *\n         * @private\n         * @function Highcharts.Point#applyOptions\n         *\n         * @return {Highcharts.Series}\n         */\n        /**\n         * @interface Highcharts.PointOptionsObject in parts/Point.ts\n         */ /**\n        * The ending X value of the range point.\n        * @name Highcharts.PointOptionsObject#x2\n        * @type {number|undefined}\n        * @requires modules/xrange\n        */\n        (''); // Keeps doclets above in JS file\n\n        return XRangePoint;\n    });\n    _registerModule(_modules, 'Series/XRange/XRangeSeries.js', [_modules['Core/Globals.js'], _modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Series/XRange/XRangeSeriesDefaults.js'], _modules['Series/XRange/XRangePoint.js']], function (H, Color, SeriesRegistry, U, XRangeSeriesDefaults, XRangePoint) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2024 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed, noop } = H;\n        const { parse: color } = Color;\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, clamp, crisp, defined, extend, find, isNumber, isObject, merge, pick, pushUnique, relativeLength } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Max x2 should be considered in xAxis extremes\n         * @private\n         */\n        function onAxisAfterGetSeriesExtremes() {\n            let dataMax, modMax;\n            if (this.isXAxis) {\n                dataMax = pick(this.dataMax, -Number.MAX_VALUE);\n                for (const series of this.series) {\n                    if (series.x2Data) {\n                        for (const val of series.x2Data) {\n                            if (val && val > dataMax) {\n                                dataMax = val;\n                                modMax = true;\n                            }\n                        }\n                    }\n                }\n                if (modMax) {\n                    this.dataMax = dataMax;\n                }\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.xrange\n         *\n         * @augments Highcharts.Series\n         */\n        class XRangeSeries extends ColumnSeries {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass) {\n                if (pushUnique(composed, 'Series.XRange')) {\n                    addEvent(AxisClass, 'afterGetSeriesExtremes', onAxisAfterGetSeriesExtremes);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            init() {\n                super.init.apply(this, arguments);\n                this.options.stacking = void 0; // #13161\n            }\n            /**\n             * Borrow the column series metrics, but with swapped axes. This gives\n             * free access to features like groupPadding, grouping, pointWidth etc.\n             * @private\n             */\n            getColumnMetrics() {\n                const swapAxes = () => {\n                    for (const series of this.chart.series) {\n                        const xAxis = series.xAxis;\n                        series.xAxis = series.yAxis;\n                        series.yAxis = xAxis;\n                    }\n                };\n                swapAxes();\n                const metrics = super.getColumnMetrics();\n                swapAxes();\n                return metrics;\n            }\n            /**\n             * Override cropData to show a point where x or x2 is outside visible range,\n             * but one of them is inside.\n             * @private\n             */\n            cropData(xData, yData, min, max) {\n                // Replace xData with x2Data to find the appropriate cropStart\n                const crop = super.cropData(this.x2Data, yData, min, max);\n                // Re-insert the cropped xData\n                crop.xData = xData.slice(crop.start, crop.end);\n                return crop;\n            }\n            /**\n             * Finds the index of an existing point that matches the given point\n             * options.\n             *\n             * @private\n             *\n             * @param {Highcharts.XRangePointOptions} options\n             *        The options of the point.\n             *\n             * @return {number|undefined}\n             *         Returns index of a matching point, or undefined if no match is\n             *         found.\n             */\n            findPointIndex(options) {\n                const { cropStart, points } = this;\n                const { id } = options;\n                let pointIndex;\n                if (id) {\n                    const point = find(points, (point) => point.id === id);\n                    pointIndex = point ? point.index : void 0;\n                }\n                if (typeof pointIndex === 'undefined') {\n                    const point = find(points, (point) => (point.x === options.x &&\n                        point.x2 === options.x2 &&\n                        !point.touched));\n                    pointIndex = point ? point.index : void 0;\n                }\n                // Reduce pointIndex if data is cropped\n                if (this.cropped &&\n                    isNumber(pointIndex) &&\n                    isNumber(cropStart) &&\n                    pointIndex >= cropStart) {\n                    pointIndex -= cropStart;\n                }\n                return pointIndex;\n            }\n            alignDataLabel(point) {\n                const oldPlotX = point.plotX;\n                point.plotX = pick(point.dlBox && point.dlBox.centerX, point.plotX);\n                if (point.dataLabel && point.shapeArgs?.width) {\n                    point.dataLabel.css({\n                        width: `${point.shapeArgs.width}px`\n                    });\n                }\n                super.alignDataLabel.apply(this, arguments);\n                point.plotX = oldPlotX;\n            }\n            /**\n             * @private\n             */\n            translatePoint(point) {\n                const xAxis = this.xAxis, yAxis = this.yAxis, metrics = this.columnMetrics, options = this.options, minPointLength = options.minPointLength || 0, oldColWidth = (point.shapeArgs && point.shapeArgs.width || 0) / 2, seriesXOffset = this.pointXOffset = metrics.offset, posX = pick(point.x2, point.x + (point.len || 0)), borderRadius = options.borderRadius, plotTop = this.chart.plotTop, plotLeft = this.chart.plotLeft;\n                let plotX = point.plotX, plotX2 = xAxis.translate(posX, 0, 0, 0, 1);\n                const length = Math.abs(plotX2 - plotX), inverted = this.chart.inverted, borderWidth = pick(options.borderWidth, 1);\n                let widthDifference, partialFill, yOffset = metrics.offset, pointHeight = Math.round(metrics.width), dlLeft, dlRight, dlWidth, clipRectWidth;\n                if (minPointLength) {\n                    widthDifference = minPointLength - length;\n                    if (widthDifference < 0) {\n                        widthDifference = 0;\n                    }\n                    plotX -= widthDifference / 2;\n                    plotX2 += widthDifference / 2;\n                }\n                plotX = Math.max(plotX, -10);\n                plotX2 = clamp(plotX2, -10, xAxis.len + 10);\n                // Handle individual pointWidth\n                if (defined(point.options.pointWidth)) {\n                    yOffset -= ((Math.ceil(point.options.pointWidth) - pointHeight) / 2);\n                    pointHeight = Math.ceil(point.options.pointWidth);\n                }\n                // Apply pointPlacement to the Y axis\n                if (options.pointPlacement &&\n                    isNumber(point.plotY) &&\n                    yAxis.categories) {\n                    point.plotY = yAxis.translate(point.y, 0, 1, 0, 1, options.pointPlacement);\n                }\n                const x = crisp(Math.min(plotX, plotX2), borderWidth), x2 = crisp(Math.max(plotX, plotX2), borderWidth), width = x2 - x;\n                const r = Math.min(relativeLength((typeof borderRadius === 'object' ?\n                    borderRadius.radius :\n                    borderRadius || 0), pointHeight), Math.min(width, pointHeight) / 2);\n                const shapeArgs = {\n                    x,\n                    y: crisp((point.plotY || 0) + yOffset, borderWidth),\n                    width,\n                    height: pointHeight,\n                    r\n                };\n                point.shapeArgs = shapeArgs;\n                // Move tooltip to default position\n                if (!inverted) {\n                    point.tooltipPos[0] -= oldColWidth +\n                        seriesXOffset -\n                        shapeArgs.width / 2;\n                }\n                else {\n                    point.tooltipPos[1] += seriesXOffset +\n                        oldColWidth;\n                }\n                // Align data labels inside the shape and inside the plot area\n                dlLeft = shapeArgs.x;\n                dlRight = dlLeft + shapeArgs.width;\n                if (dlLeft < 0 || dlRight > xAxis.len) {\n                    dlLeft = clamp(dlLeft, 0, xAxis.len);\n                    dlRight = clamp(dlRight, 0, xAxis.len);\n                    dlWidth = dlRight - dlLeft;\n                    point.dlBox = merge(shapeArgs, {\n                        x: dlLeft,\n                        width: dlRight - dlLeft,\n                        centerX: dlWidth ? dlWidth / 2 : null\n                    });\n                }\n                else {\n                    point.dlBox = null;\n                }\n                // Tooltip position\n                const tooltipPos = point.tooltipPos;\n                const xIndex = !inverted ? 0 : 1;\n                const yIndex = !inverted ? 1 : 0;\n                const tooltipYOffset = (this.columnMetrics ?\n                    this.columnMetrics.offset :\n                    -metrics.width / 2);\n                // Centering tooltip position (#14147)\n                if (inverted) {\n                    tooltipPos[xIndex] += shapeArgs.width / 2;\n                }\n                else {\n                    tooltipPos[xIndex] = clamp(tooltipPos[xIndex] +\n                        (xAxis.reversed ? -1 : 0) * shapeArgs.width, xAxis.left - plotLeft, xAxis.left + xAxis.len - plotLeft - 1);\n                }\n                tooltipPos[yIndex] = clamp(tooltipPos[yIndex] + ((inverted ? -1 : 1) * tooltipYOffset), yAxis.top - plotTop, yAxis.top + yAxis.len - plotTop - 1);\n                // Add a partShapeArgs to the point, based on the shapeArgs property\n                partialFill = point.partialFill;\n                if (partialFill) {\n                    // Get the partial fill amount\n                    if (isObject(partialFill)) {\n                        partialFill = partialFill.amount;\n                    }\n                    // If it was not a number, assume 0\n                    if (!isNumber(partialFill)) {\n                        partialFill = 0;\n                    }\n                    point.partShapeArgs = merge(shapeArgs);\n                    clipRectWidth = Math.max(Math.round(length * partialFill + point.plotX -\n                        plotX), 0);\n                    point.clipRectArgs = {\n                        x: xAxis.reversed ? // #10717\n                            shapeArgs.x + length - clipRectWidth :\n                            shapeArgs.x,\n                        y: shapeArgs.y,\n                        width: clipRectWidth,\n                        height: shapeArgs.height\n                    };\n                }\n            }\n            /**\n             * @private\n             */\n            translate() {\n                super.translate.apply(this, arguments);\n                for (const point of this.points) {\n                    this.translatePoint(point);\n                }\n            }\n            /**\n             * Draws a single point in the series. Needed for partial fill.\n             *\n             * This override turns point.graphic into a group containing the\n             * original graphic and an overlay displaying the partial fill.\n             *\n             * @private\n             *\n             * @param {Highcharts.Point} point\n             *        An instance of Point in the series.\n             *\n             * @param {\"animate\"|\"attr\"} verb\n             *        'animate' (animates changes) or 'attr' (sets options)\n             */\n            drawPoint(point, verb) {\n                const seriesOpts = this.options, renderer = this.chart.renderer, type = point.shapeType, shapeArgs = point.shapeArgs, partShapeArgs = point.partShapeArgs, clipRectArgs = point.clipRectArgs, pointState = point.state, stateOpts = (seriesOpts.states[pointState || 'normal'] ||\n                    {}), pointStateVerb = typeof pointState === 'undefined' ?\n                    'attr' : verb, pointAttr = this.pointAttribs(point, pointState), animation = pick(this.chart.options.chart.animation, stateOpts.animation);\n                let graphic = point.graphic, pfOptions = point.partialFill;\n                if (!point.isNull && point.visible !== false) {\n                    // Original graphic\n                    if (graphic) { // Update\n                        graphic.rect[verb](shapeArgs);\n                    }\n                    else {\n                        point.graphic = graphic = renderer.g('point')\n                            .addClass(point.getClassName())\n                            .add(point.group || this.group);\n                        graphic.rect = renderer[type](merge(shapeArgs))\n                            .addClass(point.getClassName())\n                            .addClass('highcharts-partfill-original')\n                            .add(graphic);\n                    }\n                    // Partial fill graphic\n                    if (partShapeArgs) {\n                        if (graphic.partRect) {\n                            graphic.partRect[verb](merge(partShapeArgs));\n                            graphic.partialClipRect[verb](merge(clipRectArgs));\n                        }\n                        else {\n                            graphic.partialClipRect = renderer.clipRect(clipRectArgs.x, clipRectArgs.y, clipRectArgs.width, clipRectArgs.height);\n                            graphic.partRect =\n                                renderer[type](partShapeArgs)\n                                    .addClass('highcharts-partfill-overlay')\n                                    .add(graphic)\n                                    .clip(graphic.partialClipRect);\n                        }\n                    }\n                    // Presentational\n                    if (!this.chart.styledMode) {\n                        graphic\n                            .rect[verb](pointAttr, animation)\n                            .shadow(seriesOpts.shadow);\n                        if (partShapeArgs) {\n                            // Ensure pfOptions is an object\n                            if (!isObject(pfOptions)) {\n                                pfOptions = {};\n                            }\n                            if (isObject(seriesOpts.partialFill)) {\n                                pfOptions = merge(seriesOpts.partialFill, pfOptions);\n                            }\n                            const fill = (pfOptions.fill ||\n                                color(pointAttr.fill).brighten(-0.3).get() ||\n                                color(point.color || this.color)\n                                    .brighten(-0.3).get());\n                            pointAttr.fill = fill;\n                            graphic\n                                .partRect[pointStateVerb](pointAttr, animation)\n                                .shadow(seriesOpts.shadow);\n                        }\n                    }\n                }\n                else if (graphic) {\n                    point.graphic = graphic.destroy(); // #1269\n                }\n            }\n            /**\n             * @private\n             */\n            drawPoints() {\n                const verb = this.getAnimationVerb();\n                // Draw the columns\n                for (const point of this.points) {\n                    this.drawPoint(point, verb);\n                }\n            }\n            /**\n             * Returns \"animate\", or \"attr\" if the number of points is above the\n             * animation limit.\n             *\n             * @private\n             */\n            getAnimationVerb() {\n                return (this.chart.pointCount < (this.options.animationLimit || 250) ?\n                    'animate' :\n                    'attr');\n            }\n            /**\n             * @private\n             */\n            isPointInside(point) {\n                const shapeArgs = point.shapeArgs, plotX = point.plotX, plotY = point.plotY;\n                if (!shapeArgs) {\n                    return super.isPointInside.apply(this, arguments);\n                }\n                const isInside = typeof plotX !== 'undefined' &&\n                    typeof plotY !== 'undefined' &&\n                    plotY >= 0 &&\n                    plotY <= this.yAxis.len &&\n                    (shapeArgs.x || 0) + (shapeArgs.width || 0) >= 0 &&\n                    plotX <= this.xAxis.len;\n                return isInside;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        XRangeSeries.defaultOptions = merge(ColumnSeries.defaultOptions, XRangeSeriesDefaults);\n        extend(XRangeSeries.prototype, {\n            pointClass: XRangePoint,\n            pointArrayMap: ['x2', 'y'],\n            getExtremesFromAll: true,\n            parallelArrays: ['x', 'x2', 'y'],\n            requireSorting: false,\n            type: 'xrange',\n            animate: SeriesRegistry.series.prototype.animate,\n            autoIncrement: noop,\n            buildKDTree: noop\n        });\n        SeriesRegistry.registerSeriesType('xrange', XRangeSeries);\n        /* *\n         *\n         * Default Export\n         *\n         * */\n\n        return XRangeSeries;\n    });\n    _registerModule(_modules, 'masters/modules/xrange.src.js', [_modules['Core/Globals.js'], _modules['Series/XRange/XRangeSeries.js']], function (Highcharts, XRangeSeries) {\n\n        const G = Highcharts;\n        XRangeSeries.compose(G.Axis);\n\n        return Highcharts;\n    });\n    _registerModule(_modules, 'Series/Gantt/GanttPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { xrange: { prototype: { pointClass: XRangePoint } } } = SeriesRegistry.seriesTypes;\n        const { pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class GanttPoint extends XRangePoint {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static setGanttPointAliases(options) {\n                /**\n                 * Add a value to options if the value exists.\n                 * @private\n                 */\n                function addIfExists(prop, val) {\n                    if (typeof val !== 'undefined') {\n                        options[prop] = val;\n                    }\n                }\n                addIfExists('x', pick(options.start, options.x));\n                addIfExists('x2', pick(options.end, options.x2));\n                addIfExists('partialFill', pick(options.completed, options.partialFill));\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies the options containing the x and y data and possible some\n             * extra properties. This is called on point init or from point.update.\n             *\n             * @private\n             * @function Highcharts.Point#applyOptions\n             *\n             * @param {Object} options\n             *        The point options\n             *\n             * @param {number} x\n             *        The x value\n             *\n             * @return {Highcharts.Point}\n             *         The Point instance\n             */\n            applyOptions(options, x) {\n                const ganttPoint = super.applyOptions(options, x);\n                GanttPoint.setGanttPointAliases(ganttPoint);\n                return ganttPoint;\n            }\n            isValid() {\n                return ((typeof this.start === 'number' ||\n                    typeof this.x === 'number') &&\n                    (typeof this.end === 'number' ||\n                        typeof this.x2 === 'number' ||\n                        this.milestone));\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GanttPoint;\n    });\n    _registerModule(_modules, 'Series/Gantt/GanttSeriesDefaults.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isNumber } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `gantt` series. If the [type](#series.gantt.type) option is not specified,\n         * it is inherited from [chart.type](#chart.type).\n         *\n         * @extends      plotOptions.xrange\n         * @product      gantt\n         * @requires     highcharts-gantt\n         * @optionparent plotOptions.gantt\n         */\n        const GanttSeriesDefaults = {\n            // Options - default options merged with parent\n            grouping: false,\n            dataLabels: {\n                enabled: true\n            },\n            tooltip: {\n                headerFormat: '<span style=\"font-size: 0.8em\">{series.name}</span><br/>',\n                pointFormat: null,\n                pointFormatter: function () {\n                    const point = this, series = point.series, xAxis = series.xAxis, formats = series.tooltipOptions.dateTimeLabelFormats, startOfWeek = xAxis.options.startOfWeek, ttOptions = series.tooltipOptions, milestone = point.options.milestone;\n                    let format = ttOptions.xDateFormat, retVal = '<b>' + (point.name || point.yCategory) + '</b>';\n                    if (ttOptions.pointFormat) {\n                        return point.tooltipFormatter(ttOptions.pointFormat);\n                    }\n                    if (!format && isNumber(point.start)) {\n                        format = series.chart.time.getDateFormat(xAxis.closestPointRange, point.start, startOfWeek, formats || {});\n                    }\n                    const start = series.chart.time.dateFormat(format, point.start), end = series.chart.time.dateFormat(format, point.end);\n                    retVal += '<br/>';\n                    if (!milestone) {\n                        retVal += 'Start: ' + start + '<br/>';\n                        retVal += 'End: ' + end + '<br/>';\n                    }\n                    else {\n                        retVal += start + '<br/>';\n                    }\n                    return retVal;\n                }\n            },\n            connectors: {\n                type: 'simpleConnect',\n                /**\n                 * @declare Highcharts.ConnectorsAnimationOptionsObject\n                 */\n                animation: {\n                    reversed: true // Dependencies go from child to parent\n                },\n                radius: 0,\n                startMarker: {\n                    enabled: true,\n                    symbol: 'arrow-filled',\n                    radius: 4,\n                    fill: '#fa0',\n                    align: 'left'\n                },\n                endMarker: {\n                    enabled: false, // Only show arrow on the dependent task\n                    align: 'right'\n                }\n            }\n        };\n        /**\n         * A `gantt` series.\n         *\n         * @extends   series,plotOptions.gantt\n         * @excluding boostThreshold, dashStyle, findNearestPointBy,\n         *            getExtremesFromAll, marker, negativeColor, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointStart\n         * @product   gantt\n         * @requires  highcharts-gantt\n         * @apioption series.gantt\n         */\n        /**\n         * Data for a Gantt series.\n         *\n         * @declare   Highcharts.GanttPointOptionsObject\n         * @type      {Array<*>}\n         * @extends   series.xrange.data\n         * @excluding className, connect, dataLabels, events,\n         *            partialFill, selected, x, x2\n         * @product   gantt\n         * @apioption series.gantt.data\n         */\n        /**\n         * Whether the grid node belonging to this point should start as collapsed. Used\n         * in axes of type treegrid.\n         *\n         * @sample {gantt} gantt/treegrid-axis/collapsed/\n         *         Start as collapsed\n         *\n         * @type      {boolean}\n         * @default   false\n         * @product   gantt\n         * @apioption series.gantt.data.collapsed\n         */\n        /**\n         * The start time of a task.\n         *\n         * @type      {number}\n         * @product   gantt\n         * @apioption series.gantt.data.start\n         */\n        /**\n         * The end time of a task.\n         *\n         * @type      {number}\n         * @product   gantt\n         * @apioption series.gantt.data.end\n         */\n        /**\n         * The Y value of a task.\n         *\n         * @type      {number}\n         * @product   gantt\n         * @apioption series.gantt.data.y\n         */\n        /**\n         * The name of a task. If a `treegrid` y-axis is used (default in Gantt charts),\n         * this will be picked up automatically, and used to calculate the y-value.\n         *\n         * @type      {string}\n         * @product   gantt\n         * @apioption series.gantt.data.name\n         */\n        /**\n         * Progress indicator, how much of the task completed. If it is a number, the\n         * `fill` will be applied automatically.\n         *\n         * @sample {gantt} gantt/demo/progress-indicator\n         *         Progress indicator\n         *\n         * @type      {number|*}\n         * @extends   series.xrange.data.partialFill\n         * @product   gantt\n         * @apioption series.gantt.data.completed\n         */\n        /**\n         * The amount of the progress indicator, ranging from 0 (not started) to 1\n         * (finished).\n         *\n         * @type      {number}\n         * @default   0\n         * @apioption series.gantt.data.completed.amount\n         */\n        /**\n         * The fill of the progress indicator. Defaults to a darkened variety of the\n         * main color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @apioption series.gantt.data.completed.fill\n         */\n        /**\n         * The ID of the point (task) that this point depends on in Gantt charts.\n         * Aliases [connect](series.xrange.data.connect). Can also be an object,\n         * specifying further connecting [options](series.gantt.connectors) between the\n         * points. Multiple connections can be specified by providing an array.\n         *\n         * @sample gantt/demo/project-management\n         *         Dependencies\n         * @sample gantt/pathfinder/demo\n         *         Different connection types\n         *\n         * @type      {string|Array<string|*>|*}\n         * @extends   series.xrange.data.connect\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption series.gantt.data.dependency\n         */\n        /**\n         * Whether this point is a milestone. If so, only the `start` option is handled,\n         * while `end` is ignored.\n         *\n         * @sample gantt/gantt/milestones\n         *         Milestones\n         *\n         * @type      {boolean}\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption series.gantt.data.milestone\n         */\n        /**\n         * The ID of the parent point (task) of this point in Gantt charts.\n         *\n         * @sample gantt/demo/subtasks\n         *         Gantt chart with subtasks\n         *\n         * @type      {string}\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption series.gantt.data.parent\n         */\n        /**\n         * @excluding afterAnimate\n         * @apioption series.gantt.events\n         */\n        ''; // Detachs doclets above\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GanttSeriesDefaults;\n    });\n    _registerModule(_modules, 'Core/Axis/BrokenAxis.js', [_modules['Core/Axis/Stacking/StackItem.js'], _modules['Core/Utilities.js']], function (StackItem, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, find, fireEvent, isArray, isNumber, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Axis with support of broken data rows.\n         * @private\n         */\n        var BrokenAxis;\n        (function (BrokenAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds support for broken axes.\n             * @private\n             */\n            function compose(AxisClass, SeriesClass) {\n                if (!AxisClass.keepProps.includes('brokenAxis')) {\n                    AxisClass.keepProps.push('brokenAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterSetTickPositions', onAxisAfterSetTickPositions);\n                    addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                    const seriesProto = SeriesClass.prototype;\n                    seriesProto.drawBreaks = seriesDrawBreaks;\n                    seriesProto.gappedPath = seriesGappedPath;\n                    addEvent(SeriesClass, 'afterGeneratePoints', onSeriesAfterGeneratePoints);\n                    addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n                }\n                return AxisClass;\n            }\n            BrokenAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterInit() {\n                if (typeof this.brokenAxis !== 'undefined') {\n                    this.brokenAxis.setBreaks(this.options.breaks, false);\n                }\n            }\n            /**\n             * Force Axis to be not-ordinal when breaks are defined.\n             * @private\n             */\n            function onAxisAfterSetOptions() {\n                const axis = this;\n                if (axis.brokenAxis?.hasBreaks) {\n                    axis.options.ordinal = false;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterSetTickPositions() {\n                const axis = this, brokenAxis = axis.brokenAxis;\n                if (brokenAxis?.hasBreaks) {\n                    const tickPositions = axis.tickPositions, info = axis.tickPositions.info, newPositions = [];\n                    for (let i = 0; i < tickPositions.length; i++) {\n                        if (!brokenAxis.isInAnyBreak(tickPositions[i])) {\n                            newPositions.push(tickPositions[i]);\n                        }\n                    }\n                    axis.tickPositions = newPositions;\n                    axis.tickPositions.info = info;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                const axis = this;\n                if (!axis.brokenAxis) {\n                    axis.brokenAxis = new Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterGeneratePoints() {\n                const { isDirty, options: { connectNulls }, points, xAxis, yAxis } = this;\n                // Set, or reset visibility of the points. Axis.setBreaks marks\n                // the series as isDirty\n                if (isDirty) {\n                    let i = points.length;\n                    while (i--) {\n                        const point = points[i];\n                        // Respect nulls inside the break (#4275)\n                        const nullGap = point.y === null && connectNulls === false;\n                        const isPointInBreak = (!nullGap && (xAxis?.brokenAxis?.isInAnyBreak(point.x, true) ||\n                            yAxis?.brokenAxis?.isInAnyBreak(point.y, true)));\n                        // Set point.visible if in any break.\n                        // If not in break, reset visible to original value.\n                        point.visible = isPointInBreak ?\n                            false :\n                            point.options.visible !== false;\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterRender() {\n                this.drawBreaks(this.xAxis, ['x']);\n                this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));\n            }\n            /**\n             * @private\n             */\n            function seriesDrawBreaks(axis, keys) {\n                const series = this, points = series.points;\n                let breaks, threshold, y;\n                if (axis?.brokenAxis?.hasBreaks) {\n                    const brokenAxis = axis.brokenAxis;\n                    keys.forEach(function (key) {\n                        breaks = brokenAxis?.breakArray || [];\n                        threshold = axis.isXAxis ?\n                            axis.min :\n                            pick(series.options.threshold, axis.min);\n                        // Array of breaks that have been \"zoomed-out\" which means that\n                        // they were shown previously, but now after zoom, they are not\n                        // (#19885).\n                        const breaksOutOfRange = axis?.options?.breaks?.filter(function (brk) {\n                            let isOut = true;\n                            // Iterate to see if \"brk\" is in axis range\n                            for (let i = 0; i < breaks.length; i++) {\n                                const otherBreak = breaks[i];\n                                if (otherBreak.from === brk.from &&\n                                    otherBreak.to === brk.to) {\n                                    isOut = false;\n                                    break;\n                                }\n                            }\n                            return isOut;\n                        });\n                        points.forEach(function (point) {\n                            y = pick(point['stack' + key.toUpperCase()], point[key]);\n                            breaks.forEach(function (brk) {\n                                if (isNumber(threshold) && isNumber(y)) {\n                                    let eventName = '';\n                                    if ((threshold < brk.from && y > brk.to) ||\n                                        (threshold > brk.from && y < brk.from)) {\n                                        eventName = 'pointBreak';\n                                    }\n                                    else if ((threshold < brk.from &&\n                                        y > brk.from &&\n                                        y < brk.to) || (threshold > brk.from &&\n                                        y > brk.to &&\n                                        y < brk.from)) {\n                                        eventName = 'pointInBreak';\n                                    }\n                                    if (eventName) {\n                                        fireEvent(axis, eventName, { point, brk });\n                                    }\n                                }\n                            });\n                            breaksOutOfRange?.forEach(function (brk) {\n                                fireEvent(axis, 'pointOutsideOfBreak', { point, brk });\n                            });\n                        });\n                    });\n                }\n            }\n            /**\n             * Extend getGraphPath by identifying gaps in the data so that we\n             * can draw a gap in the line or area. This was moved from ordinal\n             * axis module to broken axis module as of #5045.\n             *\n             * @private\n             * @function Highcharts.Series#gappedPath\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Gapped path\n             */\n            function seriesGappedPath() {\n                const currentDataGrouping = this.currentDataGrouping, groupingSize = currentDataGrouping?.gapSize, points = this.points.slice(), yAxis = this.yAxis;\n                let gapSize = this.options.gapSize, i = points.length - 1, stack;\n                /**\n                 * Defines when to display a gap in the graph, together with the\n                 * [gapUnit](plotOptions.series.gapUnit) option.\n                 *\n                 * In case when `dataGrouping` is enabled, points can be grouped\n                 * into a larger time span. This can make the grouped points to\n                 * have a greater distance than the absolute value of `gapSize`\n                 * property, which will result in disappearing graph completely.\n                 * To prevent this situation the mentioned distance between\n                 * grouped points is used instead of previously defined\n                 * `gapSize`.\n                 *\n                 * In practice, this option is most often used to visualize gaps\n                 * in time series. In a stock chart, intraday data is available\n                 * for daytime hours, while gaps will appear in nights and\n                 * weekends.\n                 *\n                 * @see [gapUnit](plotOptions.series.gapUnit)\n                 * @see [xAxis.breaks](#xAxis.breaks)\n                 *\n                 * @sample {highstock} stock/plotoptions/series-gapsize/\n                 * Setting the gap size to 2 introduces gaps for weekends in\n                 * daily datasets.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @product   highstock\n                 * @requires  modules/broken-axis\n                 * @apioption plotOptions.series.gapSize\n                 */\n                /**\n                 * Together with [gapSize](plotOptions.series.gapSize), this\n                 * option defines where to draw gaps in the graph.\n                 *\n                 * When the `gapUnit` is `\"relative\"` (default), a gap size of 5\n                 * means that if the distance between two points is greater than\n                 * 5 times that of the two closest points, the graph will be\n                 * broken.\n                 *\n                 * When the `gapUnit` is `\"value\"`, the gap is based on absolute\n                 * axis values, which on a datetime axis is milliseconds. This\n                 * also applies to the navigator series that inherits gap\n                 * options from the base series.\n                 *\n                 * @see [gapSize](plotOptions.series.gapSize)\n                 *\n                 * @type       {string}\n                 * @default    relative\n                 * @since      5.0.13\n                 * @product    highstock\n                 * @validvalue [\"relative\", \"value\"]\n                 * @requires   modules/broken-axis\n                 * @apioption  plotOptions.series.gapUnit\n                 */\n                if (gapSize && i > 0) { // #5008\n                    // Gap unit is relative\n                    if (this.options.gapUnit !== 'value') {\n                        gapSize *= this.basePointRange;\n                    }\n                    // Setting a new gapSize in case dataGrouping is enabled\n                    // (#7686)\n                    if (groupingSize &&\n                        groupingSize > gapSize &&\n                        // Except when DG is forced (e.g. from other series)\n                        // and has lower granularity than actual points (#11351)\n                        groupingSize >= this.basePointRange) {\n                        gapSize = groupingSize;\n                    }\n                    // Extension for ordinal breaks\n                    let current, next;\n                    while (i--) {\n                        // Reassign next if it is not visible\n                        if (!(next && next.visible !== false)) {\n                            next = points[i + 1];\n                        }\n                        current = points[i];\n                        // Skip iteration if one of the points is not visible\n                        if (next.visible === false || current.visible === false) {\n                            continue;\n                        }\n                        if (next.x - current.x > gapSize) {\n                            const xRange = (current.x + next.x) / 2;\n                            points.splice(// Insert after this one\n                            i + 1, 0, {\n                                isNull: true,\n                                x: xRange\n                            });\n                            // For stacked chart generate empty stack items, #6546\n                            if (yAxis.stacking && this.options.stacking) {\n                                stack = yAxis.stacking.stacks[this.stackKey][xRange] = new StackItem(yAxis, yAxis.options.stackLabels, false, xRange, this.stack);\n                                stack.total = 0;\n                            }\n                        }\n                        // Assign current to next for the upcoming iteration\n                        next = current;\n                    }\n                }\n                // Call base method\n                return this.getGraphPath(points);\n            }\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Provides support for broken axes.\n             * @private\n             * @class\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                static isInBreak(brk, val) {\n                    const repeat = brk.repeat || Infinity, from = brk.from, length = brk.to - brk.from, test = (val >= from ?\n                        (val - from) % repeat :\n                        repeat - ((from - val) % repeat));\n                    let ret;\n                    if (!brk.inclusive) {\n                        ret = test < length && test !== 0;\n                    }\n                    else {\n                        ret = test <= length;\n                    }\n                    return ret;\n                }\n                /**\n                 * @private\n                 */\n                static lin2Val(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.from >= nval) {\n                            break;\n                        }\n                        else if (brk.to < nval) {\n                            nval += brk.len;\n                        }\n                        else if (Additions.isInBreak(brk, nval)) {\n                            nval += brk.len;\n                        }\n                    }\n                    return nval;\n                }\n                /**\n                 * @private\n                 */\n                static val2Lin(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.to <= val) {\n                            nval -= brk.len;\n                        }\n                        else if (brk.from >= val) {\n                            break;\n                        }\n                        else if (Additions.isInBreak(brk, val)) {\n                            nval -= (val - brk.from);\n                            break;\n                        }\n                    }\n                    return nval;\n                }\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                constructor(axis) {\n                    this.hasBreaks = false;\n                    this.axis = axis;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Returns the first break found where the x is larger then break.from\n                 * and smaller then break.to.\n                 *\n                 * @param {number} x\n                 * The number which should be within a break.\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} breaks\n                 * The array of breaks to search within.\n                 *\n                 * @return {Highcharts.XAxisBreaksOptions|undefined}\n                 * Returns the first break found that matches, returns false if no break\n                 * is found.\n                 */\n                findBreakAt(x, breaks) {\n                    return find(breaks, function (b) {\n                        return b.from < x && x < b.to;\n                    });\n                }\n                /**\n                 * @private\n                 */\n                isInAnyBreak(val, testKeep) {\n                    const brokenAxis = this, axis = brokenAxis.axis, breaks = axis.options.breaks || [];\n                    let i = breaks.length, inbrk, keep, ret;\n                    if (i && isNumber(val)) {\n                        while (i--) {\n                            if (Additions.isInBreak(breaks[i], val)) {\n                                inbrk = true;\n                                if (!keep) {\n                                    keep = pick(breaks[i].showPoints, !axis.isXAxis);\n                                }\n                            }\n                        }\n                        if (inbrk && testKeep) {\n                            ret = inbrk && !keep;\n                        }\n                        else {\n                            ret = inbrk;\n                        }\n                    }\n                    return ret;\n                }\n                /**\n                 * Dynamically set or unset breaks in an axis. This function in lighter\n                 * than using Axis.update, and it also preserves animation.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#setBreaks\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} [breaks]\n                 * The breaks to add. When `undefined` it removes existing breaks.\n                 *\n                 * @param {boolean} [redraw=true]\n                 * Whether to redraw the chart immediately.\n                 */\n                setBreaks(breaks, redraw) {\n                    const brokenAxis = this;\n                    const axis = brokenAxis.axis;\n                    const hasBreaks = isArray(breaks) &&\n                        !!breaks.length &&\n                        !!Object.keys(breaks[0]).length; // Check for [{}], #16368.\n                    axis.isDirty = brokenAxis.hasBreaks !== hasBreaks;\n                    brokenAxis.hasBreaks = hasBreaks;\n                    if (breaks !== axis.options.breaks) {\n                        axis.options.breaks = axis.userOptions.breaks = breaks;\n                    }\n                    axis.forceRedraw = true; // Force recalculation in setScale\n                    // Recalculate series related to the axis.\n                    axis.series.forEach(function (series) {\n                        series.isDirty = true;\n                    });\n                    if (!hasBreaks && axis.val2lin === Additions.val2Lin) {\n                        // Revert to prototype functions\n                        delete axis.val2lin;\n                        delete axis.lin2val;\n                    }\n                    if (hasBreaks) {\n                        axis.userOptions.ordinal = false;\n                        axis.lin2val = Additions.lin2Val;\n                        axis.val2lin = Additions.val2Lin;\n                        axis.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {\n                            // If trying to set extremes inside a break, extend min to\n                            // after, and max to before the break ( #3857 )\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = (this.options.breaks || []);\n                                let axisBreak;\n                                while ((axisBreak = brokenAxis.findBreakAt(newMin, breaks))) {\n                                    newMin = axisBreak.to;\n                                }\n                                while ((axisBreak = brokenAxis.findBreakAt(newMax, breaks))) {\n                                    newMax = axisBreak.from;\n                                }\n                                // If both min and max is within the same break.\n                                if (newMax < newMin) {\n                                    newMax = newMin;\n                                }\n                            }\n                            axis.constructor.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);\n                        };\n                        axis.setAxisTranslation = function () {\n                            axis.constructor.prototype.setAxisTranslation.call(this);\n                            brokenAxis.unitLength = void 0;\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = axis.options.breaks || [], \n                                // Temporary one:\n                                breakArrayT = [], breakArray = [], pointRangePadding = pick(axis.pointRangePadding, 0);\n                                let length = 0, inBrk, repeat, min = axis.userMin || axis.min, max = axis.userMax || axis.max, start, i;\n                                // Min & max check (#4247)\n                                breaks.forEach(function (brk) {\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        if (Additions.isInBreak(brk, min)) {\n                                            min += ((brk.to % repeat) -\n                                                (min % repeat));\n                                        }\n                                        if (Additions.isInBreak(brk, max)) {\n                                            max -= ((max % repeat) -\n                                                (brk.from % repeat));\n                                        }\n                                    }\n                                });\n                                // Construct an array holding all breaks in the axis\n                                breaks.forEach(function (brk) {\n                                    start = brk.from;\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        while (start - repeat > min) {\n                                            start -= repeat;\n                                        }\n                                        while (start < min) {\n                                            start += repeat;\n                                        }\n                                        for (i = start; i < max; i += repeat) {\n                                            breakArrayT.push({\n                                                value: i,\n                                                move: 'in'\n                                            });\n                                            breakArrayT.push({\n                                                value: i + brk.to - brk.from,\n                                                move: 'out',\n                                                size: brk.breakSize\n                                            });\n                                        }\n                                    }\n                                });\n                                breakArrayT.sort(function (a, b) {\n                                    return ((a.value === b.value) ?\n                                        ((a.move === 'in' ? 0 : 1) -\n                                            (b.move === 'in' ? 0 : 1)) :\n                                        a.value - b.value);\n                                });\n                                // Simplify the breaks\n                                inBrk = 0;\n                                start = min;\n                                breakArrayT.forEach(function (brk) {\n                                    inBrk += (brk.move === 'in' ? 1 : -1);\n                                    if (inBrk === 1 && brk.move === 'in') {\n                                        start = brk.value;\n                                    }\n                                    if (inBrk === 0 && isNumber(start)) {\n                                        breakArray.push({\n                                            from: start,\n                                            to: brk.value,\n                                            len: brk.value - start - (brk.size || 0)\n                                        });\n                                        length += (brk.value -\n                                            start -\n                                            (brk.size || 0));\n                                    }\n                                });\n                                brokenAxis.breakArray = breakArray;\n                                // Used with staticScale, and below the actual axis\n                                // length, when breaks are subtracted.\n                                if (isNumber(min) &&\n                                    isNumber(max) &&\n                                    isNumber(axis.min)) {\n                                    brokenAxis.unitLength = max - min - length +\n                                        pointRangePadding;\n                                    fireEvent(axis, 'afterBreaks');\n                                    if (axis.staticScale) {\n                                        axis.transA = axis.staticScale;\n                                    }\n                                    else if (brokenAxis.unitLength) {\n                                        axis.transA *=\n                                            (max - axis.min + pointRangePadding) /\n                                                brokenAxis.unitLength;\n                                    }\n                                    if (pointRangePadding) {\n                                        axis.minPixelPadding =\n                                            axis.transA * (axis.minPointOffset || 0);\n                                    }\n                                    axis.min = min;\n                                    axis.max = max;\n                                }\n                            }\n                        };\n                    }\n                    if (pick(redraw, true)) {\n                        axis.chart.redraw();\n                    }\n                }\n            }\n            BrokenAxis.Additions = Additions;\n        })(BrokenAxis || (BrokenAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BrokenAxis;\n    });\n    _registerModule(_modules, 'Core/Axis/GridAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (Axis, H, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { dateFormats } = H;\n        const { addEvent, defined, erase, find, isArray, isNumber, merge, pick, timeUnits, wrap } = U;\n        /* *\n         *\n         *  Enums\n         *\n         * */\n        /**\n         * Enum for which side the axis is on. Maps to axis.side.\n         * @private\n         */\n        var GridAxisSide;\n        (function (GridAxisSide) {\n            GridAxisSide[GridAxisSide[\"top\"] = 0] = \"top\";\n            GridAxisSide[GridAxisSide[\"right\"] = 1] = \"right\";\n            GridAxisSide[GridAxisSide[\"bottom\"] = 2] = \"bottom\";\n            GridAxisSide[GridAxisSide[\"left\"] = 3] = \"left\";\n        })(GridAxisSide || (GridAxisSide = {}));\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function argsToArray(args) {\n            return Array.prototype.slice.call(args, 1);\n        }\n        /**\n         * @private\n         */\n        function isObject(x) {\n            // Always use strict mode\n            return U.isObject(x, true);\n        }\n        /**\n         * @private\n         */\n        function applyGridOptions(axis) {\n            const options = axis.options;\n            // Center-align by default\n            /*\n            if (!options.labels) {\n                options.labels = {};\n            }\n            */\n            options.labels.align = pick(options.labels.align, 'center');\n            // @todo: Check against tickLabelPlacement between/on etc\n            /* Prevents adding the last tick label if the axis is not a category\n               axis.\n               Since numeric labels are normally placed at starts and ends of a\n               range of value, and this module makes the label point at the value,\n               an \"extra\" label would appear. */\n            if (!axis.categories) {\n                options.showLastLabel = false;\n            }\n            // Prevents rotation of labels when squished, as rotating them would not\n            // help.\n            axis.labelRotation = 0;\n            options.labels.rotation = 0;\n            // Allow putting ticks closer than their data points.\n            options.minTickInterval = 1;\n        }\n        /**\n         * Extends axis class with grid support.\n         * @private\n         */\n        function compose(AxisClass, ChartClass, TickClass) {\n            if (!AxisClass.keepProps.includes('grid')) {\n                AxisClass.keepProps.push('grid');\n                AxisClass.prototype.getMaxLabelDimensions = getMaxLabelDimensions;\n                wrap(AxisClass.prototype, 'unsquish', wrapUnsquish);\n                wrap(AxisClass.prototype, 'getOffset', wrapGetOffset);\n                // Add event handlers\n                addEvent(AxisClass, 'init', onInit);\n                addEvent(AxisClass, 'afterGetTitlePosition', onAfterGetTitlePosition);\n                addEvent(AxisClass, 'afterInit', onAfterInit);\n                addEvent(AxisClass, 'afterRender', onAfterRender);\n                addEvent(AxisClass, 'afterSetAxisTranslation', onAfterSetAxisTranslation);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions2);\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                addEvent(AxisClass, 'afterTickSize', onAfterTickSize);\n                addEvent(AxisClass, 'trimTicks', onTrimTicks);\n                addEvent(AxisClass, 'destroy', onDestroy);\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n                addEvent(TickClass, 'afterGetLabelPosition', onTickAfterGetLabelPosition);\n                addEvent(TickClass, 'labelFormat', onTickLabelFormat);\n            }\n            return AxisClass;\n        }\n        /**\n         * Get the largest label width and height.\n         *\n         * @private\n         * @function Highcharts.Axis#getMaxLabelDimensions\n         *\n         * @param {Highcharts.Dictionary<Highcharts.Tick>} ticks\n         * All the ticks on one axis.\n         *\n         * @param {Array<number|string>} tickPositions\n         * All the tick positions on one axis.\n         *\n         * @return {Highcharts.SizeObject}\n         * Object containing the properties height and width.\n         *\n         * @todo Move this to the generic axis implementation, as it is used there.\n         */\n        function getMaxLabelDimensions(ticks, tickPositions) {\n            const dimensions = {\n                width: 0,\n                height: 0\n            };\n            tickPositions.forEach(function (pos) {\n                const tick = ticks[pos];\n                let labelHeight = 0, labelWidth = 0, label;\n                if (isObject(tick)) {\n                    label = isObject(tick.label) ? tick.label : {};\n                    // Find width and height of label\n                    labelHeight = label.getBBox ? label.getBBox().height : 0;\n                    if (label.textStr && !isNumber(label.textPxLength)) {\n                        label.textPxLength = label.getBBox().width;\n                    }\n                    labelWidth = isNumber(label.textPxLength) ?\n                        // Math.round ensures crisp lines\n                        Math.round(label.textPxLength) :\n                        0;\n                    if (label.textStr) {\n                        // Set the tickWidth same as the label width after ellipsis\n                        // applied #10281\n                        labelWidth = Math.round(label.getBBox().width);\n                    }\n                    // Update the result if width and/or height are larger\n                    dimensions.height = Math.max(labelHeight, dimensions.height);\n                    dimensions.width = Math.max(labelWidth, dimensions.width);\n                }\n            });\n            // For tree grid, add indentation\n            if (this.options.type === 'treegrid' &&\n                this.treeGrid &&\n                this.treeGrid.mapOfPosToGridNode) {\n                const treeDepth = this.treeGrid.mapOfPosToGridNode[-1].height || 0;\n                dimensions.width += (this.options.labels.indentation *\n                    (treeDepth - 1));\n            }\n            return dimensions;\n        }\n        /**\n         * Handle columns and getOffset.\n         * @private\n         */\n        function wrapGetOffset(proceed) {\n            const { grid } = this, \n            // On the left side we handle the columns first because the offset is\n            // calculated from the plot area and out\n            columnsFirst = this.side === 3;\n            if (!columnsFirst) {\n                proceed.apply(this);\n            }\n            if (!grid?.isColumn) {\n                let columns = grid?.columns || [];\n                if (columnsFirst) {\n                    columns = columns.slice().reverse();\n                }\n                columns\n                    .forEach((column) => {\n                    column.getOffset();\n                });\n            }\n            if (columnsFirst) {\n                proceed.apply(this);\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterGetTitlePosition(e) {\n            const axis = this;\n            const options = axis.options;\n            const gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                // Compute anchor points for each of the title align options\n                const { axisTitle, height: axisHeight, horiz, left: axisLeft, offset, opposite, options, top: axisTop, width: axisWidth } = axis;\n                const tickSize = axis.tickSize();\n                const titleWidth = axisTitle && axisTitle.getBBox().width;\n                const xOption = options.title.x;\n                const yOption = options.title.y;\n                const titleMargin = pick(options.title.margin, horiz ? 5 : 10);\n                const titleFontSize = axisTitle ? axis.chart.renderer.fontMetrics(axisTitle).f : 0;\n                const crispCorr = tickSize ? tickSize[0] / 2 : 0;\n                // TODO account for alignment\n                // the position in the perpendicular direction of the axis\n                const offAxis = ((horiz ? axisTop + axisHeight : axisLeft) +\n                    (horiz ? 1 : -1) * // Horizontal axis reverses the margin\n                        (opposite ? -1 : 1) * // So does opposite axes\n                        crispCorr +\n                    (axis.side === GridAxisSide.bottom ? titleFontSize : 0));\n                e.titlePosition.x = horiz ?\n                    axisLeft - (titleWidth || 0) / 2 - titleMargin + xOption :\n                    offAxis + (opposite ? axisWidth : 0) + offset + xOption;\n                e.titlePosition.y = horiz ?\n                    (offAxis -\n                        (opposite ? axisHeight : 0) +\n                        (opposite ? titleFontSize : -titleFontSize) / 2 +\n                        offset +\n                        yOption) :\n                    axisTop - titleMargin + yOption;\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterInit() {\n            const axis = this;\n            const { chart, options: { grid: gridOptions = {} }, userOptions } = axis;\n            if (gridOptions.enabled) {\n                applyGridOptions(axis);\n            }\n            if (gridOptions.columns) {\n                const columns = axis.grid.columns = [];\n                let columnIndex = axis.grid.columnIndex = 0;\n                // Handle columns, each column is a grid axis\n                while (++columnIndex < gridOptions.columns.length) {\n                    const columnOptions = merge(userOptions, gridOptions.columns[columnIndex], {\n                        isInternal: true,\n                        linkedTo: 0,\n                        // Disable by default the scrollbar on the grid axis\n                        scrollbar: {\n                            enabled: false\n                        }\n                    }, \n                    // Avoid recursion\n                    {\n                        grid: {\n                            columns: void 0\n                        }\n                    });\n                    const column = new Axis(axis.chart, columnOptions, 'yAxis');\n                    column.grid.isColumn = true;\n                    column.grid.columnIndex = columnIndex;\n                    // Remove column axis from chart axes array, and place it\n                    // in the columns array.\n                    erase(chart.axes, column);\n                    erase(chart[axis.coll] || [], column);\n                    columns.push(column);\n                }\n            }\n        }\n        /**\n         * Draw an extra line on the far side of the outermost axis,\n         * creating floor/roof/wall of a grid. And some padding.\n         * ```\n         * Make this:\n         *             (axis.min) __________________________ (axis.max)\n         *                           |    |    |    |    |\n         * Into this:\n         *             (axis.min) __________________________ (axis.max)\n         *                        ___|____|____|____|____|__\n         * ```\n         * @private\n         */\n        function onAfterRender() {\n            const axis = this, { axisTitle, grid, options } = axis, gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                const min = axis.min || 0, max = axis.max || 0, firstTick = axis.ticks[axis.tickPositions[0]];\n                // Adjust the title max width to the column width (#19657)\n                if (axisTitle &&\n                    !axis.chart.styledMode &&\n                    firstTick?.slotWidth &&\n                    !axis.options.title.style.width) {\n                    axisTitle.css({ width: `${firstTick.slotWidth}px` });\n                }\n                // @todo actual label padding (top, bottom, left, right)\n                axis.maxLabelDimensions = axis.getMaxLabelDimensions(axis.ticks, axis.tickPositions);\n                // Remove right wall before rendering if updating\n                if (axis.rightWall) {\n                    axis.rightWall.destroy();\n                }\n                /*\n                Draw an extra axis line on outer axes\n                            >\n                Make this:    |______|______|______|___\n\n                            > _________________________\n                Into this:    |______|______|______|__|\n                                                        */\n                if (axis.grid && axis.grid.isOuterAxis() && axis.axisLine) {\n                    const lineWidth = options.lineWidth;\n                    if (lineWidth) {\n                        const linePath = axis.getLinePath(lineWidth), startPoint = linePath[0], endPoint = linePath[1], \n                        // Negate distance if top or left axis\n                        // Subtract 1px to draw the line at the end of the tick\n                        tickLength = (axis.tickSize('tick') || [1])[0], distance = tickLength * ((axis.side === GridAxisSide.top ||\n                            axis.side === GridAxisSide.left) ? -1 : 1);\n                        // If axis is horizontal, reposition line path vertically\n                        if (startPoint[0] === 'M' && endPoint[0] === 'L') {\n                            if (axis.horiz) {\n                                startPoint[2] += distance;\n                                endPoint[2] += distance;\n                            }\n                            else {\n                                startPoint[1] += distance;\n                                endPoint[1] += distance;\n                            }\n                        }\n                        // If it doesn't exist, add an upper and lower border\n                        // for the vertical grid axis.\n                        if (!axis.horiz && axis.chart.marginRight) {\n                            const upperBorderStartPoint = startPoint, upperBorderEndPoint = [\n                                'L',\n                                axis.left,\n                                startPoint[2] || 0\n                            ], upperBorderPath = [\n                                upperBorderStartPoint,\n                                upperBorderEndPoint\n                            ], lowerBorderEndPoint = [\n                                'L',\n                                axis.chart.chartWidth - axis.chart.marginRight,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderStartPoint = [\n                                'M',\n                                endPoint[1] || 0,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderPath = [\n                                lowerBorderStartPoint,\n                                lowerBorderEndPoint\n                            ];\n                            if (!axis.grid.upperBorder && min % 1 !== 0) {\n                                axis.grid.upperBorder = axis.grid.renderBorder(upperBorderPath);\n                            }\n                            if (axis.grid.upperBorder) {\n                                axis.grid.upperBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.upperBorder.animate({\n                                    d: upperBorderPath\n                                });\n                            }\n                            if (!axis.grid.lowerBorder && max % 1 !== 0) {\n                                axis.grid.lowerBorder = axis.grid.renderBorder(lowerBorderPath);\n                            }\n                            if (axis.grid.lowerBorder) {\n                                axis.grid.lowerBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.lowerBorder.animate({\n                                    d: lowerBorderPath\n                                });\n                            }\n                        }\n                        // Render an extra line parallel to the existing axes, to\n                        // close the grid.\n                        if (!axis.grid.axisLineExtra) {\n                            axis.grid.axisLineExtra = axis.grid.renderBorder(linePath);\n                        }\n                        else {\n                            axis.grid.axisLineExtra.attr({\n                                stroke: options.lineColor,\n                                'stroke-width': options.lineWidth\n                            });\n                            axis.grid.axisLineExtra.animate({\n                                d: linePath\n                            });\n                        }\n                        // Show or hide the line depending on options.showEmpty\n                        axis.axisLine[axis.showAxis ? 'show' : 'hide']();\n                    }\n                }\n                (grid && grid.columns || []).forEach((column) => column.render());\n                // Manipulate the tick mark visibility\n                // based on the axis.max- allows smooth scrolling.\n                if (!axis.horiz &&\n                    axis.chart.hasRendered &&\n                    (axis.scrollbar ||\n                        (axis.linkedParent && axis.linkedParent.scrollbar)) &&\n                    axis.tickPositions.length) {\n                    const tickmarkOffset = axis.tickmarkOffset, lastTick = axis.tickPositions[axis.tickPositions.length - 1], firstTick = axis.tickPositions[0];\n                    let label, tickMark;\n                    while ((label = axis.hiddenLabels.pop()) && label.element) {\n                        label.show(); // #15453\n                    }\n                    while ((tickMark = axis.hiddenMarks.pop()) &&\n                        tickMark.element) {\n                        tickMark.show(); // #16439\n                    }\n                    // Hide/show first tick label.\n                    label = axis.ticks[firstTick].label;\n                    if (label) {\n                        if (min - firstTick > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    // Hide/show last tick mark/label.\n                    label = axis.ticks[lastTick].label;\n                    if (label) {\n                        if (lastTick - max > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    const mark = axis.ticks[lastTick].mark;\n                    if (mark &&\n                        lastTick - max < tickmarkOffset &&\n                        lastTick - max > 0 && axis.ticks[lastTick].isLast) {\n                        axis.hiddenMarks.push(mark.hide());\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetAxisTranslation() {\n            const axis = this;\n            const tickInfo = axis.tickPositions && axis.tickPositions.info;\n            const options = axis.options;\n            const gridOptions = options.grid || {};\n            const userLabels = axis.userOptions.labels || {};\n            // Fire this only for the Gantt type chart, #14868.\n            if (gridOptions.enabled) {\n                if (axis.horiz) {\n                    axis.series.forEach((series) => {\n                        series.options.pointRange = 0;\n                    });\n                    // Lower level time ticks, like hours or minutes, represent\n                    // points in time and not ranges. These should be aligned\n                    // left in the grid cell by default. The same applies to\n                    // years of higher order.\n                    if (tickInfo &&\n                        options.dateTimeLabelFormats &&\n                        options.labels &&\n                        !defined(userLabels.align) &&\n                        (options.dateTimeLabelFormats[tickInfo.unitName]\n                            .range === false ||\n                            tickInfo.count > 1 // Years\n                        )) {\n                        options.labels.align = 'left';\n                        if (!defined(userLabels.x)) {\n                            options.labels.x = 3;\n                        }\n                    }\n                }\n                else {\n                    // Don't trim ticks which not in min/max range but\n                    // they are still in the min/max plus tickInterval.\n                    if (this.options.type !== 'treegrid' &&\n                        axis.grid &&\n                        axis.grid.columns) {\n                        this.minPointOffset = this.tickInterval;\n                    }\n                }\n            }\n        }\n        /**\n         * Creates a left and right wall on horizontal axes:\n         * - Places leftmost tick at the start of the axis, to create a left\n         *   wall\n         * - Ensures that the rightmost tick is at the end of the axis, to\n         *   create a right wall.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            const options = this.options, userOptions = e.userOptions, gridOptions = ((options && isObject(options.grid)) ? options.grid : {});\n            let gridAxisOptions;\n            if (gridOptions.enabled === true) {\n                // Merge the user options into default grid axis options so\n                // that when a user option is set, it takes precedence.\n                gridAxisOptions = merge(true, {\n                    className: ('highcharts-grid-axis ' + (userOptions.className || '')),\n                    dateTimeLabelFormats: {\n                        hour: {\n                            list: ['%H:%M', '%H']\n                        },\n                        day: {\n                            list: ['%A, %e. %B', '%a, %e. %b', '%E']\n                        },\n                        week: {\n                            list: ['Week %W', 'W%W']\n                        },\n                        month: {\n                            list: ['%B', '%b', '%o']\n                        }\n                    },\n                    grid: {\n                        borderWidth: 1\n                    },\n                    labels: {\n                        padding: 2,\n                        style: {\n                            fontSize: '0.9em'\n                        }\n                    },\n                    margin: 0,\n                    title: {\n                        text: null,\n                        reserveSpace: false,\n                        rotation: 0,\n                        style: {\n                            textOverflow: 'ellipsis'\n                        }\n                    },\n                    // In a grid axis, only allow one unit of certain types,\n                    // for example we shouldn't have one grid cell spanning\n                    // two days.\n                    units: [[\n                            'millisecond', // Unit name\n                            [1, 10, 100]\n                        ], [\n                            'second',\n                            [1, 10]\n                        ], [\n                            'minute',\n                            [1, 5, 15]\n                        ], [\n                            'hour',\n                            [1, 6]\n                        ], [\n                            'day',\n                            [1]\n                        ], [\n                            'week',\n                            [1]\n                        ], [\n                            'month',\n                            [1]\n                        ], [\n                            'year',\n                            null\n                        ]]\n                }, userOptions);\n                // X-axis specific options\n                if (this.coll === 'xAxis') {\n                    // For linked axes, tickPixelInterval is used only if\n                    // the tickPositioner below doesn't run or returns\n                    // undefined (like multiple years)\n                    if (defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPixelInterval)) {\n                        gridAxisOptions.tickPixelInterval = 350;\n                    }\n                    // For the secondary grid axis, use the primary axis'\n                    // tick intervals and return ticks one level higher.\n                    if (\n                    // Check for tick pixel interval in options\n                    !defined(userOptions.tickPixelInterval) &&\n                        // Only for linked axes\n                        defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPositioner) &&\n                        !defined(userOptions.tickInterval) &&\n                        !defined(userOptions.units)) {\n                        gridAxisOptions.tickPositioner = function (min, max) {\n                            const parentInfo = (this.linkedParent &&\n                                this.linkedParent.tickPositions &&\n                                this.linkedParent.tickPositions.info);\n                            if (parentInfo) {\n                                const units = (gridAxisOptions.units || []);\n                                let unitIdx, count = 1, unitName = 'year';\n                                for (let i = 0; i < units.length; i++) {\n                                    const unit = units[i];\n                                    if (unit && unit[0] === parentInfo.unitName) {\n                                        unitIdx = i;\n                                        break;\n                                    }\n                                }\n                                // Get the first allowed count on the next unit.\n                                const unit = (isNumber(unitIdx) && units[unitIdx + 1]);\n                                if (unit) {\n                                    unitName = unit[0] || 'year';\n                                    const counts = unit[1];\n                                    count = counts && counts[0] || 1;\n                                    // In case the base X axis shows years, make the\n                                    // secondary axis show ten times the years (#11427)\n                                }\n                                else if (parentInfo.unitName === 'year') {\n                                    // `unitName` is 'year'\n                                    count = parentInfo.count * 10;\n                                }\n                                const unitRange = timeUnits[unitName];\n                                this.tickInterval = unitRange * count;\n                                return this.chart.time.getTimeTicks({ unitRange, count, unitName }, min, max, this.options.startOfWeek);\n                            }\n                        };\n                    }\n                }\n                // Now merge the combined options into the axis options\n                merge(true, this.options, gridAxisOptions);\n                if (this.horiz) {\n                    /*               _________________________\n                    Make this:    ___|_____|_____|_____|__|\n                                    ^                     ^\n                                    _________________________\n                    Into this:    |_____|_____|_____|_____|\n                                        ^                 ^    */\n                    options.minPadding = pick(userOptions.minPadding, 0);\n                    options.maxPadding = pick(userOptions.maxPadding, 0);\n                }\n                // If borderWidth is set, then use its value for tick and\n                // line width.\n                if (isNumber(options.grid.borderWidth)) {\n                    options.tickWidth = options.lineWidth =\n                        gridOptions.borderWidth;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetOptions2(e) {\n            const axis = this;\n            const userOptions = e.userOptions;\n            const gridOptions = userOptions && userOptions.grid || {};\n            const columns = gridOptions.columns;\n            // Add column options to the parent axis. Children has their column options\n            // set on init in onGridAxisAfterInit.\n            if (gridOptions.enabled && columns) {\n                merge(true, axis.options, columns[0]);\n            }\n        }\n        /**\n         * Handle columns and setScale.\n         * @private\n         */\n        function onAfterSetScale() {\n            const axis = this;\n            (axis.grid.columns || []).forEach((column) => column.setScale());\n        }\n        /**\n         * Draw vertical axis ticks extra long to create cell floors and roofs.\n         * Overrides the tickLength for vertical axes.\n         * @private\n         */\n        function onAfterTickSize(e) {\n            const { horiz, maxLabelDimensions, options: { grid: gridOptions = {} } } = this;\n            if (gridOptions.enabled && maxLabelDimensions) {\n                const labelPadding = this.options.labels.distance * 2;\n                const distance = horiz ?\n                    (gridOptions.cellHeight ||\n                        labelPadding + maxLabelDimensions.height) :\n                    labelPadding + maxLabelDimensions.width;\n                if (isArray(e.tickSize)) {\n                    e.tickSize[0] = distance;\n                }\n                else {\n                    e.tickSize = [distance, 0];\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            this.axes.forEach((axis) => {\n                (axis.grid && axis.grid.columns || []).forEach((column) => {\n                    column.setAxisSize();\n                    column.setAxisTranslation();\n                });\n            });\n        }\n        /**\n         * @private\n         */\n        function onDestroy(e) {\n            const { grid } = this;\n            (grid.columns || []).forEach((column) => column.destroy(e.keepEvents));\n            grid.columns = void 0;\n        }\n        /**\n         * Wraps axis init to draw cell walls on vertical axes.\n         * @private\n         */\n        function onInit(e) {\n            const axis = this;\n            const userOptions = e.userOptions || {};\n            const gridOptions = userOptions.grid || {};\n            if (gridOptions.enabled && defined(gridOptions.borderColor)) {\n                userOptions.tickColor = userOptions.lineColor = (gridOptions.borderColor);\n            }\n            if (!axis.grid) {\n                axis.grid = new GridAxisAdditions(axis);\n            }\n            axis.hiddenLabels = [];\n            axis.hiddenMarks = [];\n        }\n        /**\n         * Center tick labels in cells.\n         * @private\n         */\n        function onTickAfterGetLabelPosition(e) {\n            const tick = this, label = tick.label, axis = tick.axis, reversed = axis.reversed, chart = axis.chart, options = axis.options, gridOptions = options.grid || {}, labelOpts = axis.options.labels, align = labelOpts.align, \n            // `verticalAlign` is currently not supported for axis.labels.\n            verticalAlign = 'middle', // LabelOpts.verticalAlign,\n            side = GridAxisSide[axis.side], tickmarkOffset = e.tickmarkOffset, tickPositions = axis.tickPositions, tickPos = tick.pos - tickmarkOffset, nextTickPos = (isNumber(tickPositions[e.index + 1]) ?\n                tickPositions[e.index + 1] - tickmarkOffset :\n                (axis.max || 0) + tickmarkOffset), tickSize = axis.tickSize('tick'), tickWidth = tickSize ? tickSize[0] : 0, crispCorr = tickSize ? tickSize[1] / 2 : 0;\n            // Only center tick labels in grid axes\n            if (gridOptions.enabled === true) {\n                let bottom, top, left, right;\n                // Calculate top and bottom positions of the cell.\n                if (side === 'top') {\n                    bottom = axis.top + axis.offset;\n                    top = bottom - tickWidth;\n                }\n                else if (side === 'bottom') {\n                    top = chart.chartHeight - axis.bottom + axis.offset;\n                    bottom = top + tickWidth;\n                }\n                else {\n                    bottom = axis.top + axis.len - (axis.translate(reversed ? nextTickPos : tickPos) || 0);\n                    top = axis.top + axis.len - (axis.translate(reversed ? tickPos : nextTickPos) || 0);\n                }\n                // Calculate left and right positions of the cell.\n                if (side === 'right') {\n                    left = chart.chartWidth - axis.right + axis.offset;\n                    right = left + tickWidth;\n                }\n                else if (side === 'left') {\n                    right = axis.left + axis.offset;\n                    left = right - tickWidth;\n                }\n                else {\n                    left = Math.round(axis.left + (axis.translate(reversed ? nextTickPos : tickPos) || 0)) - crispCorr;\n                    right = Math.min(// #15742\n                    Math.round(axis.left + (axis.translate(reversed ? tickPos : nextTickPos) || 0)) - crispCorr, axis.left + axis.len);\n                }\n                tick.slotWidth = right - left;\n                // Calculate the positioning of the label based on\n                // alignment.\n                e.pos.x = (align === 'left' ?\n                    left :\n                    align === 'right' ?\n                        right :\n                        left + ((right - left) / 2) // Default to center\n                );\n                e.pos.y = (verticalAlign === 'top' ?\n                    top :\n                    verticalAlign === 'bottom' ?\n                        bottom :\n                        top + ((bottom - top) / 2) // Default to middle\n                );\n                if (label) {\n                    const lblMetrics = chart.renderer.fontMetrics(label), labelHeight = label.getBBox().height;\n                    // Adjustment to y position to align the label correctly.\n                    // Would be better to have a setter or similar for this.\n                    if (!labelOpts.useHTML) {\n                        const lines = Math.round(labelHeight / lblMetrics.h);\n                        e.pos.y += (\n                        // Center the label\n                        // TODO: why does this actually center the label?\n                        ((lblMetrics.b - (lblMetrics.h - lblMetrics.f)) / 2) +\n                            // Adjust for height of additional lines.\n                            -(((lines - 1) * lblMetrics.h) / 2));\n                    }\n                    else {\n                        e.pos.y += (\n                        // Readjust yCorr in htmlUpdateTransform\n                        lblMetrics.b +\n                            // Adjust for height of html label\n                            -(labelHeight / 2));\n                    }\n                }\n                e.pos.x += (axis.horiz && labelOpts.x) || 0;\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickLabelFormat(ctx) {\n            const { axis, value } = ctx;\n            if (axis.options.grid &&\n                axis.options.grid.enabled) {\n                const tickPos = axis.tickPositions;\n                const series = (axis.linkedParent || axis).series[0];\n                const isFirst = value === tickPos[0];\n                const isLast = value === tickPos[tickPos.length - 1];\n                const point = series && find(series.options.data, function (p) {\n                    return p[axis.isXAxis ? 'x' : 'y'] === value;\n                });\n                let pointCopy;\n                if (point && series.is('gantt')) {\n                    // For the Gantt set point aliases to the pointCopy\n                    // to do not change the original point\n                    pointCopy = merge(point);\n                    H.seriesTypes.gantt.prototype.pointClass\n                        .setGanttPointAliases(pointCopy);\n                }\n                // Make additional properties available for the\n                // formatter\n                ctx.isFirst = isFirst;\n                ctx.isLast = isLast;\n                ctx.point = pointCopy;\n            }\n        }\n        /**\n         * Makes tick labels which are usually ignored in a linked axis\n         * displayed if they are within range of linkedParent.min.\n         * ```\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Make this:             |   |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Into this:             | 1 |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         * ```\n         * @private\n         * @todo Does this function do what the drawing says? Seems to affect\n         *       ticks and not the labels directly?\n         */\n        function onTrimTicks() {\n            const axis = this, options = axis.options, gridOptions = options.grid || {}, categoryAxis = axis.categories, tickPositions = axis.tickPositions, firstPos = tickPositions[0], secondPos = tickPositions[1], lastPos = tickPositions[tickPositions.length - 1], beforeLastPos = tickPositions[tickPositions.length - 2], linkedMin = axis.linkedParent && axis.linkedParent.min, linkedMax = axis.linkedParent && axis.linkedParent.max, min = linkedMin || axis.min, max = linkedMax || axis.max, tickInterval = axis.tickInterval, startLessThanMin = ( // #19845\n            isNumber(min) &&\n                min >= firstPos + tickInterval &&\n                min < secondPos), endMoreThanMin = (isNumber(min) &&\n                firstPos < min &&\n                firstPos + tickInterval > min), startLessThanMax = (isNumber(max) &&\n                lastPos > max &&\n                lastPos - tickInterval < max), endMoreThanMax = (isNumber(max) &&\n                max <= lastPos - tickInterval &&\n                max > beforeLastPos);\n            if (gridOptions.enabled === true &&\n                !categoryAxis &&\n                (axis.isXAxis || axis.isLinked)) {\n                if ((endMoreThanMin || startLessThanMin) && !options.startOnTick) {\n                    tickPositions[0] = min;\n                }\n                if ((startLessThanMax || endMoreThanMax) && !options.endOnTick) {\n                    tickPositions[tickPositions.length - 1] = max;\n                }\n            }\n        }\n        /**\n         * Avoid altering tickInterval when reserving space.\n         * @private\n         */\n        function wrapUnsquish(proceed) {\n            const axis = this;\n            const { options: { grid: gridOptions = {} } } = axis;\n            if (gridOptions.enabled === true && axis.categories) {\n                return axis.tickInterval;\n            }\n            return proceed.apply(axis, argsToArray(arguments));\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Additions for grid axes.\n         * @private\n         * @class\n         */\n        class GridAxisAdditions {\n            /* *\n            *\n            *  Constructors\n            *\n            * */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Checks if an axis is the outer axis in its dimension. Since\n             * axes are placed outwards in order, the axis with the highest\n             * index is the outermost axis.\n             *\n             * Example: If there are multiple x-axes at the top of the chart,\n             * this function returns true if the axis supplied is the last\n             * of the x-axes.\n             *\n             * @private\n             *\n             * @return {boolean}\n             * True if the axis is the outermost axis in its dimension; false if\n             * not.\n             */\n            isOuterAxis() {\n                const axis = this.axis;\n                const chart = axis.chart;\n                const columnIndex = axis.grid.columnIndex;\n                const columns = (axis.linkedParent?.grid.columns ||\n                    axis.grid.columns ||\n                    []);\n                const parentAxis = columnIndex ? axis.linkedParent : axis;\n                let thisIndex = -1, lastIndex = 0;\n                // On the left side, when we have columns (not only multiple axes), the\n                // main axis is to the left\n                if (axis.side === 3 && !chart.inverted && columns.length) {\n                    return !axis.linkedParent;\n                }\n                (chart[axis.coll] || []).forEach((otherAxis, index) => {\n                    if (otherAxis.side === axis.side &&\n                        !otherAxis.options.isInternal) {\n                        lastIndex = index;\n                        if (otherAxis === parentAxis) {\n                            // Get the index of the axis in question\n                            thisIndex = index;\n                        }\n                    }\n                });\n                return (lastIndex === thisIndex &&\n                    (isNumber(columnIndex) ?\n                        columns.length === columnIndex :\n                        true));\n            }\n            /**\n             * Add extra border based on the provided path.\n             * @private\n             * @param {SVGPath} path\n             * The path of the border.\n             * @return {Highcharts.SVGElement}\n             * Border\n             */\n            renderBorder(path) {\n                const axis = this.axis, renderer = axis.chart.renderer, options = axis.options, extraBorderLine = renderer.path(path)\n                    .addClass('highcharts-axis-line')\n                    .add(axis.axisGroup);\n                if (!renderer.styledMode) {\n                    extraBorderLine.attr({\n                        stroke: options.lineColor,\n                        'stroke-width': options.lineWidth,\n                        zIndex: 7\n                    });\n                }\n                return extraBorderLine;\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        // First letter of the day of the week, e.g. 'M' for 'Monday'.\n        dateFormats.E = function (timestamp) {\n            return this.dateFormat('%a', timestamp, true).charAt(0);\n        };\n        // Adds week date format\n        dateFormats.W = function (timestamp) {\n            const time = this, d = new this.Date(timestamp), unitsToOmit = ['Hours', 'Milliseconds', 'Minutes', 'Seconds'];\n            unitsToOmit.forEach(function (format) {\n                time.set(format, d, 0);\n            });\n            const firstDay = (this.get('Day', d) + 6) % 7;\n            const thursday = new this.Date(d.valueOf());\n            this.set('Date', thursday, this.get('Date', d) - firstDay + 3);\n            const firstThursday = new this.Date(this.get('FullYear', thursday), 0, 1);\n            if (this.get('Day', firstThursday) !== 4) {\n                this.set('Month', d, 0);\n                this.set('Date', d, 1 + (11 - this.get('Day', firstThursday)) % 7);\n            }\n            return (1 +\n                Math.floor((thursday.valueOf() - firstThursday.valueOf()) / 604800000)).toString();\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const GridAxis = {\n            compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * @productdesc {gantt}\n         * For grid axes (like in Gantt charts),\n         * it is possible to declare as a list to provide different\n         * formats depending on available space.\n         *\n         * Defaults to:\n         * ```js\n         * {\n         *     hour: { list: ['%H:%M', '%H'] },\n         *     day: { list: ['%A, %e. %B', '%a, %e. %b', '%E'] },\n         *     week: { list: ['Week %W', 'W%W'] },\n         *     month: { list: ['%B', '%b', '%o'] }\n         * }\n         * ```\n         *\n         * @sample {gantt} gantt/grid-axis/date-time-label-formats\n         *         Gantt chart with custom axis date format.\n         *\n         * @apioption xAxis.dateTimeLabelFormats\n         */\n        /**\n         * Set grid options for the axis labels. Requires Highcharts Gantt.\n         *\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid\n         */\n        /**\n         * Enable grid on the axis labels. Defaults to true for Gantt charts.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid.enabled\n         */\n        /**\n         * Set specific options for each column (or row for horizontal axes) in the\n         * grid. Each extra column/row is its own axis, and the axis options can be set\n         * here.\n         *\n         * @sample gantt/demo/left-axis-table\n         *         Left axis as a table\n         * @sample gantt/demo/treegrid-columns\n         *         Collapsible tree grid with columns\n         *\n         * @type      {Array<Highcharts.XAxisOptions>}\n         * @apioption xAxis.grid.columns\n         */\n        /**\n         * Set border color for the label grid lines.\n         *\n         * @type      {Highcharts.ColorString}\n         * @default   #e6e6e6\n         * @apioption xAxis.grid.borderColor\n         */\n        /**\n         * Set border width of the label grid lines.\n         *\n         * @type      {number}\n         * @default   1\n         * @apioption xAxis.grid.borderWidth\n         */\n        /**\n         * Set cell height for grid axis labels. By default this is calculated from font\n         * size. This option only applies to horizontal axes. For vertical axes, check\n         * the [#yAxis.staticScale](yAxis.staticScale) option.\n         *\n         * @sample gantt/grid-axis/cellheight\n         *         Gant chart with custom cell height\n         * @type      {number}\n         * @apioption xAxis.grid.cellHeight\n         */\n        ''; // Keeps doclets above in JS file\n\n        return GridAxis;\n    });\n    _registerModule(_modules, 'Gantt/Tree.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { extend, isNumber, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates an object map from parent id to children's index.\n         *\n         * @private\n         * @function Highcharts.Tree#getListOfParents\n         *\n         * @param {Array<*>} data\n         *        List of points set in options. `Array.parent` is parent id of point.\n         *\n         * @return {Highcharts.Dictionary<Array<*>>}\n         * Map from parent id to children index in data\n         */\n        function getListOfParents(data) {\n            const root = '', ids = [], listOfParents = data.reduce((prev, curr) => {\n                const { parent = '', id } = curr;\n                if (typeof prev[parent] === 'undefined') {\n                    prev[parent] = [];\n                }\n                prev[parent].push(curr);\n                if (id) {\n                    ids.push(id);\n                }\n                return prev;\n            }, {});\n            Object.keys(listOfParents).forEach((node) => {\n                if ((node !== root) && (ids.indexOf(node) === -1)) {\n                    const adoptedByRoot = listOfParents[node].map(function (orphan) {\n                        const { ...parentExcluded } = orphan; // #15196\n                        return parentExcluded;\n                    });\n                    listOfParents[root].push(...adoptedByRoot);\n                    delete listOfParents[node];\n                }\n            });\n            return listOfParents;\n        }\n        /** @private */\n        function getNode(id, parent, level, data, mapOfIdToChildren, options) {\n            const after = options && options.after, before = options && options.before, node = {\n                data,\n                depth: level - 1,\n                id,\n                level,\n                parent: (parent || '')\n            };\n            let descendants = 0, height = 0, start, end;\n            // Allow custom logic before the children has been created.\n            if (typeof before === 'function') {\n                before(node, options);\n            }\n            // Call getNode recursively on the children. Calculate the height of the\n            // node, and the number of descendants.\n            const children = ((mapOfIdToChildren[id] || [])).map((child) => {\n                const node = getNode(child.id, id, (level + 1), child, mapOfIdToChildren, options), childStart = child.start || NaN, childEnd = (child.milestone === true ?\n                    childStart :\n                    child.end ||\n                        NaN);\n                // Start should be the lowest child.start.\n                start = ((!isNumber(start) || childStart < start) ?\n                    childStart :\n                    start);\n                // End should be the largest child.end.\n                // If child is milestone, then use start as end.\n                end = ((!isNumber(end) || childEnd > end) ?\n                    childEnd :\n                    end);\n                descendants = descendants + 1 + node.descendants;\n                height = Math.max(node.height + 1, height);\n                return node;\n            });\n            // Calculate start and end for point if it is not already explicitly set.\n            if (data) {\n                data.start = pick(data.start, start);\n                data.end = pick(data.end, end);\n            }\n            extend(node, {\n                children: children,\n                descendants: descendants,\n                height: height\n            });\n            // Allow custom logic after the children has been created.\n            if (typeof after === 'function') {\n                after(node, options);\n            }\n            return node;\n        }\n        /** @private */\n        function getTree(data, options) {\n            return getNode('', null, 1, null, getListOfParents(data), options);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Tree = {\n            getNode,\n            getTree\n        };\n\n        return Tree;\n    });\n    _registerModule(_modules, 'Core/Axis/TreeGrid/TreeGridTick.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, removeEvent, isObject, isNumber, pick, wrap } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onTickInit() {\n            const tick = this;\n            if (!tick.treeGrid) {\n                tick.treeGrid = new TreeGridTickAdditions(tick);\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickHover(label) {\n            label.addClass('highcharts-treegrid-node-active');\n            if (!label.renderer.styledMode) {\n                label.css({\n                    textDecoration: 'underline'\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickHoverExit(label, options) {\n            const css = isObject(options.style) ? options.style : {};\n            label.removeClass('highcharts-treegrid-node-active');\n            if (!label.renderer.styledMode) {\n                label.css({ textDecoration: (css.textDecoration || 'none') });\n            }\n        }\n        /**\n         * @private\n         */\n        function renderLabelIcon(tick, params) {\n            const treeGrid = tick.treeGrid, isNew = !treeGrid.labelIcon, renderer = params.renderer, labelBox = params.xy, options = params.options, width = options.width || 0, height = options.height || 0, padding = options.padding ?? tick.axis.linkedParent ? 0 : 5, iconCenter = {\n                x: labelBox.x - (width / 2) - padding,\n                y: labelBox.y - (height / 2)\n            }, rotation = params.collapsed ? 90 : 180, shouldRender = params.show && isNumber(iconCenter.y);\n            let icon = treeGrid.labelIcon;\n            if (!icon) {\n                treeGrid.labelIcon = icon = renderer\n                    .path(renderer.symbols[options.type](options.x || 0, options.y || 0, width, height))\n                    .addClass('highcharts-label-icon')\n                    .add(params.group);\n            }\n            // Set the new position, and show or hide\n            icon[shouldRender ? 'show' : 'hide'](); // #14904, #1338\n            // Presentational attributes\n            if (!renderer.styledMode) {\n                icon\n                    .attr({\n                    cursor: 'pointer',\n                    'fill': pick(params.color, \"#666666\" /* Palette.neutralColor60 */),\n                    'stroke-width': 1,\n                    stroke: options.lineColor,\n                    strokeWidth: options.lineWidth || 0\n                });\n            }\n            // Update the icon positions\n            icon[isNew ? 'attr' : 'animate']({\n                translateX: iconCenter.x,\n                translateY: iconCenter.y,\n                rotation: rotation\n            });\n        }\n        /**\n         * @private\n         */\n        function wrapGetLabelPosition(proceed, x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {\n            const tick = this, lbOptions = pick(tick.options && tick.options.labels, labelOptions), pos = tick.pos, axis = tick.axis, options = axis.options, isTreeGrid = options.type === 'treegrid', result = proceed.apply(tick, [x, y, label, horiz, lbOptions, tickmarkOffset, index, step]);\n            let mapOfPosToGridNode, node, level;\n            if (isTreeGrid) {\n                const { width = 0, padding = axis.linkedParent ? 0 : 5 } = (lbOptions && isObject(lbOptions.symbol, true) ?\n                    lbOptions.symbol :\n                    {}), indentation = (lbOptions && isNumber(lbOptions.indentation) ?\n                    lbOptions.indentation :\n                    0);\n                mapOfPosToGridNode = axis.treeGrid.mapOfPosToGridNode;\n                node = mapOfPosToGridNode && mapOfPosToGridNode[pos];\n                level = (node && node.depth) || 1;\n                result.x += (\n                // Add space for symbols\n                (width + (padding * 2)) +\n                    // Apply indentation\n                    ((level - 1) * indentation));\n            }\n            return result;\n        }\n        /**\n         * @private\n         */\n        function wrapRenderLabel(proceed) {\n            const tick = this, { pos, axis, label, treeGrid: tickGrid, options: tickOptions } = tick, icon = tickGrid?.labelIcon, labelElement = label?.element, { treeGrid: axisGrid, options: axisOptions, chart, tickPositions } = axis, mapOfPosToGridNode = axisGrid.mapOfPosToGridNode, labelOptions = pick(tickOptions?.labels, axisOptions?.labels), symbolOptions = (labelOptions && isObject(labelOptions.symbol, true) ?\n                labelOptions.symbol :\n                {}), node = mapOfPosToGridNode && mapOfPosToGridNode[pos], { descendants, depth } = node || {}, hasDescendants = node && descendants && descendants > 0, level = depth, isTreeGridElement = (axisOptions.type === 'treegrid') && labelElement, shouldRender = tickPositions.indexOf(pos) > -1, prefixClassName = 'highcharts-treegrid-node-', prefixLevelClass = prefixClassName + 'level-', styledMode = chart.styledMode;\n            let collapsed, addClassName, removeClassName;\n            if (isTreeGridElement && node) {\n                // Add class name for hierarchical styling.\n                label\n                    .removeClass(new RegExp(prefixLevelClass + '.*'))\n                    .addClass(prefixLevelClass + level);\n            }\n            proceed.apply(tick, Array.prototype.slice.call(arguments, 1));\n            if (isTreeGridElement && hasDescendants) {\n                collapsed = axisGrid.isCollapsed(node);\n                renderLabelIcon(tick, {\n                    color: (!styledMode &&\n                        label.styles.color ||\n                        ''),\n                    collapsed: collapsed,\n                    group: label.parentGroup,\n                    options: symbolOptions,\n                    renderer: label.renderer,\n                    show: shouldRender,\n                    xy: label.xy\n                });\n                // Add class name for the node.\n                addClassName = prefixClassName +\n                    (collapsed ? 'collapsed' : 'expanded');\n                removeClassName = prefixClassName +\n                    (collapsed ? 'expanded' : 'collapsed');\n                label\n                    .addClass(addClassName)\n                    .removeClass(removeClassName);\n                if (!styledMode) {\n                    label.css({\n                        cursor: 'pointer'\n                    });\n                }\n                // Add events to both label text and icon\n                [label, icon].forEach((object) => {\n                    if (object && !object.attachedTreeGridEvents) {\n                        // On hover\n                        addEvent(object.element, 'mouseover', function () {\n                            onTickHover(label);\n                        });\n                        // On hover out\n                        addEvent(object.element, 'mouseout', function () {\n                            onTickHoverExit(label, labelOptions);\n                        });\n                        addEvent(object.element, 'click', function () {\n                            tickGrid.toggleCollapse();\n                        });\n                        object.attachedTreeGridEvents = true;\n                    }\n                });\n            }\n            else if (icon) {\n                removeEvent(labelElement);\n                label?.css({ cursor: 'default' });\n                icon.destroy();\n            }\n        }\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class TreeGridTickAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(TickClass) {\n                const tickProto = TickClass.prototype;\n                if (!tickProto.toggleCollapse) {\n                    addEvent(TickClass, 'init', onTickInit);\n                    wrap(tickProto, 'getLabelPosition', wrapGetLabelPosition);\n                    wrap(tickProto, 'renderLabel', wrapRenderLabel);\n                    // Backwards compatibility\n                    tickProto.collapse = function (redraw) {\n                        this.treeGrid.collapse(redraw);\n                    };\n                    tickProto.expand = function (redraw) {\n                        this.treeGrid.expand(redraw);\n                    };\n                    tickProto.toggleCollapse = function (redraw) {\n                        this.treeGrid.toggleCollapse(redraw);\n                    };\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * @private\n             */\n            constructor(tick) {\n                this.tick = tick;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Collapse the grid cell. Used when axis is of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#collapse\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            collapse(redraw) {\n                const tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    const pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.collapse(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            }\n            /**\n             * Destroy remaining labelIcon if exist.\n             *\n             * @private\n             * @function Highcharts.Tick#destroy\n             */\n            destroy() {\n                if (this.labelIcon) {\n                    this.labelIcon.destroy();\n                }\n            }\n            /**\n             * Expand the grid cell. Used when axis is of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#expand\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            expand(redraw) {\n                const { pos, axis } = this.tick, { treeGrid, brokenAxis } = axis, posMappedNodes = treeGrid.mapOfPosToGridNode;\n                if (brokenAxis && posMappedNodes) {\n                    const node = posMappedNodes[pos], breaks = treeGrid.expand(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            }\n            /**\n             * Toggle the collapse/expand state of the grid cell. Used when axis is\n             * of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#toggleCollapse\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            toggleCollapse(redraw) {\n                const tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    const pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.toggleCollapse(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreeGridTickAdditions;\n    });\n    _registerModule(_modules, 'Series/TreeUtilities.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { extend, isArray, isNumber, isObject, merge, pick, relativeLength } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getColor(node, options) {\n            const index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n            let getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n            /**\n             * @private\n             */\n            const variateColor = (color) => {\n                const colorVariation = level && level.colorVariation;\n                if (colorVariation &&\n                    colorVariation.key === 'brightness' &&\n                    index &&\n                    siblings) {\n                    return Color.parse(color).brighten(colorVariation.to * (index / siblings)).get();\n                }\n                return color;\n            };\n            if (node) {\n                point = points[node.i];\n                level = mapOptionsToLevel[node.level] || {};\n                getColorByPoint = point && level.colorByPoint;\n                if (getColorByPoint) {\n                    colorIndexByPoint = point.index % (colors ?\n                        colors.length :\n                        chartOptionsChart.colorCount);\n                    colorByPoint = colors && colors[colorIndexByPoint];\n                }\n                // Select either point color, level color or inherited color.\n                if (!series.chart.styledMode) {\n                    color = pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n                }\n                colorIndex = pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n            }\n            return {\n                color: color,\n                colorIndex: colorIndex\n            };\n        }\n        /**\n         * Creates a map from level number to its given options.\n         *\n         * @private\n         *\n         * @param {Object} params\n         * Object containing parameters.\n         * - `defaults` Object containing default options. The default options are\n         *   merged with the userOptions to get the final options for a specific\n         *   level.\n         * - `from` The lowest level number.\n         * - `levels` User options from series.levels.\n         * - `to` The highest level number.\n         *\n         * @return {Highcharts.Dictionary<object>|null}\n         * Returns a map from level number to its given options.\n         */\n        function getLevelOptions(params) {\n            const result = {};\n            let defaults, converted, i, from, to, levels;\n            if (isObject(params)) {\n                from = isNumber(params.from) ? params.from : 1;\n                levels = params.levels;\n                converted = {};\n                defaults = isObject(params.defaults) ? params.defaults : {};\n                if (isArray(levels)) {\n                    converted = levels.reduce((obj, item) => {\n                        let level, levelIsConstant, options;\n                        if (isObject(item) && isNumber(item.level)) {\n                            options = merge({}, item);\n                            levelIsConstant = pick(options.levelIsConstant, defaults.levelIsConstant);\n                            // Delete redundant properties.\n                            delete options.levelIsConstant;\n                            delete options.level;\n                            // Calculate which level these options apply to.\n                            level = item.level + (levelIsConstant ? 0 : from - 1);\n                            if (isObject(obj[level])) {\n                                merge(true, obj[level], options); // #16329\n                            }\n                            else {\n                                obj[level] = options;\n                            }\n                        }\n                        return obj;\n                    }, {});\n                }\n                to = isNumber(params.to) ? params.to : 1;\n                for (i = 0; i <= to; i++) {\n                    result[i] = merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         * @todo Combine buildTree and buildNode with setTreeValues\n         * @todo Remove logic from Treemap and make it utilize this mixin.\n         */\n        function setTreeValues(tree, options) {\n            const before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n            let childrenTotal = 0;\n            tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n            tree.name = pick(point && point.name, '');\n            tree.visible = (idRoot === tree.id ||\n                options.visible === true);\n            if (typeof before === 'function') {\n                tree = before(tree, options);\n            }\n            // First give the children some values\n            tree.children.forEach((child, i) => {\n                const newOptions = extend({}, options);\n                extend(newOptions, {\n                    index: i,\n                    siblings: tree.children.length,\n                    visible: tree.visible\n                });\n                child = setTreeValues(child, newOptions);\n                children.push(child);\n                if (child.visible) {\n                    childrenTotal += child.val;\n                }\n            });\n            // Set the values\n            const value = pick(optionsPoint.value, childrenTotal);\n            tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n            tree.children = children;\n            tree.childrenTotal = childrenTotal;\n            tree.isLeaf = tree.visible && !childrenTotal;\n            tree.val = value;\n            return tree;\n        }\n        /**\n         * Update the rootId property on the series. Also makes sure that it is\n         * accessible to exporting.\n         *\n         * @private\n         *\n         * @param {Object} series\n         * The series to operate on.\n         *\n         * @return {string}\n         * Returns the resulting rootId after update.\n         */\n        function updateRootId(series) {\n            let rootId, options;\n            if (isObject(series)) {\n                // Get the series options.\n                options = isObject(series.options) ? series.options : {};\n                // Calculate the rootId.\n                rootId = pick(series.rootNode, options.rootId, '');\n                // Set rootId on series.userOptions to pick it up in exporting.\n                if (isObject(series.userOptions)) {\n                    series.userOptions.rootId = rootId;\n                }\n                // Set rootId on series to pick it up on next update.\n                series.rootNode = rootId;\n            }\n            return rootId;\n        }\n        /**\n         * Get the node width, which relies on the plot width and the nodeDistance\n         * option.\n         *\n         * @private\n         */\n        function getNodeWidth(series, columnCount) {\n            const { chart, options } = series, { nodeDistance = 0, nodeWidth = 0 } = options, { plotSizeX = 1 } = chart;\n            // Node width auto means they are evenly distributed along the width of\n            // the plot area\n            if (nodeWidth === 'auto') {\n                if (typeof nodeDistance === 'string' && /%$/.test(nodeDistance)) {\n                    const fraction = parseFloat(nodeDistance) / 100, total = columnCount + fraction * (columnCount - 1);\n                    return plotSizeX / total;\n                }\n                const nDistance = Number(nodeDistance);\n                return ((plotSizeX + nDistance) /\n                    (columnCount || 1)) - nDistance;\n            }\n            return relativeLength(nodeWidth, plotSizeX);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const TreeUtilities = {\n            getColor,\n            getLevelOptions,\n            getNodeWidth,\n            setTreeValues,\n            updateRootId\n        };\n\n        return TreeUtilities;\n    });\n    _registerModule(_modules, 'Core/Axis/TreeGrid/TreeGridAxis.js', [_modules['Core/Axis/BrokenAxis.js'], _modules['Core/Axis/GridAxis.js'], _modules['Gantt/Tree.js'], _modules['Core/Axis/TreeGrid/TreeGridTick.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js']], function (BrokenAxis, GridAxis, Tree, TreeGridTick, TU, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { getLevelOptions } = TU;\n        const { addEvent, find, fireEvent, isArray, isObject, isString, merge, pick, removeEvent, wrap } = U;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let TickConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function getBreakFromNode(node, max) {\n            const to = node.collapseEnd || 0;\n            let from = node.collapseStart || 0;\n            // In broken-axis, the axis.max is minimized until it is not within a\n            // break. Therefore, if break.to is larger than axis.max, the axis.to\n            // should not add the 0.5 axis.tickMarkOffset, to avoid adding a break\n            // larger than axis.max.\n            // TODO consider simplifying broken-axis and this might solve itself\n            if (to >= max) {\n                from -= 0.5;\n            }\n            return {\n                from: from,\n                to: to,\n                showPoints: false\n            };\n        }\n        /**\n         * Creates a tree structure of the data, and the treegrid. Calculates\n         * categories, and y-values of points based on the tree.\n         *\n         * @private\n         * @function getTreeGridFromData\n         *\n         * @param {Array<Highcharts.GanttPointOptions>} data\n         * All the data points to display in the axis.\n         *\n         * @param {boolean} uniqueNames\n         * Whether or not the data node with the same name should share grid cell. If\n         * true they do share cell. False by default.\n         *\n         * @param {number} numberOfSeries\n         *\n         * @return {Object}\n         * Returns an object containing categories, mapOfIdToNode,\n         * mapOfPosToGridNode, and tree.\n         *\n         * @todo There should be only one point per line.\n         * @todo It should be optional to have one category per point, or merge\n         *       cells\n         * @todo Add unit-tests.\n         */\n        function getTreeGridFromData(data, uniqueNames, numberOfSeries) {\n            const categories = [], collapsedNodes = [], mapOfIdToNode = {}, uniqueNamesEnabled = typeof uniqueNames === 'boolean' ?\n                uniqueNames : false;\n            let mapOfPosToGridNode = {}, posIterator = -1;\n            // Build the tree from the series data.\n            const treeParams = {\n                // After the children has been created.\n                after: function (node) {\n                    const gridNode = mapOfPosToGridNode[node.pos];\n                    let height = 0, descendants = 0;\n                    gridNode.children.forEach(function (child) {\n                        descendants += (child.descendants || 0) + 1;\n                        height = Math.max((child.height || 0) + 1, height);\n                    });\n                    gridNode.descendants = descendants;\n                    gridNode.height = height;\n                    if (gridNode.collapsed) {\n                        collapsedNodes.push(gridNode);\n                    }\n                },\n                // Before the children has been created.\n                before: function (node) {\n                    const data = isObject(node.data, true) ?\n                        node.data :\n                        {}, name = isString(data.name) ? data.name : '', parentNode = mapOfIdToNode[node.parent], parentGridNode = (isObject(parentNode, true) ?\n                        mapOfPosToGridNode[parentNode.pos] :\n                        null), hasSameName = function (x) {\n                        return x.name === name;\n                    };\n                    let gridNode, pos;\n                    // If not unique names, look for sibling node with the same name\n                    if (uniqueNamesEnabled &&\n                        isObject(parentGridNode, true) &&\n                        !!(gridNode = find(parentGridNode.children, hasSameName))) {\n                        // If there is a gridNode with the same name, reuse position\n                        pos = gridNode.pos;\n                        // Add data node to list of nodes in the grid node.\n                        gridNode.nodes.push(node);\n                    }\n                    else {\n                        // If it is a new grid node, increment position.\n                        pos = posIterator++;\n                    }\n                    // Add new grid node to map.\n                    if (!mapOfPosToGridNode[pos]) {\n                        mapOfPosToGridNode[pos] = gridNode = {\n                            depth: parentGridNode ? parentGridNode.depth + 1 : 0,\n                            name: name,\n                            id: data.id,\n                            nodes: [node],\n                            children: [],\n                            pos: pos\n                        };\n                        // If not root, then add name to categories.\n                        if (pos !== -1) {\n                            categories.push(name);\n                        }\n                        // Add name to list of children.\n                        if (isObject(parentGridNode, true)) {\n                            parentGridNode.children.push(gridNode);\n                        }\n                    }\n                    // Add data node to map\n                    if (isString(node.id)) {\n                        mapOfIdToNode[node.id] = node;\n                    }\n                    // If one of the points are collapsed, then start the grid node\n                    // in collapsed state.\n                    if (gridNode &&\n                        data.collapsed === true) {\n                        gridNode.collapsed = true;\n                    }\n                    // Assign pos to data node\n                    node.pos = pos;\n                }\n            };\n            const updateYValuesAndTickPos = function (map, numberOfSeries) {\n                const setValues = function (gridNode, start, result) {\n                    const nodes = gridNode.nodes, padding = 0.5;\n                    let end = start + (start === -1 ? 0 : numberOfSeries - 1);\n                    const diff = (end - start) / 2, pos = start + diff;\n                    nodes.forEach(function (node) {\n                        const data = node.data;\n                        if (isObject(data, true)) {\n                            // Update point\n                            data.y = start + (data.seriesIndex || 0);\n                            // Remove the property once used\n                            delete data.seriesIndex;\n                        }\n                        node.pos = pos;\n                    });\n                    result[pos] = gridNode;\n                    gridNode.pos = pos;\n                    gridNode.tickmarkOffset = diff + padding;\n                    gridNode.collapseStart = end + padding;\n                    gridNode.children.forEach(function (child) {\n                        setValues(child, end + 1, result);\n                        end = (child.collapseEnd || 0) - padding;\n                    });\n                    // Set collapseEnd to the end of the last child node.\n                    gridNode.collapseEnd = end + padding;\n                    return result;\n                };\n                return setValues(map['-1'], -1, {});\n            };\n            // Create tree from data\n            const tree = Tree.getTree(data, treeParams);\n            // Update y values of data, and set calculate tick positions.\n            mapOfPosToGridNode = updateYValuesAndTickPos(mapOfPosToGridNode, numberOfSeries);\n            // Return the resulting data.\n            return {\n                categories: categories,\n                mapOfIdToNode: mapOfIdToNode,\n                mapOfPosToGridNode: mapOfPosToGridNode,\n                collapsedNodes: collapsedNodes,\n                tree: tree\n            };\n        }\n        /**\n         * Builds the tree of categories and calculates its positions.\n         * @private\n         * @param {Object} e Event object\n         * @param {Object} e.target The chart instance which the event was fired on.\n         * @param {object[]} e.target.axes The axes of the chart.\n         */\n        function onBeforeRender(e) {\n            const chart = e.target, axes = chart.axes;\n            axes.filter(function (axis) {\n                return axis.options.type === 'treegrid';\n            }).forEach(function (axis) {\n                const options = axis.options || {}, labelOptions = options.labels, uniqueNames = options.uniqueNames, max = options.max, \n                // Check whether any of series is rendering for the first\n                // time, visibility has changed, or its data is dirty, and\n                // only then update. #10570, #10580. Also check if\n                // mapOfPosToGridNode exists. #10887\n                isDirty = (!axis.treeGrid.mapOfPosToGridNode ||\n                    axis.series.some(function (series) {\n                        return !series.hasRendered ||\n                            series.isDirtyData ||\n                            series.isDirty;\n                    }));\n                let numberOfSeries = 0, data, treeGrid;\n                if (isDirty) {\n                    // Concatenate data from all series assigned to this axis.\n                    data = axis.series.reduce(function (arr, s) {\n                        if (s.visible) {\n                            // Push all data to array\n                            (s.options.data || []).forEach(function (data) {\n                                // For using keys - rebuild the data structure\n                                if (s.options.keys && s.options.keys.length) {\n                                    data = s.pointClass.prototype\n                                        .optionsToObject\n                                        .call({ series: s }, data);\n                                    s.pointClass.setGanttPointAliases(data);\n                                }\n                                if (isObject(data, true)) {\n                                    // Set series index on data. Removed again\n                                    // after use.\n                                    data.seriesIndex = (numberOfSeries);\n                                    arr.push(data);\n                                }\n                            });\n                            // Increment series index\n                            if (uniqueNames === true) {\n                                numberOfSeries++;\n                            }\n                        }\n                        return arr;\n                    }, []);\n                    // If max is higher than set data - add a\n                    // dummy data to render categories #10779\n                    if (max && data.length < max) {\n                        for (let i = data.length; i <= max; i++) {\n                            data.push({\n                                // Use the zero-width character\n                                // to avoid conflict with uniqueNames\n                                name: i + '\\u200B'\n                            });\n                        }\n                    }\n                    // `setScale` is fired after all the series is initialized,\n                    // which is an ideal time to update the axis.categories.\n                    treeGrid = getTreeGridFromData(data, uniqueNames || false, (uniqueNames === true) ? numberOfSeries : 1);\n                    // Assign values to the axis.\n                    axis.categories = treeGrid.categories;\n                    axis.treeGrid.mapOfPosToGridNode = (treeGrid.mapOfPosToGridNode);\n                    axis.hasNames = true;\n                    axis.treeGrid.tree = treeGrid.tree;\n                    // Update yData now that we have calculated the y values\n                    axis.series.forEach(function (series) {\n                        const axisData = (series.options.data || []).map(function (d) {\n                            if (isArray(d) &&\n                                series.options.keys &&\n                                series.options.keys.length) {\n                                // Get the axisData from the data array used to\n                                // build the treeGrid where has been modified\n                                data.forEach(function (point) {\n                                    if (d.indexOf(point.x) >= 0 &&\n                                        d.indexOf(point.x2) >= 0) {\n                                        d = point;\n                                    }\n                                });\n                            }\n                            return isObject(d, true) ? merge(d) : d;\n                        });\n                        // Avoid destroying points when series is not visible\n                        if (series.visible) {\n                            series.setData(axisData, false);\n                        }\n                    });\n                    // Calculate the label options for each level in the tree.\n                    axis.treeGrid.mapOptionsToLevel =\n                        getLevelOptions({\n                            defaults: labelOptions,\n                            from: 1,\n                            levels: labelOptions && labelOptions.levels,\n                            to: axis.treeGrid.tree && axis.treeGrid.tree.height\n                        });\n                    // Setting initial collapsed nodes\n                    if (e.type === 'beforeRender') {\n                        axis.treeGrid.collapsedNodes = treeGrid.collapsedNodes;\n                    }\n                }\n            });\n        }\n        /**\n         * Generates a tick for initial positioning.\n         *\n         * @private\n         * @function Highcharts.GridAxis#generateTick\n         *\n         * @param {Function} proceed\n         * The original generateTick function.\n         *\n         * @param {number} pos\n         * The tick position in axis values.\n         */\n        function wrapGenerateTick(proceed, pos) {\n            const axis = this, mapOptionsToLevel = axis.treeGrid.mapOptionsToLevel || {}, isTreeGrid = axis.options.type === 'treegrid', ticks = axis.ticks;\n            let tick = ticks[pos], levelOptions, options, gridNode;\n            if (isTreeGrid &&\n                axis.treeGrid.mapOfPosToGridNode) {\n                gridNode = axis.treeGrid.mapOfPosToGridNode[pos];\n                levelOptions = mapOptionsToLevel[gridNode.depth];\n                if (levelOptions) {\n                    options = {\n                        labels: levelOptions\n                    };\n                }\n                if (!tick &&\n                    TickConstructor) {\n                    ticks[pos] = tick =\n                        new TickConstructor(axis, pos, void 0, void 0, {\n                            category: gridNode.name,\n                            tickmarkOffset: gridNode.tickmarkOffset,\n                            options: options\n                        });\n                }\n                else {\n                    // Update labels depending on tick interval\n                    tick.parameters.category = gridNode.name;\n                    tick.options = options;\n                    tick.addLabel();\n                }\n            }\n            else {\n                proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /**\n         * @private\n         */\n        function wrapInit(proceed, chart, userOptions, coll) {\n            const axis = this, isTreeGrid = userOptions.type === 'treegrid';\n            if (!axis.treeGrid) {\n                axis.treeGrid = new TreeGridAxisAdditions(axis);\n            }\n            // Set default and forced options for TreeGrid\n            if (isTreeGrid) {\n                // Add event for updating the categories of a treegrid.\n                // NOTE Preferably these events should be set on the axis.\n                addEvent(chart, 'beforeRender', onBeforeRender);\n                addEvent(chart, 'beforeRedraw', onBeforeRender);\n                // Add new collapsed nodes on addseries\n                addEvent(chart, 'addSeries', function (e) {\n                    if (e.options.data) {\n                        const treeGrid = getTreeGridFromData(e.options.data, userOptions.uniqueNames || false, 1);\n                        axis.treeGrid.collapsedNodes = (axis.treeGrid.collapsedNodes || []).concat(treeGrid.collapsedNodes);\n                    }\n                });\n                // Collapse all nodes in axis.treegrid.collapsednodes\n                // where collapsed equals true.\n                addEvent(axis, 'foundExtremes', function () {\n                    if (axis.treeGrid.collapsedNodes) {\n                        axis.treeGrid.collapsedNodes.forEach(function (node) {\n                            const breaks = axis.treeGrid.collapse(node);\n                            if (axis.brokenAxis) {\n                                axis.brokenAxis.setBreaks(breaks, false);\n                                // Remove the node from the axis collapsedNodes\n                                if (axis.treeGrid.collapsedNodes) {\n                                    axis.treeGrid.collapsedNodes = axis.treeGrid\n                                        .collapsedNodes\n                                        .filter((n) => ((node.collapseStart !==\n                                        n.collapseStart) ||\n                                        node.collapseEnd !== n.collapseEnd));\n                                }\n                            }\n                        });\n                    }\n                });\n                // If staticScale is not defined on the yAxis\n                // and chart height is set, set axis.isDirty\n                // to ensure collapsing works (#12012)\n                addEvent(axis, 'afterBreaks', function () {\n                    if (axis.coll === 'yAxis' &&\n                        !axis.staticScale &&\n                        axis.chart.options.chart.height) {\n                        axis.isDirty = true;\n                    }\n                });\n                userOptions = merge({\n                    // Default options\n                    grid: {\n                        enabled: true\n                    },\n                    // TODO: add support for align in treegrid.\n                    labels: {\n                        align: 'left',\n                        /**\n                        * Set options on specific levels in a tree grid axis. Takes\n                        * precedence over labels options.\n                        *\n                        * @sample {gantt} gantt/treegrid-axis/labels-levels\n                        *         Levels on TreeGrid Labels\n                        *\n                        * @type      {Array<*>}\n                        * @product   gantt\n                        * @apioption yAxis.labels.levels\n                        *\n                        * @private\n                        */\n                        levels: [{\n                                /**\n                                * Specify the level which the options within this object\n                                * applies to.\n                                *\n                                * @type      {number}\n                                * @product   gantt\n                                * @apioption yAxis.labels.levels.level\n                                *\n                                * @private\n                                */\n                                level: void 0\n                            }, {\n                                level: 1,\n                                /**\n                                 * @type      {Highcharts.CSSObject}\n                                 * @product   gantt\n                                 * @apioption yAxis.labels.levels.style\n                                 *\n                                 * @private\n                                 */\n                                style: {\n                                    /** @ignore-option */\n                                    fontWeight: 'bold'\n                                }\n                            }],\n                        /**\n                         * The symbol for the collapse and expand icon in a\n                         * treegrid.\n                         *\n                         * @product      gantt\n                         * @optionparent yAxis.labels.symbol\n                         *\n                         * @private\n                         */\n                        symbol: {\n                            /**\n                             * The symbol type. Points to a definition function in\n                             * the `Highcharts.Renderer.symbols` collection.\n                             *\n                             * @type {Highcharts.SymbolKeyValue}\n                             *\n                             * @private\n                             */\n                            type: 'triangle',\n                            x: -5,\n                            y: -5,\n                            height: 10,\n                            width: 10\n                        }\n                    },\n                    uniqueNames: false\n                }, userOptions, {\n                    // Forced options\n                    reversed: true\n                });\n            }\n            // Now apply the original function with the original arguments, which are\n            // sliced off this function's arguments\n            proceed.apply(axis, [chart, userOptions, coll]);\n            if (isTreeGrid) {\n                axis.hasNames = true;\n                axis.options.showLastLabel = true;\n            }\n        }\n        /**\n         * Set the tick positions, tickInterval, axis min and max.\n         *\n         * @private\n         * @function Highcharts.GridAxis#setTickInterval\n         *\n         * @param {Function} proceed\n         * The original setTickInterval function.\n         */\n        function wrapSetTickInterval(proceed) {\n            const axis = this, options = axis.options, linkedParent = typeof options.linkedTo === 'number' ?\n                this.chart[axis.coll]?.[options.linkedTo] :\n                void 0, isTreeGrid = options.type === 'treegrid';\n            if (isTreeGrid) {\n                axis.min = pick(axis.userMin, options.min, axis.dataMin);\n                axis.max = pick(axis.userMax, options.max, axis.dataMax);\n                fireEvent(axis, 'foundExtremes');\n                // `setAxisTranslation` modifies the min and max according to axis\n                // breaks.\n                axis.setAxisTranslation();\n                axis.tickInterval = 1;\n                axis.tickmarkOffset = 0.5;\n                axis.tickPositions = axis.treeGrid.mapOfPosToGridNode ?\n                    axis.treeGrid.getTickPositions() :\n                    [];\n                if (linkedParent) {\n                    const linkedParentExtremes = linkedParent.getExtremes();\n                    axis.min = pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);\n                    axis.max = pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);\n                    axis.tickPositions = linkedParent.tickPositions;\n                }\n                axis.linkedParent = linkedParent;\n            }\n            else {\n                proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /**\n         * Wrap axis redraw to remove TreeGrid events from ticks\n         *\n         * @private\n         * @function Highcharts.GridAxis#redraw\n         *\n         * @param {Function} proceed\n         * The original setTickInterval function.\n         */\n        function wrapRedraw(proceed) {\n            const axis = this, options = axis.options, isTreeGrid = options.type === 'treegrid';\n            if (isTreeGrid && axis.visible) {\n                axis.tickPositions.forEach(function (pos) {\n                    const tick = axis.ticks[pos];\n                    if (tick.label && tick.label.attachedTreeGridEvents) {\n                        removeEvent(tick.label.element);\n                        tick.label.attachedTreeGridEvents = false;\n                    }\n                });\n            }\n            proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n        }\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class TreeGridAxisAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass, ChartClass, SeriesClass, TickClass) {\n                if (!AxisClass.keepProps.includes('treeGrid')) {\n                    const axisProps = AxisClass.prototype;\n                    AxisClass.keepProps.push('treeGrid');\n                    wrap(axisProps, 'generateTick', wrapGenerateTick);\n                    wrap(axisProps, 'init', wrapInit);\n                    wrap(axisProps, 'setTickInterval', wrapSetTickInterval);\n                    wrap(axisProps, 'redraw', wrapRedraw);\n                    // Make utility functions available for testing.\n                    axisProps.utils = {\n                        getNode: Tree.getNode\n                    };\n                    if (!TickConstructor) {\n                        TickConstructor = TickClass;\n                    }\n                }\n                GridAxis.compose(AxisClass, ChartClass, TickClass);\n                BrokenAxis.compose(AxisClass, SeriesClass);\n                TreeGridTick.compose(TickClass);\n                return AxisClass;\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * @private\n             */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set the collapse status.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to collapse.\n             */\n            setCollapsedStatus(node) {\n                const axis = this.axis, chart = axis.chart;\n                axis.series.forEach(function (series) {\n                    const data = series.options.data;\n                    if (node.id && data) {\n                        const point = chart.get(node.id), dataPoint = data[series.data.indexOf(point)];\n                        if (point && dataPoint) {\n                            point.collapsed = node.collapsed;\n                            dataPoint.collapsed = node.collapsed;\n                        }\n                    }\n                });\n            }\n            /**\n             * Calculates the new axis breaks to collapse a node.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to collapse.\n             *\n             * @param {number} pos\n             * The tick position to collapse.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            collapse(node) {\n                const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                breaks.push(obj);\n                // Change the collapsed flag #13838\n                node.collapsed = true;\n                axis.treeGrid.setCollapsedStatus(node);\n                return breaks;\n            }\n            /**\n             * Calculates the new axis breaks to expand a node.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to expand.\n             *\n             * @param {number} pos\n             * The tick position to expand.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            expand(node) {\n                const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                // Change the collapsed flag #13838\n                node.collapsed = false;\n                axis.treeGrid.setCollapsedStatus(node);\n                // Remove the break from the axis breaks array.\n                return breaks.reduce(function (arr, b) {\n                    if (b.to !== obj.to || b.from !== obj.from) {\n                        arr.push(b);\n                    }\n                    return arr;\n                }, []);\n            }\n            /**\n             * Creates a list of positions for the ticks on the axis. Filters out\n             * positions that are outside min and max, or is inside an axis break.\n             *\n             * @private\n             *\n             * @return {Array<number>}\n             * List of positions.\n             */\n            getTickPositions() {\n                const axis = this.axis, roundedMin = Math.floor(axis.min / axis.tickInterval) * axis.tickInterval, roundedMax = Math.ceil(axis.max / axis.tickInterval) * axis.tickInterval;\n                return Object.keys(axis.treeGrid.mapOfPosToGridNode || {}).reduce(function (arr, key) {\n                    const pos = +key;\n                    if (pos >= roundedMin &&\n                        pos <= roundedMax &&\n                        !(axis.brokenAxis && axis.brokenAxis.isInAnyBreak(pos))) {\n                        arr.push(pos);\n                    }\n                    return arr;\n                }, []);\n            }\n            /**\n             * Check if a node is collapsed.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Object} node\n             * The node to check if is collapsed.\n             *\n             * @param {number} pos\n             * The tick position to collapse.\n             *\n             * @return {boolean}\n             * Returns true if collapsed, false if expanded.\n             */\n            isCollapsed(node) {\n                const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                return breaks.some(function (b) {\n                    return b.from === obj.from && b.to === obj.to;\n                });\n            }\n            /**\n             * Calculates the new axis breaks after toggling the collapse/expand\n             * state of a node. If it is collapsed it will be expanded, and if it is\n             * expanded it will be collapsed.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to toggle.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            toggleCollapse(node) {\n                return (this.isCollapsed(node) ?\n                    this.expand(node) :\n                    this.collapse(node));\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreeGridAxisAdditions;\n    });\n    _registerModule(_modules, 'Series/Gantt/GanttSeries.js', [_modules['Series/Gantt/GanttPoint.js'], _modules['Series/Gantt/GanttSeriesDefaults.js'], _modules['Gantt/Pathfinder.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Extensions/StaticScale.js'], _modules['Core/Axis/TreeGrid/TreeGridAxis.js'], _modules['Core/Utilities.js']], function (GanttPoint, GanttSeriesDefaults, Pathfinder, SeriesRegistry, StaticScale, TreeGridAxis, U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: Series, seriesTypes: { xrange: XRangeSeries } } = SeriesRegistry;\n        const { extend, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.gantt\n         *\n         * @augments Highcharts.Series\n         */\n        class GanttSeries extends XRangeSeries {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, SeriesClass, TickClass) {\n                XRangeSeries.compose(AxisClass);\n                if (!ChartClass) {\n                    return;\n                }\n                StaticScale.compose(AxisClass, ChartClass);\n                if (!SeriesClass) {\n                    return;\n                }\n                Pathfinder.compose(ChartClass, SeriesClass.prototype.pointClass);\n                if (!TickClass) {\n                    return;\n                }\n                TreeGridAxis.compose(AxisClass, ChartClass, SeriesClass, TickClass);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Draws a single point in the series.\n             *\n             * This override draws the point as a diamond if point.options.milestone\n             * is true, and uses the original drawPoint() if it is false or not set.\n             *\n             * @requires highcharts-gantt\n             *\n             * @private\n             * @function Highcharts.seriesTypes.gantt#drawPoint\n             *\n             * @param {Highcharts.Point} point\n             *        An instance of Point in the series\n             *\n             * @param {\"animate\"|\"attr\"} verb\n             *        'animate' (animates changes) or 'attr' (sets options)\n             */\n            drawPoint(point, verb) {\n                const series = this, seriesOpts = series.options, renderer = series.chart.renderer, shapeArgs = point.shapeArgs, plotY = point.plotY, state = point.selected && 'select', cutOff = seriesOpts.stacking && !seriesOpts.borderRadius;\n                let graphic = point.graphic, diamondShape;\n                if (point.options.milestone) {\n                    if (isNumber(plotY) &&\n                        point.y !== null &&\n                        point.visible !== false) {\n                        diamondShape = renderer.symbols.diamond(shapeArgs.x || 0, shapeArgs.y || 0, shapeArgs.width || 0, shapeArgs.height || 0);\n                        if (graphic) {\n                            graphic[verb]({\n                                d: diamondShape\n                            });\n                        }\n                        else {\n                            point.graphic = graphic = renderer.path(diamondShape)\n                                .addClass(point.getClassName(), true)\n                                .add(point.group || series.group);\n                        }\n                        // Presentational\n                        if (!series.chart.styledMode) {\n                            point.graphic\n                                .attr(series.pointAttribs(point, state))\n                                .shadow(seriesOpts.shadow, null, cutOff);\n                        }\n                    }\n                    else if (graphic) {\n                        point.graphic = graphic.destroy(); // #1269\n                    }\n                }\n                else {\n                    super.drawPoint(point, verb);\n                }\n            }\n            /**\n             * Handle milestones, as they have no x2.\n             * @private\n             */\n            translatePoint(point) {\n                let shapeArgs, size;\n                super.translatePoint(point);\n                if (point.options.milestone) {\n                    shapeArgs = point.shapeArgs;\n                    size = shapeArgs.height || 0;\n                    point.shapeArgs = {\n                        x: (shapeArgs.x || 0) - (size / 2),\n                        y: shapeArgs.y,\n                        width: size,\n                        height: size\n                    };\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        GanttSeries.defaultOptions = merge(XRangeSeries.defaultOptions, GanttSeriesDefaults);\n        extend(GanttSeries.prototype, {\n            pointArrayMap: ['start', 'end', 'y'],\n            pointClass: GanttPoint,\n            setData: Series.prototype.setData\n        });\n        SeriesRegistry.registerSeriesType('gantt', GanttSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GanttSeries;\n    });\n    _registerModule(_modules, 'masters/modules/gantt.src.js', [_modules['Core/Globals.js'], _modules['Extensions/ArrowSymbols.js'], _modules['Gantt/Connection.js'], _modules['Extensions/CurrentDateIndication.js'], _modules['Core/Chart/GanttChart.js'], _modules['Stock/Navigator/Navigator.js'], _modules['Stock/RangeSelector/RangeSelector.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Series/Gantt/GanttSeries.js']], function (Highcharts, ArrowSymbols, Connection, CurrentDateIndication, GanttChart, Navigator, RangeSelector, Scrollbar, GanttSeries) {\n\n        // Series\n        const G = Highcharts;\n        // Classes\n        G.Connection = G.Connection || Connection;\n        G.GanttChart = G.GanttChart || GanttChart;\n        G.Navigator = G.Navigator || Navigator;\n        G.RangeSelector = G.RangeSelector || RangeSelector;\n        G.Scrollbar = G.Scrollbar || Scrollbar;\n        // Functions\n        G.ganttChart = G.GanttChart.ganttChart;\n        // Compositions\n        ArrowSymbols.compose(G.SVGRenderer);\n        CurrentDateIndication.compose(G.Axis, G.PlotLineOrBand);\n        GanttSeries.compose(G.Axis, G.Chart, G.Series, G.Tick);\n        G.Navigator.compose(G.Chart, G.Axis, G.Series);\n        G.RangeSelector.compose(G.Axis, G.Chart);\n        G.Scrollbar.compose(G.Axis);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","arrow","x","y","w","h","arrowHalf","triangleLeft","triangleLeftHalf","compose","SVGRendererClass","symbols","prototype","H","U","defined","error","merge","objectEach","deg2rad","max","Math","min","constructor","from","to","options","init","fromPoint","toPoint","chart","series","pathfinder","renderPath","attribs","styledMode","anim","pathGraphic","connection","graphics","group","renderer","g","addClass","attr","zIndex","add","seriesGroup","translate","plotLeft","plotTop","opacity","d","animate","addMarker","type","markerVector","radians","rotation","box","width","height","pathVector","segment","point","anchor","getPathfinderAnchorPoint","enabled","length","getRadiansToVector","getMarkerVector","radius","rotationOriginX","rotationOriginY","symbol","colorIndex","fill","color","stroke","lineColor","lineWidth","animation","getPath","algorithm","algorithms","chartObstacles","obstacles","requiresObstacles","getChartObstacles","connectors","algorithmMargin","chartObstacleMetrics","getObstacleMetrics","startMarker","endMarker","lineObstacles","obstacleMetrics","hardBounds","xMin","xMax","plotWidth","yMin","yMax","plotHeight","obstacleOptions","margin","startDirectionX","getAlgorithmStartDirection","render","dashStyle","dashstyle","marker","ceil","pathResult","concat","destroy","val","composed","addEvent","pushUnique","wrap","defaultOptions","label","format","formatter","value","axis","time","dateFormat","style","fontSize","onAxisAfterSetOptions","cdiOptions","currentDateIndicator","plotLineOptions","Date","now","className","plotLines","push","onPlotLineOrBandRender","text","getLabelText","wrapPlotLineOrBandGetLabelText","defaultMethod","defaultLabelOptions","indexOf","call","AxisClass","PlotLineOrBandClass","Chart","D","GanttChart","isArray","splat","userOptions","callback","defaultLinkedTo","xAxisOptions","xAxis","yAxisOptions","yAxis","title","legend","navigator","isGantt","map","i","grid","borderColor","opposite","linkedTo","staticScale","reversed","categories","ganttChart","a","b","c","NavigatorConstructor","isTouchDevice","pick","composedMembers","onChartAfterAddSeries","setBaseSeries","onChartAfterSetChartSize","legendOptions","scrollbarHeight","scrollButtonSize","inverted","left","chartWidth","spacing","top","navigatorOptions","chartHeight","scrollbar","rangeSelector","extraBottomMargin","getHeight","verticalAlign","layout","floating","legendHeight","titleOffset","setAxisSize","onChartAfterUpdate","event","scroller","redraw","onChartBeforeRender","onChartBeforeShowResetZoom","chartOptions","zooming","pinchType","onChartCallback","extremes","getExtremes","onChartUpdate","e","scrollbarOptions","ChartClass","NavigatorClass","chartProto","callbacks","correctFloat","isNumber","onAxisInit","navigatorAxis","NavigatorAxisAdditions","onAxisSetExtremes","zoomed","zoomType","isXAxis","trigger","range","previousZoom","preventDefault","keepProps","includes","toFixedRange","pxMin","pxMax","fixedMin","fixedMax","halfPointRange","pointRange","newMin","horiz","newMax","Color","SeriesRegistry","parse","seriesTypes","maskInside","handles","borderRadius","backgroundColor","maskFill","setOpacity","get","outlineColor","outlineWidth","areaspline","fillOpacity","compare","sonification","dataGrouping","approximation","groupPixelWidth","firstAnchor","lastAnchor","units","dataLabels","id","threshold","tickLength","gridLineColor","gridLineWidth","tickPixelInterval","labels","align","textOutline","crosshair","startOnTick","endOnTick","minPadding","maxPadding","tickWidth","rect","relativeLength","_x","_y","halfWidth","r","markerPosition","setFixedRange","dataMax","dataMin","fixedRange","NavigatorDefaults","NavigatorSymbols","RendererRegistry","StockUtilities","setOptions","getRendererType","extend","onSeriesAfterUpdate","isInternal","SeriesClass","ScrollbarAxis","Scrollbar","axisMin","axisMax","scrollMin","Infinity","scrollMax","onAxisAfterGetOffset","index","scrollbarsOffsets","axisOffset","size","onAxisAfterInit","vertical","unitedMin","unitedMax","shouldUpdateExtremes","DOMType","setExtremes","setRange","onAxisAfterRender","offsetsIndex","offset","axisTitleMargin","axisMargin","position","xPosition","isNaN","ScrollbarClass","barBorderRadius","buttonBorderRadius","buttonsEnabled","liveRedraw","minWidth","step","barBackgroundColor","barBorderWidth","barBorderColor","buttonArrowColor","buttonBackgroundColor","buttonBorderColor","buttonBorderWidth","rifleColor","trackBackgroundColor","trackBorderColor","trackBorderRadius","trackBorderWidth","ScrollbarDefaults","crisp","destroyObjectProperties","fireEvent","removeEvent","swapXY","forEach","seg","temp","len","_events","chartX","chartY","scrollbarButtons","scrollbarLeft","scrollbarStrokeWidth","scrollbarTop","addEvents","buttonsOrder","buttons","bar","scrollbarGroup","element","track","mouseDownHandler","bind","mouseMoveHandler","mouseUpHandler","buttonToMinClick","buttonToMaxClick","trackClick","ownerDocument","updatePosition","DOMEvent","cursorToScrollbarPosition","normalizedEvent","minWidthDifference","calculatedWidth","xOffset","barWidth","yOffset","removeEvents","prop","drawScrollbarButton","strokeWidth","pointer","normalize","mousePosition","initPositions","grabbedCenter","change","direction","touches","chartPosition","hasDragged","method","rendered","show","translateX","translateY","hide","scrollbarRifles","fromPX","newSize","fullWidth","toPX","newPos","floor","newRiflesPos","showFull","eventType","svg","boosted","update","Axis","ChartNavigatorComposition","NavigatorComposition","SVGRenderer","clamp","erase","find","numExt","extreme","numbers","filter","Navigator","isDirty","drawHandle","verb","round","parseInt","drawOutline","zoomedMin","zoomedMax","outline","halfOutline","outlineCorrection","navigatorSize","navigatorTop","lineTop","lineBtm","verticalMin","drawMasks","navigatorHeight","shades","shade","renderElements","mouseCursor","cursor","navigatorGroup","visibility","hasMask","css","handlesOptions","symbolName","symbolFn","invertedUpdate","setOpposite","navigatorEnabled","adaptToUpdatedData","baseSeries","updatedDataHandler","eventsToUnbind","offsets","getXAxisOffsets","scrollbarXAxis","fake","minRange","maxRange","navigatorWidth","toPixels","abs","toValue","currentRange","grabbedLeft","grabbedRight","fixedWidth","addMouseEvents","container","onMouseMove","onMouseUp","getPartsEvents","renderTo","modifyNavigatorAxisExtremes","eventName","events","name","navigatorItem","shadesMousedown","navigatorPosition","ext","dragOffset","reversedExtremes","getUnionExtremes","eventArguments","handlesMousedown","baseXAxis","reverse","otherHandlePos","fixedExtreme","pageX","setTimeout","unionExtremes","triggerOp","Object","keys","unbind","removeBaseSeriesEvents","modifyBaseAxisExtremes","scrollbarEnabled","xAxisIndex","yAxisIndex","baseXaxis","isDirtyBox","breaks","ordinal","overscroll","keepOrdinalPadding","zoomEnabled","alignTicks","data","updateNavigatorSeries","unbindRedraw","scrollTrackWidth","valueRange","addBaseSeriesEvents","addChartEvents","Boolean","returnFalseOnNoBaseSeries","ret","baseAxis","navAxis","navAxisOptions","baseAxisOptions","baseSeriesOptions","s","showInNavigator","navSeriesMixin","enableMouseTracking","padXAxis","showInLegend","stacking","states","inactive","navigatorSeries","navSeries","base","baseOptions","mergedNavSeriesOptions","chartNavigatorSeriesOptions","baseNavigatorOptions","linkedNavSeries","userNavOptions","visible","plotOptions","navigatorSeriesData","hasNavigatorData","slice","initSeries","setSortedData","userSeriesOptions","colors","setVisible","remove","getBaseSeriesMin","currentSeriesMin","reduce","xData","baseExtremes","baseMin","baseMax","baseDataMin","baseDataMax","stickToMin","stickToMax","convertOverscroll","hasSetExtremes","eventArgs","Number","MAX_VALUE","userMin","userMax","shouldStickToMax","shouldStickToMin","pointStart","setData","xDataMin","marginName","axes","coll","lang","rangeSelectorZoom","rangeSelectorFrom","rangeSelectorTo","allButtonsEnabled","buttonSpacing","dropdown","buttonTheme","padding","inputBoxBorderColor","inputBoxHeight","inputBoxWidth","inputDateFormat","inputDateParser","inputEditDateFormat","inputEnabled","inputPosition","inputSpacing","selected","buttonPosition","inputStyle","labelStyle","RangeSelectorDefaults","RangeSelectorConstructor","chartDestroyEvents","axisMinFromRange","rangeOptions","getTrueRange","count","timeName","date","basePeriod","set","getTime","MIN_VALUE","_offsetMin","createRangeSelector","deferredYTDClick","clickButton","extraTopMargin","redrawRangeSelector","alignTo","display","spacingBox","placed","onChartDestroy","iEnd","splice","onChartGetMargins","rangeSelectorHeight","marginBottom","optionsRangeSelector","extraBottomMarginWas","extraTopMarginWas","RangeSelectorClass","minFromRange","Series","OrdinalAxis","timeUnits","isString","getTimeTicks","normalizedInterval","startOfWeek","positions","closestDistance","findHigherRanks","higherRanks","tickPixelIntervalOption","segmentStarts","end","segmentPositions","hasCrossedHigherRank","info","outsideMax","start","groupPositions","lastGroupPosition","arguments","posLength","shift","unitRange","hour","translatedArr","distances","itemToRemove","translated","lastTranslated","medianDistance","distance","sort","index2val","ordinalPositions","lin2val","localMin","old","localA","transA","getExtendedPositions","pixelVal","minPixelPadding","getIndexOfPoint","mantissa","leftNeighbour","rightNeighbour","getIndexInArray","Additions","findIndexOf","percent","onAxisFoundExtremes","originalOrdinalRange","onAxisAfterSetScale","isOrdinal","onAxisInitialAxisTranslation","beforeSetTickPositions","tickInterval","postProcessTickInterval","onChartPan","originalEvent","panning","runBase","trimmedRange","mouseDownX","hoverPoints","closestPointRange","overscrollPointsRange","movedUnits","translationSlope","slope","extendedOrdinalPositions","extendedAxis","val2lin","setState","test","onSeriesUpdatedData","toIndex","ordinalIndex","ordinalLength","originalPositionsReference","diff","approximateIndexOffset","axisProto","ordinal2lin","hasBreaks","brokenAxis","uniqueOrdinalPositions","dist","minIndex","maxIndex","useOrdinal","adjustOrdinalExtremesPoints","isBoosted","distanceBetweenPoint","processedXData","reserveSpace","takeOrdinalPosition","unshift","pop","forceOrdinal","getOverscrollPositions","groupIntervalFactor","sortedArray","key","indirectSearch","middle","withOverscroll","grouping","currentDataGrouping","unitName","fakeAxis","fakeSeries","applyGrouping","getGroupPixelWidth","getGroupIntervalFactor","destroyGroupedData","noop","getProcessedData","forced","processData","hasExtremesChanged","basePointRange","median","ordinalArray","firstPointX","firstPointVal","hasPointsInside","points","some","firstPoint","plotX","ordinalPointPixelInterval","shiftIndex","extraRange","ordinalSlope","calculateOverscroll","overscrollPercentage","overscrollValue","pixelToPercent","limitedOverscrollValue","RangeSelectorComposition","SVGElement","createElement","discardElement","pad","pInt","RangeSelector","buttonOptions","defaultButtons","initialButtonGroupWidth","baseXAxisOptions","_range","rangeMin","ctx","ytdExtremes","addOffsetMin","setSelected","forcedDataGrouping","setDataGrouping","frozenStates","preserveDataGrouping","getYTDExtremes","useUTC","_offsetMax","selectedIndex","rangeSelectorButton","axisRangeUpdateEvent","selectedOption","blurInputs","minInput","maxInput","blur","computeButtonRange","createElements","updateButtonStates","dropdownLabel","actualRange","hasNoData","hasVisibleSeries","day","ytdMin","ytdMax","buttonStates","Array","selectedExists","isSelectedTooGreat","offsetRange","isSelected","isTooGreatRange","isTooSmallRange","isYTDButNotSelected","isSameRange","prevOrdinalPosition","nextOrdinalPosition","month","year","disable","select","state","button","disabled","bbox","getBBox","fixedTimes","millisecond","second","minute","week","offsetMin","offsetMax","getInputValue","input","defaultInputDateParser","setInputValue","inputTime","dateBox","minDateBox","maxDateBox","hcTimeAttr","getAttribute","updatedTime","previousTime","setAttribute","inputTypeFormats","setInputExtremes","showInput","inputGroup","isTextInput","border","offsetWidth","offsetHeight","hideInput","inputDate","split","join","str","isSafari","lastIndexOf","getTimezoneOffset","parts","UTC","drawInput","div","chartStyle","isMin","updateExtremes","chartAxis","currentExtreme","on","focus","preferredInputType","char","boxShadow","textAlign","fontFamily","onfocus","onblur","doc","activeElement","keyDown","onchange","onkeypress","keyCode","onkeydown","onkeyup","getPosition","buttonTop","inputTop","ts","inputsZIndex","renderButtons","parentNode","insertBefore","minElems","minLabel","maxElems","maxLabel","alignElements","buttonGroup","userButtonTheme","paddingLeft","paddingRight","hover","mouseOver","isMS","mouseOut","zoomText","textContent","textStr","callDefaultEvent","buttonEvents","click","isActive","navButtonOptions","exporting","navigation","getXOffsetForExportButton","titleCollision","positionButtons","xOffsetForExportButton","alignButtonGroup","hasLoaded","handleCollision","alignTranslateY","alignAttr","groupHeight","marginTop","buttonLeft","maxButtonWidth","buttonWidth","bBox","groupsOverlap","buttonGroupWidth","alignOptions","inputGroupX","inputGroupWidth","buttonGroupX","moveInputsDown","collapseButtons","expandButtons","isCollapsed","showDropdown","hideDropdown","hasVisibleDropdown","rangeSelectorGroup","yPosition","buttonPositionY","inputPositionY","minPosition","subtitle","rSelector","window","HTMLElement","applyRadius","prevSeg","nextSeg","x1","y1","x2","y2","directionX","directionY","getLinkPath","pathParams","parentVisible","straight","curved","PathUtilities","findLastObstacleBefore","startIx","right","cmp","findObstacleFromPoint","obstacle","pathFromSegments","segments","limitObstacleToBounds","bounds","simpleConnect","startObstacleIx","endObstacleIx","endSegment","dir","startObstacle","waypoint","useMax","endPoint","copyFromPoint","fromKey","toKey","getMeOut","prevWaypoint","waypoint2","fastAvoid","dirIsX","endSegments","metrics","softMinX","maxWidth","softMaxX","softMinY","maxHeight","softMaxY","extractedEndPoint","forceObstacleBreak","pivotPoint","directionIsX","lastPoint","highestPoint","lowestPoint","searchDirection","getDodgeDirection","softBounds","soft","hard","toPointMax","toPointMin","maxOutOfSoftBounds","minOutOfSoftBounds","maxOutOfHardBounds","minOutOfHardBounds","minDistance","maxDistance","minPivot","maxPivot","extractFromObstacle","goalPoint","clearPathTo","pivot","waypointUseMax","envelopingObstacle","secondEnvelopingObstacle","envelopWaypoint","obstacleMargin","inside","ConnectorsDefaults","ConnectionComposition","getPointBB","shapeArgs","bb","graphic","plotY","pointGetPathfinderAnchorPoint","markerOptions","pointGetRadiansToVector","v1","v2","atan2","pointGetMarkerVector","markerRadius","twoPI","PI","rectWidth","rectHeight","rAtan","rectHalfWidth","rectHalfHeight","rectHorizontalCenter","rectVerticalCenter","edgePoint","theta","tanTheta","leftOrRightRegion","xFactor","yFactor","tan","cos","sin","PathfinderClass","PointClass","pointProto","acc","Connection","PathfinderAlgorithms","PathfinderComposition","Point","Pathfinder","connections","deferRender","oldConnections","ganttPointOptions","dependency","connect","connects","isInside","j","k","found","lenOld","lenNew","oldCon","newCon","renderConnections","conns","pathfinderRemoveRenderEvent","calculatedMargin","sLen","pLen","calculateObstacleMargin","onstacleDistance","calculateObstacleDistance","bbMargin","yOverlap","xOverlap","xDistance","yDistance","xCenter","yCenter","ArrowSymbols","G","scrollablePlotArea","minHeight","chartAdjustHeight","redrawTrigger","initiatedScale","unitLength","scrollablePixelsY","setSize","clipRect","sharedClipKey","sharedClips","adjustHeight","StaticScale","isObject","colorByPoint","amount","partialFill","whiteSpace","tooltip","headerFormat","pointFormat","column","pointClass","ColumnPoint","XRangePoint","getColorByCategory","colorCount","resolveColor","drawPoint","getAnimationVerb","getLabelConfig","cfg","yCats","yCategory","category","isValid","ttBelow","tooltipDateKeys","XRangeSeriesDefaults","ColumnSeries","onAxisAfterGetSeriesExtremes","modMax","x2Data","XRangeSeries","getColumnMetrics","swapAxes","cropData","yData","crop","findPointIndex","pointIndex","cropStart","touched","cropped","alignDataLabel","oldPlotX","dlBox","centerX","dataLabel","translatePoint","columnMetrics","minPointLength","oldColWidth","seriesXOffset","pointXOffset","posX","plotX2","borderWidth","widthDifference","pointHeight","dlLeft","dlRight","dlWidth","clipRectWidth","pointWidth","pointPlacement","tooltipPos","xIndex","yIndex","tooltipYOffset","partShapeArgs","clipRectArgs","seriesOpts","shapeType","pointState","stateOpts","pointStateVerb","pointAttr","pointAttribs","pfOptions","isNull","getClassName","partRect","partialClipRect","clip","shadow","brighten","drawPoints","pointCount","animationLimit","isPointInside","pointArrayMap","getExtremesFromAll","parallelArrays","requireSorting","autoIncrement","buildKDTree","registerSeriesType","xrange","GanttPoint","setGanttPointAliases","addIfExists","completed","applyOptions","ganttPoint","milestone","pointFormatter","formats","tooltipOptions","dateTimeLabelFormats","ttOptions","xDateFormat","retVal","tooltipFormatter","getDateFormat","StackItem","BrokenAxis","setBreaks","onAxisAfterSetTickPositions","tickPositions","newPositions","isInAnyBreak","onSeriesAfterGeneratePoints","connectNulls","isPointInBreak","onSeriesAfterRender","drawBreaks","seriesDrawBreaks","breakArray","breaksOutOfRange","brk","isOut","otherBreak","toUpperCase","seriesGappedPath","groupingSize","gapSize","current","next","gapUnit","xRange","stack","stacks","stackKey","stackLabels","total","getGraphPath","seriesProto","gappedPath","isInBreak","repeat","inclusive","lin2Val","nval","val2Lin","findBreakAt","testKeep","inbrk","keep","showPoints","forceRedraw","axisBreak","setAxisTranslation","breakArrayT","pointRangePadding","inBrk","move","breakSize","minPointOffset","GridAxisSide","dateFormats","getMaxLabelDimensions","ticks","dimensions","pos","tick","labelHeight","labelWidth","textPxLength","treeGrid","mapOfPosToGridNode","treeDepth","indentation","wrapGetOffset","proceed","columnsFirst","side","isColumn","columns","getOffset","onAfterGetTitlePosition","gridOptions","axisTitle","axisHeight","axisLeft","axisTop","axisWidth","tickSize","titleWidth","xOption","yOption","titleMargin","titleFontSize","fontMetrics","f","offAxis","bottom","titlePosition","onAfterInit","applyGridOptions","showLastLabel","labelRotation","minTickInterval","columnIndex","columnOptions","onAfterRender","firstTick","slotWidth","maxLabelDimensions","rightWall","isOuterAxis","axisLine","linePath","getLinePath","startPoint","marginRight","upperBorderEndPoint","upperBorderPath","lowerBorderEndPoint","tickmarkOffset","lowerBorderPath","upperBorder","renderBorder","lowerBorder","axisLineExtra","showAxis","hasRendered","linkedParent","tickMark","lastTick","hiddenLabels","hiddenMarks","mark","isLast","onAfterSetAxisTranslation","tickInfo","userLabels","onAfterSetOptions","gridAxisOptions","list","textOverflow","tickPositioner","parentInfo","unitIdx","unit","counts","onAfterSetOptions2","onAfterSetScale","setScale","onAfterTickSize","labelPadding","cellHeight","onDestroy","keepEvents","onInit","tickColor","GridAxisAdditions","onTickAfterGetLabelPosition","labelOpts","tickPos","nextTickPos","crispCorr","lblMetrics","useHTML","lines","onTickLabelFormat","pointCopy","isFirst","p","is","gantt","onTrimTicks","categoryAxis","firstPos","secondPos","lastPos","beforeLastPos","linkedMin","linkedMax","startLessThanMin","endMoreThanMin","startLessThanMax","endMoreThanMax","isLinked","wrapUnsquish","parentAxis","thisIndex","lastIndex","otherAxis","extraBorderLine","axisGroup","E","timestamp","charAt","W","unitsToOmit","firstDay","thursday","valueOf","firstThursday","toString","TickClass","getNode","parent","level","mapOfIdToChildren","after","before","node","depth","descendants","children","child","childStart","NaN","childEnd","getTree","getListOfParents","ids","listOfParents","prev","curr","adoptedByRoot","orphan","parentExcluded","onTickInit","TreeGridTickAdditions","wrapGetLabelPosition","labelOptions","lbOptions","isTreeGrid","result","wrapRenderLabel","collapsed","addClassName","removeClassName","tickGrid","tickOptions","icon","labelIcon","labelElement","axisGrid","axisOptions","symbolOptions","hasDescendants","isTreeGridElement","shouldRender","prefixClassName","prefixLevelClass","removeClass","RegExp","renderLabelIcon","params","isNew","labelBox","xy","iconCenter","styles","parentGroup","object","attachedTreeGridEvents","textDecoration","onTickHoverExit","toggleCollapse","tickProto","collapse","expand","posMappedNodes","getColor","colorIndexByPoint","mapOptionsToLevel","parentColor","parentColorIndex","siblings","chartOptionsChart","variateColor","colorVariation","getLevelOptions","defaults","converted","levels","item","levelIsConstant","getNodeWidth","columnCount","nodeDistance","nodeWidth","plotSizeX","fraction","parseFloat","nDistance","setTreeValues","tree","idRoot","nodeRoot","mapIdToNode","optionsPoint","childrenTotal","levelDynamic","newOptions","isLeaf","updateRootId","rootId","rootNode","GridAxis","Tree","TreeGridTick","TU","TickConstructor","getBreakFromNode","collapseEnd","collapseStart","getTreeGridFromData","uniqueNames","numberOfSeries","collapsedNodes","mapOfIdToNode","uniqueNamesEnabled","posIterator","gridNode","parentGridNode","nodes","updateYValuesAndTickPos","setValues","seriesIndex","onBeforeRender","target","isDirtyData","arr","optionsToObject","hasNames","axisData","wrapGenerateTick","levelOptions","parameters","addLabel","wrapInit","TreeGridAxisAdditions","n","fontWeight","wrapSetTickInterval","getTickPositions","linkedParentExtremes","wrapRedraw","axisProps","utils","setCollapsedStatus","dataPoint","roundedMin","roundedMax","GanttSeriesDefaults","TreeGridAxis","GanttSeries","cutOff","diamondShape","diamond","CurrentDateIndication","PlotLineOrBand","Tick"],"rangeMappings":";;;;;;;;","mappings":"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"}